# Generated from ora2epas.g4 by ANTLR 4.7
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0230")
        buf.write("\u14ca\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe")
        buf.write("\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102")
        buf.write("\t\u0102\4\u0103\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105")
        buf.write("\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109")
        buf.write("\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c")
        buf.write("\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110")
        buf.write("\t\u0110\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113")
        buf.write("\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117")
        buf.write("\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a")
        buf.write("\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e")
        buf.write("\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121")
        buf.write("\4\u0122\t\u0122\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125")
        buf.write("\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128")
        buf.write("\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c")
        buf.write("\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f")
        buf.write("\4\u0130\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133")
        buf.write("\t\u0133\4\u0134\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136")
        buf.write("\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a")
        buf.write("\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d")
        buf.write("\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141")
        buf.write("\t\u0141\4\u0142\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144")
        buf.write("\4\u0145\t\u0145\4\u0146\t\u0146\4\u0147\t\u0147\4\u0148")
        buf.write("\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b\t\u014b")
        buf.write("\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f")
        buf.write("\t\u014f\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152")
        buf.write("\4\u0153\t\u0153\4\u0154\t\u0154\4\u0155\t\u0155\4\u0156")
        buf.write("\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158\4\u0159\t\u0159")
        buf.write("\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d")
        buf.write("\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160")
        buf.write("\4\u0161\t\u0161\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164")
        buf.write("\t\u0164\4\u0165\t\u0165\4\u0166\t\u0166\4\u0167\t\u0167")
        buf.write("\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a\4\u016b")
        buf.write("\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e")
        buf.write("\4\u016f\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172")
        buf.write("\t\u0172\4\u0173\t\u0173\4\u0174\t\u0174\4\u0175\t\u0175")
        buf.write("\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178\t\u0178\4\u0179")
        buf.write("\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\3\2\6\2\u02f8")
        buf.write("\n\2\r\2\16\2\u02f9\3\3\7\3\u02fd\n\3\f\3\16\3\u0300\13")
        buf.write("\3\3\3\3\3\3\4\3\4\5\4\u0306\n\4\3\4\5\4\u0309\n\4\7\4")
        buf.write("\u030b\n\4\f\4\16\4\u030e\13\4\3\4\3\4\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0322")
        buf.write("\n\5\3\6\3\6\3\7\3\7\3\b\3\b\3\b\5\b\u032b\n\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\7\b\u0333\n\b\f\b\16\b\u0336\13\b\3\b")
        buf.write("\3\b\5\b\u033a\n\b\3\b\3\b\3\b\3\b\3\b\7\b\u0341\n\b\f")
        buf.write("\b\16\b\u0344\13\b\3\b\3\b\5\b\u0348\n\b\3\b\7\b\u034b")
        buf.write("\n\b\f\b\16\b\u034e\13\b\3\b\3\b\5\b\u0352\n\b\3\b\3\b")
        buf.write("\3\b\5\b\u0357\n\b\3\b\5\b\u035a\n\b\3\t\3\t\5\t\u035e")
        buf.write("\n\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\7\n\u036a")
        buf.write("\n\n\f\n\16\n\u036d\13\n\3\n\3\n\5\n\u0371\n\n\3\n\5\n")
        buf.write("\u0374\n\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\7\13\u037f\n\13\f\13\16\13\u0382\13\13\3\13\3\13\3\f")
        buf.write("\3\f\3\r\3\r\3\r\5\r\u038b\n\r\3\r\3\r\3\r\5\r\u0390\n")
        buf.write("\r\3\r\3\r\7\r\u0394\n\r\f\r\16\r\u0397\13\r\3\r\3\r\5")
        buf.write("\r\u039b\n\r\3\r\3\r\3\16\3\16\3\16\5\16\u03a2\n\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\7\16\u03a9\n\16\f\16\16\16\u03ac")
        buf.write("\13\16\3\16\3\16\3\16\3\16\5\16\u03b2\n\16\5\16\u03b4")
        buf.write("\n\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\5\17\u03c0\n\17\3\20\3\20\3\20\3\20\3\20\3\20\7\20\u03c8")
        buf.write("\n\20\f\20\16\20\u03cb\13\20\3\20\3\20\5\20\u03cf\n\20")
        buf.write("\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\7\21\u03d9\n")
        buf.write("\21\f\21\16\21\u03dc\13\21\3\21\3\21\5\21\u03e0\n\21\3")
        buf.write("\21\3\21\3\21\5\21\u03e5\n\21\3\21\3\21\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u03f2\n\22\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\7\23\u03fa\n\23\f\23\16\23\u03fd")
        buf.write("\13\23\3\23\3\23\5\23\u0401\n\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\7\23\u0408\n\23\f\23\16\23\u040b\13\23\3\23\5\23\u040e")
        buf.write("\n\23\3\23\3\23\5\23\u0412\n\23\3\23\7\23\u0415\n\23\f")
        buf.write("\23\16\23\u0418\13\23\3\23\3\23\5\23\u041c\n\23\3\23\3")
        buf.write("\23\3\23\5\23\u0421\n\23\3\23\3\23\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\7\24\u042b\n\24\f\24\16\24\u042e\13\24\3\24")
        buf.write("\3\24\5\24\u0432\n\24\3\24\3\24\5\24\u0436\n\24\3\24\7")
        buf.write("\24\u0439\n\24\f\24\16\24\u043c\13\24\3\24\3\24\3\24\5")
        buf.write("\24\u0441\n\24\3\24\3\24\3\25\3\25\3\25\5\25\u0448\n\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\7\25\u0450\n\25\f\25\16")
        buf.write("\25\u0453\13\25\3\25\3\25\5\25\u0457\n\25\3\25\5\25\u045a")
        buf.write("\n\25\3\25\3\25\5\25\u045e\n\25\3\25\7\25\u0461\n\25\f")
        buf.write("\25\16\25\u0464\13\25\3\25\3\25\3\25\5\25\u0469\n\25\3")
        buf.write("\25\3\25\3\26\3\26\3\26\5\26\u0470\n\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\5\26\u0477\n\26\3\26\5\26\u047a\n\26\3\26\5")
        buf.write("\26\u047d\n\26\3\26\5\26\u0480\n\26\3\26\3\26\3\26\3\27")
        buf.write("\3\27\3\27\3\27\7\27\u0489\n\27\f\27\16\27\u048c\13\27")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\5\31\u0497")
        buf.write("\n\31\3\31\3\31\5\31\u049b\n\31\3\31\5\31\u049e\n\31\3")
        buf.write("\32\3\32\3\32\3\32\3\33\3\33\3\33\5\33\u04a7\n\33\3\34")
        buf.write("\3\34\3\34\3\34\7\34\u04ad\n\34\f\34\16\34\u04b0\13\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\5\34\u04b7\n\34\3\34\5\34\u04ba")
        buf.write("\n\34\3\35\3\35\3\35\3\35\3\35\5\35\u04c1\n\35\3\36\3")
        buf.write("\36\5\36\u04c5\n\36\3\37\3\37\3\37\7\37\u04ca\n\37\f\37")
        buf.write("\16\37\u04cd\13\37\3\37\6\37\u04d0\n\37\r\37\16\37\u04d1")
        buf.write("\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(" \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(" \3 \3 \3 \3 \3 \5 \u04fb\n \3!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\5")
        buf.write("!\u0517\n!\3\"\3\"\3\"\7\"\u051c\n\"\f\"\16\"\u051f\13")
        buf.write("\"\3\"\3\"\5\"\u0523\n\"\3\"\3\"\3#\3#\3#\3#\3#\7#\u052c")
        buf.write("\n#\f#\16#\u052f\13#\5#\u0531\n#\3$\3$\3$\3$\3$\3%\3%")
        buf.write("\6%\u053a\n%\r%\16%\u053b\3&\3&\3&\3\'\3\'\3\'\5\'\u0544")
        buf.write("\n\'\3\'\3\'\3\'\5\'\u0549\n\'\3\'\3\'\3(\3(\3(\5(\u0550")
        buf.write("\n(\3(\5(\u0553\n(\3)\5)\u0556\n)\3)\3)\5)\u055a\n)\3")
        buf.write(")\5)\u055d\n)\3)\3)\3)\3)\7)\u0563\n)\f)\16)\u0566\13")
        buf.write(")\3)\3)\5)\u056a\n)\3)\7)\u056d\n)\f)\16)\u0570\13)\3")
        buf.write("*\3*\3*\3*\5*\u0576\n*\3+\3+\3+\3,\3,\3,\3,\3,\5,\u0580")
        buf.write("\n,\3-\3-\3-\3-\3-\3-\3-\3-\3.\3.\3.\3.\6.\u058e\n.\r")
        buf.write(".\16.\u058f\3.\3.\3/\3/\5/\u0596\n/\3\60\3\60\3\60\3\60")
        buf.write("\3\61\3\61\3\61\3\61\5\61\u05a0\n\61\3\62\3\62\3\62\3")
        buf.write("\62\3\62\3\62\7\62\u05a8\n\62\f\62\16\62\u05ab\13\62\3")
        buf.write("\62\3\62\3\62\3\62\5\62\u05b1\n\62\3\62\7\62\u05b4\n\62")
        buf.write("\f\62\16\62\u05b7\13\62\3\62\3\62\3\62\5\62\u05bc\n\62")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\7\63\u05c4\n\63\f\63\16")
        buf.write("\63\u05c7\13\63\3\63\3\63\5\63\u05cb\n\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\5\63\u05d2\n\63\3\63\7\63\u05d5\n\63\f\63")
        buf.write("\16\63\u05d8\13\63\3\63\3\63\3\63\5\63\u05dd\n\63\3\64")
        buf.write("\5\64\u05e0\n\64\3\64\5\64\u05e3\n\64\3\64\3\64\3\64\3")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\7\64")
        buf.write("\u05f2\n\64\f\64\16\64\u05f5\13\64\3\64\3\64\5\64\u05f9")
        buf.write("\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0602\n")
        buf.write("\64\3\64\7\64\u0605\n\64\f\64\16\64\u0608\13\64\3\64\3")
        buf.write("\64\3\64\5\64\u060d\n\64\3\65\3\65\3\66\3\66\3\67\5\67")
        buf.write("\u0614\n\67\3\67\3\67\38\38\38\58\u061b\n8\38\58\u061e")
        buf.write("\n8\39\39\39\39\3:\5:\u0625\n:\3:\6:\u0628\n:\r:\16:\u0629")
        buf.write("\3:\3:\5:\u062e\n:\3;\3;\3;\5;\u0633\n;\3<\3<\3<\5<\u0638")
        buf.write("\n<\3=\3=\3=\3=\3=\3=\7=\u0640\n=\f=\16=\u0643\13=\3=")
        buf.write("\3=\3=\5=\u0648\n=\3>\3>\3>\3>\3>\3>\7>\u0650\n>\f>\16")
        buf.write(">\u0653\13>\3>\3>\5>\u0657\n>\3>\3>\3>\3>\3>\5>\u065e")
        buf.write("\n>\3>\3>\3>\3>\5>\u0664\n>\3>\3>\5>\u0668\n>\3?\5?\u066b")
        buf.write("\n?\3?\5?\u066e\n?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3")
        buf.write("?\3?\7?\u067d\n?\f?\16?\u0680\13?\3?\3?\5?\u0684\n?\3")
        buf.write("?\3?\3?\3?\3?\3?\5?\u068c\n?\3@\3@\3@\3@\3A\3A\3A\3A\3")
        buf.write("A\3A\7A\u0698\nA\fA\16A\u069b\13A\3A\3A\3B\3B\5B\u06a1")
        buf.write("\nB\3C\3C\3C\3D\3D\3D\3D\3D\7D\u06ab\nD\fD\16D\u06ae\13")
        buf.write("D\3D\3D\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\5E\u06c2\nE\3F\3F\3F\3F\3G\3G\3G\3G\3G\3G\3G\3G\3G\3")
        buf.write("G\7G\u06d2\nG\fG\16G\u06d5\13G\3G\3G\3G\3H\3H\3H\3H\3")
        buf.write("H\3H\3H\3H\3H\3I\3I\3I\5I\u06e6\nI\3I\3I\3I\3I\3I\3I\3")
        buf.write("I\5I\u06ef\nI\3I\3I\3I\5I\u06f4\nI\3I\3I\3I\5I\u06f9\n")
        buf.write("I\3I\3I\3I\3I\5I\u06ff\nI\3I\3I\3I\3I\3I\5I\u0706\nI\3")
        buf.write("I\3I\3I\5I\u070b\nI\5I\u070d\nI\3J\3J\3J\3J\3J\3J\3J\3")
        buf.write("K\3K\3K\3K\3K\3L\3L\3L\3M\3M\3M\3M\3N\3N\3N\5N\u0725\n")
        buf.write("N\3O\3O\3O\3O\3P\3P\3P\5P\u072e\nP\3P\3P\3P\5P\u0733\n")
        buf.write("P\3P\3P\5P\u0737\nP\3P\5P\u073a\nP\3Q\3Q\3Q\3Q\3Q\3Q\7")
        buf.write("Q\u0742\nQ\fQ\16Q\u0745\13Q\3Q\3Q\3R\3R\3R\3R\3R\7R\u074e")
        buf.write("\nR\fR\16R\u0751\13R\3R\3R\3R\5R\u0756\nR\3R\3R\3S\3S")
        buf.write("\7S\u075c\nS\fS\16S\u075f\13S\3S\5S\u0762\nS\3S\5S\u0765")
        buf.write("\nS\3T\3T\3T\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\5U\u0774\n")
        buf.write("U\3V\3V\5V\u0778\nV\3V\3V\3V\5V\u077d\nV\3V\5V\u0780\n")
        buf.write("V\3V\3V\3V\5V\u0785\nV\3W\3W\3W\3W\3W\3W\3W\3W\3W\5W\u0790")
        buf.write("\nW\3W\3W\5W\u0794\nW\3W\3W\3X\3X\3X\3X\3X\3X\7X\u079e")
        buf.write("\nX\fX\16X\u07a1\13X\3X\3X\5X\u07a5\nX\3X\3X\5X\u07a9")
        buf.write("\nX\3X\3X\5X\u07ad\nX\3X\3X\3Y\3Y\5Y\u07b3\nY\3Y\5Y\u07b6")
        buf.write("\nY\3Y\5Y\u07b9\nY\3Z\3Z\3Z\3Z\3[\3[\3[\3[\3[\3[\3[\3")
        buf.write("[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\5[\u07d4\n[\3")
        buf.write("[\3[\6[\u07d8\n[\r[\16[\u07d9\3[\3[\5[\u07de\n[\3[\3[")
        buf.write("\3\\\3\\\3\\\3\\\3\\\7\\\u07e7\n\\\f\\\16\\\u07ea\13\\")
        buf.write("\3\\\3\\\3]\3]\5]\u07f0\n]\3]\3]\5]\u07f4\n]\3]\5]\u07f7")
        buf.write("\n]\3^\3^\3^\3^\5^\u07fd\n^\3_\3_\3_\3_\3_\3_\3_\5_\u0806")
        buf.write("\n_\3_\3_\3`\3`\3`\3`\5`\u080e\n`\3`\3`\5`\u0812\n`\3")
        buf.write("a\3a\5a\u0816\na\3a\3a\3a\3b\3b\3b\5b\u081e\nb\3b\3b\3")
        buf.write("b\3b\3b\3b\3b\5b\u0827\nb\3c\3c\3c\3c\6c\u082d\nc\rc\16")
        buf.write("c\u082e\3d\3d\3d\3d\3d\3d\3e\3e\3e\3e\3e\3e\5e\u083d\n")
        buf.write("e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3e\3")
        buf.write("e\5e\u0851\ne\3f\3f\5f\u0855\nf\3f\3f\3f\3g\3g\5g\u085c")
        buf.write("\ng\3g\3g\5g\u0860\ng\3h\3h\5h\u0864\nh\3h\3h\5h\u0868")
        buf.write("\nh\3i\3i\3i\3j\3j\3j\3j\3j\7j\u0872\nj\fj\16j\u0875\13")
        buf.write("j\3j\5j\u0878\nj\3j\3j\3j\3k\3k\3k\3k\3k\3l\3l\3l\3m\5")
        buf.write("m\u0886\nm\3m\3m\3m\3m\5m\u088c\nm\3m\3m\3m\3m\3m\5m\u0893")
        buf.write("\nm\3n\3n\3n\3n\5n\u0899\nn\3n\3n\3n\3n\3n\3n\3n\3n\3")
        buf.write("n\3n\3n\3n\3n\3n\3n\3n\5n\u08ab\nn\3n\3n\3n\3n\5n\u08b1")
        buf.write("\nn\5n\u08b3\nn\3o\3o\3o\3o\3o\3o\3o\5o\u08bc\no\3p\3")
        buf.write("p\3p\3p\3p\3p\3p\3p\5p\u08c6\np\3p\3p\3p\5p\u08cb\np\3")
        buf.write("q\3q\3q\3q\3q\3r\3r\3s\3s\3t\3t\3u\3u\5u\u08da\nu\3v\3")
        buf.write("v\5v\u08de\nv\3w\5w\u08e1\nw\3w\3w\5w\u08e5\nw\3x\3x\3")
        buf.write("x\3x\6x\u08eb\nx\rx\16x\u08ec\5x\u08ef\nx\3x\3x\5x\u08f3")
        buf.write("\nx\3y\3y\3y\3y\7y\u08f9\ny\fy\16y\u08fc\13y\3y\3y\3y")
        buf.write("\3z\5z\u0902\nz\3z\6z\u0905\nz\rz\16z\u0906\5z\u0909\n")
        buf.write("z\3z\3z\3{\5{\u090e\n{\3{\6{\u0911\n{\r{\16{\u0912\3{")
        buf.write("\3{\3|\3|\3|\3|\5|\u091b\n|\3}\3}\3}\3}\3}\5}\u0922\n")
        buf.write("}\3}\3}\5}\u0926\n}\3}\5}\u0929\n}\3~\3~\3~\3\177\3\177")
        buf.write("\3\177\3\177\5\177\u0932\n\177\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\5\u0080\u0938\n\u0080\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0082\3\u0082\3\u0082\5\u0082\u0940\n\u0082\3\u0083")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\7\u0083\u0948")
        buf.write("\n\u0083\f\u0083\16\u0083\u094b\13\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0083\7\u0083\u0953\n\u0083")
        buf.write("\f\u0083\16\u0083\u0956\13\u0083\5\u0083\u0958\n\u0083")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u095f")
        buf.write("\n\u0084\3\u0084\5\u0084\u0962\n\u0084\3\u0085\3\u0085")
        buf.write("\3\u0085\3\u0085\3\u0085\5\u0085\u0969\n\u0085\3\u0086")
        buf.write("\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086")
        buf.write("\3\u0086\5\u0086\u0974\n\u0086\3\u0086\3\u0086\3\u0086")
        buf.write("\3\u0086\5\u0086\u097a\n\u0086\3\u0086\3\u0086\5\u0086")
        buf.write("\u097e\n\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\7\u0087\u0986\n\u0087\f\u0087\16\u0087\u0989")
        buf.write("\13\u0087\5\u0087\u098b\n\u0087\3\u0087\3\u0087\3\u0088")
        buf.write("\3\u0088\5\u0088\u0991\n\u0088\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088")
        buf.write("\u099c\n\u0088\5\u0088\u099e\n\u0088\5\u0088\u09a0\n\u0088")
        buf.write("\3\u0088\5\u0088\u09a3\n\u0088\3\u0089\3\u0089\5\u0089")
        buf.write("\u09a7\n\u0089\3\u0089\5\u0089\u09aa\n\u0089\3\u008a\3")
        buf.write("\u008a\5\u008a\u09ae\n\u008a\3\u008a\3\u008a\5\u008a\u09b2")
        buf.write("\n\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u09b7\n\u008a")
        buf.write("\3\u008b\3\u008b\3\u008b\3\u008c\3\u008c\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008c\5\u008c\u09c2\n\u008c\3\u008c\3\u008c")
        buf.write("\5\u008c\u09c6\n\u008c\3\u008c\3\u008c\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008c\5\u008c\u09ce\n\u008c\3\u008d\5\u008d")
        buf.write("\u09d1\n\u008d\3\u008d\3\u008d\3\u008d\7\u008d\u09d6\n")
        buf.write("\u008d\f\u008d\16\u008d\u09d9\13\u008d\3\u008e\3\u008e")
        buf.write("\3\u008e\3\u008e\7\u008e\u09df\n\u008e\f\u008e\16\u008e")
        buf.write("\u09e2\13\u008e\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\7\u008f\u09e9\n\u008f\f\u008f\16\u008f\u09ec\13\u008f")
        buf.write("\3\u008f\3\u008f\5\u008f\u09f0\n\u008f\3\u008f\3\u008f")
        buf.write("\3\u008f\3\u008f\5\u008f\u09f6\n\u008f\3\u008f\3\u008f")
        buf.write("\5\u008f\u09fa\n\u008f\3\u008f\5\u008f\u09fd\n\u008f\3")
        buf.write("\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090")
        buf.write("\u0a05\n\u0090\3\u0090\5\u0090\u0a08\n\u0090\3\u0090\3")
        buf.write("\u0090\5\u0090\u0a0c\n\u0090\3\u0090\3\u0090\5\u0090\u0a10")
        buf.write("\n\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0a15\n\u0090")
        buf.write("\3\u0090\5\u0090\u0a18\n\u0090\3\u0090\3\u0090\5\u0090")
        buf.write("\u0a1c\n\u0090\3\u0090\3\u0090\5\u0090\u0a20\n\u0090\7")
        buf.write("\u0090\u0a22\n\u0090\f\u0090\16\u0090\u0a25\13\u0090\3")
        buf.write("\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\7\u0091\u0a2e\n\u0091\f\u0091\16\u0091\u0a31\13\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0092\3\u0092\7\u0092\u0a3c\n\u0092\f\u0092\16\u0092")
        buf.write("\u0a3f\13\u0092\3\u0093\3\u0093\5\u0093\u0a43\n\u0093")
        buf.write("\3\u0093\3\u0093\5\u0093\u0a47\n\u0093\3\u0093\3\u0093")
        buf.write("\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0a50")
        buf.write("\n\u0094\3\u0095\3\u0095\5\u0095\u0a54\n\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\7\u0095\u0a5a\n\u0095\f\u0095")
        buf.write("\16\u0095\u0a5d\13\u0095\5\u0095\u0a5f\n\u0095\3\u0095")
        buf.write("\5\u0095\u0a62\n\u0095\3\u0095\3\u0095\5\u0095\u0a66\n")
        buf.write("\u0095\3\u0095\5\u0095\u0a69\n\u0095\3\u0095\5\u0095\u0a6c")
        buf.write("\n\u0095\3\u0095\5\u0095\u0a6f\n\u0095\3\u0096\3\u0096")
        buf.write("\5\u0096\u0a73\n\u0096\3\u0097\3\u0097\3\u0097\3\u0098")
        buf.write("\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0a7d\n\u0098")
        buf.write("\3\u0099\3\u0099\3\u0099\7\u0099\u0a82\n\u0099\f\u0099")
        buf.write("\16\u0099\u0a85\13\u0099\3\u009a\3\u009a\7\u009a\u0a89")
        buf.write("\n\u009a\f\u009a\16\u009a\u0a8c\13\u009a\3\u009a\3\u009a")
        buf.write("\5\u009a\u0a90\n\u009a\3\u009b\3\u009b\7\u009b\u0a94\n")
        buf.write("\u009b\f\u009b\16\u009b\u0a97\13\u009b\3\u009b\5\u009b")
        buf.write("\u0a9a\n\u009b\3\u009c\3\u009c\3\u009c\5\u009c\u0a9f\n")
        buf.write("\u009c\3\u009c\3\u009c\3\u009c\7\u009c\u0aa4\n\u009c\f")
        buf.write("\u009c\16\u009c\u0aa7\13\u009c\3\u009c\3\u009c\3\u009c")
        buf.write("\5\u009c\u0aac\n\u009c\3\u009c\3\u009c\3\u009c\3\u009c")
        buf.write("\3\u009c\5\u009c\u0ab3\n\u009c\3\u009d\5\u009d\u0ab6\n")
        buf.write("\u009d\3\u009d\5\u009d\u0ab9\n\u009d\3\u009d\3\u009d\5")
        buf.write("\u009d\u0abd\n\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0ac2")
        buf.write("\n\u009d\3\u009d\3\u009d\7\u009d\u0ac6\n\u009d\f\u009d")
        buf.write("\16\u009d\u0ac9\13\u009d\3\u009e\3\u009e\3\u009e\3\u009f")
        buf.write("\3\u009f\3\u009f\3\u009f\3\u009f\7\u009f\u0ad3\n\u009f")
        buf.write("\f\u009f\16\u009f\u0ad6\13\u009f\3\u009f\3\u009f\3\u00a0")
        buf.write("\3\u00a0\5\u00a0\u0adc\n\u00a0\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\7\u00a1\u0ae8\n\u00a1\f\u00a1\16\u00a1\u0aeb\13\u00a1")
        buf.write("\5\u00a1\u0aed\n\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0af7\n\u00a2")
        buf.write("\3\u00a3\3\u00a3\5\u00a3\u0afb\n\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\7\u00a3\u0b01\n\u00a3\f\u00a3\16\u00a3")
        buf.write("\u0b04\13\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0b0f\n\u00a4")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\7\u00a5")
        buf.write("\u0b17\n\u00a5\f\u00a5\16\u00a5\u0b1a\13\u00a5\3\u00a5")
        buf.write("\3\u00a5\5\u00a5\u0b1e\n\u00a5\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\7\u00a6\u0b26\n\u00a6\f\u00a6")
        buf.write("\16\u00a6\u0b29\13\u00a6\3\u00a6\3\u00a6\3\u00a6\7\u00a6")
        buf.write("\u0b2e\n\u00a6\f\u00a6\16\u00a6\u0b31\13\u00a6\5\u00a6")
        buf.write("\u0b33\n\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7\5\u00a7")
        buf.write("\u0b39\n\u00a7\3\u00a8\3\u00a8\5\u00a8\u0b3d\n\u00a8\3")
        buf.write("\u00a9\3\u00a9\3\u00a9\5\u00a9\u0b42\n\u00a9\3\u00a9\3")
        buf.write("\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\7\u00a9\u0b4a\n")
        buf.write("\u00a9\f\u00a9\16\u00a9\u0b4d\13\u00a9\3\u00a9\3\u00a9")
        buf.write("\5\u00a9\u0b51\n\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9")
        buf.write("\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\7\u00aa\u0b5c")
        buf.write("\n\u00aa\f\u00aa\16\u00aa\u0b5f\13\u00aa\3\u00aa\3\u00aa")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\7\u00ab\u0b68")
        buf.write("\n\u00ab\f\u00ab\16\u00ab\u0b6b\13\u00ab\3\u00ab\3\u00ab")
        buf.write("\5\u00ab\u0b6f\n\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\7\u00ab\u0b77\n\u00ab\f\u00ab\16\u00ab")
        buf.write("\u0b7a\13\u00ab\3\u00ab\3\u00ab\5\u00ab\u0b7e\n\u00ab")
        buf.write("\5\u00ab\u0b80\n\u00ab\3\u00ac\3\u00ac\3\u00ac\5\u00ac")
        buf.write("\u0b85\n\u00ac\3\u00ac\3\u00ac\5\u00ac\u0b89\n\u00ac\3")
        buf.write("\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0b8f\n\u00ac\3")
        buf.write("\u00ac\3\u00ac\5\u00ac\u0b93\n\u00ac\3\u00ad\3\u00ad\3")
        buf.write("\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\7\u00ae\u0b9e\n\u00ae\f\u00ae\16\u00ae\u0ba1\13\u00ae")
        buf.write("\3\u00ae\5\u00ae\u0ba4\n\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\7\u00ae\u0bac\n\u00ae\f\u00ae")
        buf.write("\16\u00ae\u0baf\13\u00ae\5\u00ae\u0bb1\n\u00ae\5\u00ae")
        buf.write("\u0bb3\n\u00ae\3\u00af\3\u00af\3\u00af\5\u00af\u0bb8\n")
        buf.write("\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0")
        buf.write("\u0bbf\n\u00b0\f\u00b0\16\u00b0\u0bc2\13\u00b0\3\u00b0")
        buf.write("\3\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1")
        buf.write("\7\u00b1\u0bcc\n\u00b1\f\u00b1\16\u00b1\u0bcf\13\u00b1")
        buf.write("\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0bd6")
        buf.write("\n\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4\7\u00b4")
        buf.write("\u0bdd\n\u00b4\f\u00b4\16\u00b4\u0be0\13\u00b4\3\u00b4")
        buf.write("\5\u00b4\u0be3\n\u00b4\3\u00b4\7\u00b4\u0be6\n\u00b4\f")
        buf.write("\u00b4\16\u00b4\u0be9\13\u00b4\3\u00b4\3\u00b4\3\u00b5")
        buf.write("\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0bf3")
        buf.write("\n\u00b5\5\u00b5\u0bf5\n\u00b5\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\3\u00b7\3\u00b7\7\u00b7\u0c03\n\u00b7\f\u00b7\16\u00b7")
        buf.write("\u0c06\13\u00b7\3\u00b8\3\u00b8\5\u00b8\u0c0a\n\u00b8")
        buf.write("\3\u00b8\3\u00b8\7\u00b8\u0c0e\n\u00b8\f\u00b8\16\u00b8")
        buf.write("\u0c11\13\u00b8\3\u00b8\3\u00b8\3\u00b9\5\u00b9\u0c16")
        buf.write("\n\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9")
        buf.write("\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00bb\3\u00bb\3\u00bb")
        buf.write("\3\u00bb\7\u00bb\u0c26\n\u00bb\f\u00bb\16\u00bb\u0c29")
        buf.write("\13\u00bb\3\u00bb\3\u00bb\3\u00bc\3\u00bc\5\u00bc\u0c2f")
        buf.write("\n\u00bc\3\u00bc\5\u00bc\u0c32\n\u00bc\3\u00bd\5\u00bd")
        buf.write("\u0c35\n\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\7\u00bd")
        buf.write("\u0c3b\n\u00bd\f\u00bd\16\u00bd\u0c3e\13\u00bd\5\u00bd")
        buf.write("\u0c40\n\u00bd\3\u00bd\3\u00bd\3\u00be\3\u00be\3\u00be")
        buf.write("\3\u00be\5\u00be\u0c48\n\u00be\5\u00be\u0c4a\n\u00be\3")
        buf.write("\u00be\3\u00be\5\u00be\u0c4e\n\u00be\3\u00be\5\u00be\u0c51")
        buf.write("\n\u00be\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0c56\n\u00bf")
        buf.write("\5\u00bf\u0c58\n\u00bf\3\u00bf\3\u00bf\5\u00bf\u0c5c\n")
        buf.write("\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00c0\3\u00c0\3\u00c1")
        buf.write("\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u0c68\n\u00c1")
        buf.write("\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3")
        buf.write("\5\u00c3\u0c71\n\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3")
        buf.write("\7\u00c3\u0c77\n\u00c3\f\u00c3\16\u00c3\u0c7a\13\u00c3")
        buf.write("\3\u00c4\3\u00c4\5\u00c4\u0c7e\n\u00c4\3\u00c4\3\u00c4")
        buf.write("\5\u00c4\u0c82\n\u00c4\3\u00c5\3\u00c5\3\u00c5\5\u00c5")
        buf.write("\u0c87\n\u00c5\3\u00c5\5\u00c5\u0c8a\n\u00c5\3\u00c6\3")
        buf.write("\u00c6\3\u00c6\3\u00c6\7\u00c6\u0c90\n\u00c6\f\u00c6\16")
        buf.write("\u00c6\u0c93\13\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\5\u00c7\u0c9a\n\u00c7\3\u00c8\3\u00c8\3\u00c8")
        buf.write("\3\u00c8\5\u00c8\u0ca0\n\u00c8\3\u00c8\5\u00c8\u0ca3\n")
        buf.write("\u00c8\3\u00c8\5\u00c8\u0ca6\n\u00c8\3\u00c9\3\u00c9\3")
        buf.write("\u00c9\3\u00c9\7\u00c9\u0cac\n\u00c9\f\u00c9\16\u00c9")
        buf.write("\u0caf\13\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9")
        buf.write("\3\u00c9\3\u00c9\5\u00c9\u0cb8\n\u00c9\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\7\u00ca")
        buf.write("\u0cc2\n\u00ca\f\u00ca\16\u00ca\u0cc5\13\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u0ccb\n\u00ca\3\u00cb")
        buf.write("\3\u00cb\5\u00cb\u0ccf\n\u00cb\3\u00cb\3\u00cb\5\u00cb")
        buf.write("\u0cd3\n\u00cb\3\u00cb\5\u00cb\u0cd6\n\u00cb\3\u00cb\5")
        buf.write("\u00cb\u0cd9\n\u00cb\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u0cde")
        buf.write("\n\u00cc\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u0ce3\n\u00cd")
        buf.write("\3\u00cd\5\u00cd\u0ce6\n\u00cd\3\u00cd\5\u00cd\u0ce9\n")
        buf.write("\u00cd\3\u00ce\3\u00ce\6\u00ce\u0ced\n\u00ce\r\u00ce\16")
        buf.write("\u00ce\u0cee\3\u00ce\5\u00ce\u0cf2\n\u00ce\3\u00ce\3\u00ce")
        buf.write("\3\u00cf\3\u00cf\5\u00cf\u0cf8\n\u00cf\3\u00cf\5\u00cf")
        buf.write("\u0cfb\n\u00cf\3\u00d0\5\u00d0\u0cfe\n\u00d0\3\u00d0\6")
        buf.write("\u00d0\u0d01\n\u00d0\r\u00d0\16\u00d0\u0d02\3\u00d0\5")
        buf.write("\u00d0\u0d06\n\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\6")
        buf.write("\u00d1\u0d0c\n\u00d1\r\u00d1\16\u00d1\u0d0d\3\u00d2\3")
        buf.write("\u00d2\6\u00d2\u0d12\n\u00d2\r\u00d2\16\u00d2\u0d13\3")
        buf.write("\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\7\u00d3")
        buf.write("\u0d1c\n\u00d3\f\u00d3\16\u00d3\u0d1f\13\u00d3\3\u00d3")
        buf.write("\3\u00d3\5\u00d3\u0d23\n\u00d3\3\u00d4\3\u00d4\3\u00d4")
        buf.write("\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u0d2c\n\u00d5")
        buf.write("\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5")
        buf.write("\3\u00d5\5\u00d5\u0d36\n\u00d5\3\u00d5\3\u00d5\5\u00d5")
        buf.write("\u0d3a\n\u00d5\5\u00d5\u0d3c\n\u00d5\3\u00d5\5\u00d5\u0d3f")
        buf.write("\n\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\3\u00d6\7\u00d6\u0d49\n\u00d6\f\u00d6\16\u00d6")
        buf.write("\u0d4c\13\u00d6\3\u00d6\5\u00d6\u0d4f\n\u00d6\3\u00d6")
        buf.write("\5\u00d6\u0d52\n\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7")
        buf.write("\3\u00d8\3\u00d8\3\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9")
        buf.write("\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\7\u00d9\u0d64")
        buf.write("\n\u00d9\f\u00d9\16\u00d9\u0d67\13\u00d9\3\u00d9\3\u00d9")
        buf.write("\5\u00d9\u0d6b\n\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9")
        buf.write("\u0d70\n\u00d9\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da")
        buf.write("\5\u00da\u0d77\n\u00da\3\u00da\5\u00da\u0d7a\n\u00da\3")
        buf.write("\u00db\3\u00db\3\u00db\3\u00db\3\u00db\7\u00db\u0d81\n")
        buf.write("\u00db\f\u00db\16\u00db\u0d84\13\u00db\3\u00db\3\u00db")
        buf.write("\3\u00db\3\u00db\5\u00db\u0d8a\n\u00db\3\u00dc\3\u00dc")
        buf.write("\3\u00dc\5\u00dc\u0d8f\n\u00dc\3\u00dd\3\u00dd\5\u00dd")
        buf.write("\u0d93\n\u00dd\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\5\u00de\u0d9b\n\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\5\u00de\u0da1\n\u00de\3\u00df\3\u00df\3\u00df")
        buf.write("\3\u00df\3\u00df\3\u00df\5\u00df\u0da9\n\u00df\3\u00df")
        buf.write("\5\u00df\u0dac\n\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0")
        buf.write("\7\u00e0\u0db2\n\u00e0\f\u00e0\16\u00e0\u0db5\13\u00e0")
        buf.write("\3\u00e0\3\u00e0\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u0dbc")
        buf.write("\n\u00e1\3\u00e1\5\u00e1\u0dbf\n\u00e1\3\u00e1\5\u00e1")
        buf.write("\u0dc2\n\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e3\3\u00e3")
        buf.write("\3\u00e3\3\u00e3\5\u00e3\u0dcb\n\u00e3\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\3\u00e4\5\u00e4\u0dd1\n\u00e4\3\u00e4\3\u00e4")
        buf.write("\3\u00e4\3\u00e4\5\u00e4\u0dd7\n\u00e4\5\u00e4\u0dd9\n")
        buf.write("\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u0de6")
        buf.write("\n\u00e5\5\u00e5\u0de8\n\u00e5\3\u00e6\3\u00e6\3\u00e6")
        buf.write("\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u0df1\n\u00e6")
        buf.write("\5\u00e6\u0df3\n\u00e6\3\u00e7\3\u00e7\5\u00e7\u0df7\n")
        buf.write("\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u0dfd\n")
        buf.write("\u00e7\3\u00e7\3\u00e7\5\u00e7\u0e01\n\u00e7\3\u00e8\3")
        buf.write("\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e9\3\u00e9\3\u00e9")
        buf.write("\3\u00e9\3\u00e9\3\u00ea\3\u00ea\5\u00ea\u0e0f\n\u00ea")
        buf.write("\3\u00ea\3\u00ea\7\u00ea\u0e13\n\u00ea\f\u00ea\16\u00ea")
        buf.write("\u0e16\13\u00ea\3\u00ea\3\u00ea\3\u00eb\3\u00eb\3\u00ec")
        buf.write("\3\u00ec\5\u00ec\u0e1e\n\u00ec\3\u00ed\3\u00ed\3\u00ed")
        buf.write("\3\u00ed\3\u00ed\3\u00ed\7\u00ed\u0e26\n\u00ed\f\u00ed")
        buf.write("\16\u00ed\u0e29\13\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ee")
        buf.write("\3\u00ee\3\u00ee\7\u00ee\u0e31\n\u00ee\f\u00ee\16\u00ee")
        buf.write("\u0e34\13\u00ee\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u0e39")
        buf.write("\n\u00ef\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u0e3e\n\u00f0")
        buf.write("\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0")
        buf.write("\3\u00f0\3\u00f0\5\u00f0\u0e49\n\u00f0\3\u00f0\3\u00f0")
        buf.write("\5\u00f0\u0e4d\n\u00f0\3\u00f0\3\u00f0\3\u00f0\7\u00f0")
        buf.write("\u0e52\n\u00f0\f\u00f0\16\u00f0\u0e55\13\u00f0\3\u00f0")
        buf.write("\3\u00f0\5\u00f0\u0e59\n\u00f0\7\u00f0\u0e5b\n\u00f0\f")
        buf.write("\u00f0\16\u00f0\u0e5e\13\u00f0\3\u00f1\3\u00f1\3\u00f1")
        buf.write("\5\u00f1\u0e63\n\u00f1\3\u00f1\3\u00f1\5\u00f1\u0e67\n")
        buf.write("\u00f1\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3")
        buf.write("\3\u00f3\3\u00f3\3\u00f3\7\u00f3\u0e72\n\u00f3\f\u00f3")
        buf.write("\16\u00f3\u0e75\13\u00f3\3\u00f4\3\u00f4\5\u00f4\u0e79")
        buf.write("\n\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4")
        buf.write("\3\u00f4\5\u00f4\u0e82\n\u00f4\5\u00f4\u0e84\n\u00f4\5")
        buf.write("\u00f4\u0e86\n\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3")
        buf.write("\u00f5\3\u00f5\5\u00f5\u0e8e\n\u00f5\3\u00f6\3\u00f6\3")
        buf.write("\u00f7\3\u00f7\3\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8")
        buf.write("\3\u00f8\3\u00f8\3\u00f8\3\u00f8\7\u00f8\u0e9d\n\u00f8")
        buf.write("\f\u00f8\16\u00f8\u0ea0\13\u00f8\3\u00f8\3\u00f8\3\u00f8")
        buf.write("\3\u00f8\3\u00f8\5\u00f8\u0ea7\n\u00f8\3\u00f9\3\u00f9")
        buf.write("\3\u00f9\3\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\7\u00fa")
        buf.write("\u0eb1\n\u00fa\f\u00fa\16\u00fa\u0eb4\13\u00fa\3\u00fb")
        buf.write("\3\u00fb\3\u00fb\7\u00fb\u0eb9\n\u00fb\f\u00fb\16\u00fb")
        buf.write("\u0ebc\13\u00fb\3\u00fc\3\u00fc\3\u00fc\7\u00fc\u0ec1")
        buf.write("\n\u00fc\f\u00fc\16\u00fc\u0ec4\13\u00fc\3\u00fd\3\u00fd")
        buf.write("\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u0ecc\n\u00fd")
        buf.write("\3\u00fd\5\u00fd\u0ecf\n\u00fd\3\u00fe\3\u00fe\3\u00fe")
        buf.write("\3\u00fe\3\u00fe\5\u00fe\u0ed6\n\u00fe\3\u00fe\3\u00fe")
        buf.write("\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u0ede\n\u00fe")
        buf.write("\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u0ee5")
        buf.write("\n\u00fe\3\u00fe\3\u00fe\5\u00fe\u0ee9\n\u00fe\3\u00ff")
        buf.write("\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u0ef0\n\u00ff")
        buf.write("\3\u0100\3\u0100\5\u0100\u0ef4\n\u0100\3\u0100\3\u0100")
        buf.write("\3\u0100\5\u0100\u0ef9\n\u0100\7\u0100\u0efb\n\u0100\f")
        buf.write("\u0100\16\u0100\u0efe\13\u0100\3\u0100\3\u0100\3\u0100")
        buf.write("\7\u0100\u0f03\n\u0100\f\u0100\16\u0100\u0f06\13\u0100")
        buf.write("\3\u0100\5\u0100\u0f09\n\u0100\3\u0101\3\u0101\3\u0101")
        buf.write("\3\u0101\3\u0101\5\u0101\u0f10\n\u0101\3\u0101\3\u0101")
        buf.write("\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u0f19")
        buf.write("\n\u0101\3\u0102\3\u0102\3\u0102\3\u0103\3\u0103\3\u0104")
        buf.write("\3\u0104\3\u0104\3\u0104\3\u0104\7\u0104\u0f25\n\u0104")
        buf.write("\f\u0104\16\u0104\u0f28\13\u0104\3\u0104\3\u0104\3\u0104")
        buf.write("\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\7\u0104\u0f32")
        buf.write("\n\u0104\f\u0104\16\u0104\u0f35\13\u0104\3\u0104\3\u0104")
        buf.write("\5\u0104\u0f39\n\u0104\3\u0104\3\u0104\3\u0105\3\u0105")
        buf.write("\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105")
        buf.write("\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105")
        buf.write("\5\u0105\u0f4d\n\u0105\3\u0106\3\u0106\5\u0106\u0f51\n")
        buf.write("\u0106\3\u0107\5\u0107\u0f54\n\u0107\3\u0107\3\u0107\3")
        buf.write("\u0107\6\u0107\u0f59\n\u0107\r\u0107\16\u0107\u0f5a\3")
        buf.write("\u0107\5\u0107\u0f5e\n\u0107\3\u0107\3\u0107\5\u0107\u0f62")
        buf.write("\n\u0107\3\u0107\5\u0107\u0f65\n\u0107\3\u0108\3\u0108")
        buf.write("\3\u0108\3\u0108\3\u0108\5\u0108\u0f6c\n\u0108\3\u0109")
        buf.write("\5\u0109\u0f6f\n\u0109\3\u0109\3\u0109\6\u0109\u0f73\n")
        buf.write("\u0109\r\u0109\16\u0109\u0f74\3\u0109\5\u0109\u0f78\n")
        buf.write("\u0109\3\u0109\3\u0109\5\u0109\u0f7c\n\u0109\3\u0109\5")
        buf.write("\u0109\u0f7f\n\u0109\3\u010a\3\u010a\3\u010a\3\u010a\3")
        buf.write("\u010a\5\u010a\u0f86\n\u010a\3\u010b\3\u010b\3\u010b\5")
        buf.write("\u010b\u0f8b\n\u010b\3\u010c\3\u010c\3\u010c\3\u010c\3")
        buf.write("\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\7\u010c")
        buf.write("\u0f97\n\u010c\f\u010c\16\u010c\u0f9a\13\u010c\3\u010c")
        buf.write("\3\u010c\3\u010c\5\u010c\u0f9f\n\u010c\5\u010c\u0fa1\n")
        buf.write("\u010c\3\u010d\3\u010d\5\u010d\u0fa5\n\u010d\3\u010e\3")
        buf.write("\u010e\3\u010e\3\u010e\7\u010e\u0fab\n\u010e\f\u010e\16")
        buf.write("\u010e\u0fae\13\u010e\3\u010f\3\u010f\3\u010f\3\u010f")
        buf.write("\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u0fb9")
        buf.write("\n\u010f\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110")
        buf.write("\3\u0110\5\u0110\u0fc2\n\u0110\3\u0110\3\u0110\3\u0110")
        buf.write("\3\u0110\3\u0110\3\u0110\5\u0110\u0fca\n\u0110\3\u0110")
        buf.write("\3\u0110\5\u0110\u0fce\n\u0110\3\u0110\3\u0110\3\u0110")
        buf.write("\3\u0110\3\u0110\3\u0110\3\u0110\7\u0110\u0fd7\n\u0110")
        buf.write("\f\u0110\16\u0110\u0fda\13\u0110\3\u0110\3\u0110\3\u0110")
        buf.write("\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110")
        buf.write("\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110")
        buf.write("\3\u0110\3\u0110\5\u0110\u0fef\n\u0110\3\u0110\5\u0110")
        buf.write("\u0ff2\n\u0110\3\u0110\5\u0110\u0ff5\n\u0110\3\u0110\3")
        buf.write("\u0110\3\u0110\5\u0110\u0ffa\n\u0110\3\u0111\3\u0111\3")
        buf.write("\u0111\5\u0111\u0fff\n\u0111\3\u0112\3\u0112\3\u0112\5")
        buf.write("\u0112\u1004\n\u0112\3\u0113\3\u0113\3\u0113\5\u0113\u1009")
        buf.write("\n\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113")
        buf.write("\3\u0113\5\u0113\u1012\n\u0113\3\u0113\5\u0113\u1015\n")
        buf.write("\u0113\5\u0113\u1017\n\u0113\3\u0113\3\u0113\5\u0113\u101b")
        buf.write("\n\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\5\u0113")
        buf.write("\u1022\n\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113")
        buf.write("\5\u0113\u1029\n\u0113\3\u0113\3\u0113\3\u0113\3\u0113")
        buf.write("\3\u0113\3\u0113\5\u0113\u1031\n\u0113\3\u0113\3\u0113")
        buf.write("\3\u0113\5\u0113\u1036\n\u0113\3\u0114\3\u0114\3\u0114")
        buf.write("\5\u0114\u103b\n\u0114\3\u0114\3\u0114\3\u0114\5\u0114")
        buf.write("\u1040\n\u0114\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114")
        buf.write("\u1046\n\u0114\3\u0114\5\u0114\u1049\n\u0114\3\u0114\3")
        buf.write("\u0114\5\u0114\u104d\n\u0114\3\u0114\3\u0114\3\u0114\3")
        buf.write("\u0114\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u1057\n")
        buf.write("\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u1063\n\u0114")
        buf.write("\5\u0114\u1065\n\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\5\u0114\u106c\n\u0114\3\u0114\3\u0114\5\u0114")
        buf.write("\u1070\n\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\6\u0114\u1077\n\u0114\r\u0114\16\u0114\u1078\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114")
        buf.write("\u1082\n\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\5\u0114\u1090\n\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\7\u0114\u1099\n\u0114\f\u0114")
        buf.write("\16\u0114\u109c\13\u0114\3\u0114\5\u0114\u109f\n\u0114")
        buf.write("\3\u0114\5\u0114\u10a2\n\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u10ab\n\u0114")
        buf.write("\3\u0114\3\u0114\7\u0114\u10af\n\u0114\f\u0114\16\u0114")
        buf.write("\u10b2\13\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\5\u0114\u10bb\n\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u10c3\n\u0114")
        buf.write("\3\u0114\5\u0114\u10c6\n\u0114\3\u0114\5\u0114\u10c9\n")
        buf.write("\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\5\u0114\u10d2\n\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\5\u0114\u10d7\n\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\7\u0114\u10de\n\u0114\f\u0114\16\u0114\u10e1")
        buf.write("\13\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u10e6\n\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\5\u0114\u10eb\n\u0114\3\u0114")
        buf.write("\5\u0114\u10ee\n\u0114\3\u0114\3\u0114\3\u0114\5\u0114")
        buf.write("\u10f3\n\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u10f8\n")
        buf.write("\u0114\7\u0114\u10fa\n\u0114\f\u0114\16\u0114\u10fd\13")
        buf.write("\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u1102\n\u0114\3")
        buf.write("\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u1108\n\u0114\3")
        buf.write("\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\5\u0114\u1111\n\u0114\3\u0114\3\u0114\3\u0114\5\u0114")
        buf.write("\u1116\n\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\5\u0114\u111e\n\u0114\3\u0114\3\u0114\5\u0114")
        buf.write("\u1122\n\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u1127\n")
        buf.write("\u0114\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u112d\n")
        buf.write("\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114")
        buf.write("\u1134\n\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u1139\n")
        buf.write("\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114")
        buf.write("\u1140\n\u0114\3\u0114\3\u0114\5\u0114\u1144\n\u0114\3")
        buf.write("\u0114\3\u0114\3\u0114\5\u0114\u1149\n\u0114\3\u0114\3")
        buf.write("\u0114\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u1151\n")
        buf.write("\u0114\3\u0114\5\u0114\u1154\n\u0114\3\u0114\5\u0114\u1157")
        buf.write("\n\u0114\3\u0114\5\u0114\u115a\n\u0114\3\u0114\3\u0114")
        buf.write("\5\u0114\u115e\n\u0114\3\u0114\3\u0114\3\u0114\5\u0114")
        buf.write("\u1163\n\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u1168\n")
        buf.write("\u0114\3\u0114\3\u0114\5\u0114\u116c\n\u0114\3\u0114\3")
        buf.write("\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u1173\n\u0114\3")
        buf.write("\u0114\3\u0114\3\u0114\5\u0114\u1178\n\u0114\5\u0114\u117a")
        buf.write("\n\u0114\3\u0115\3\u0115\3\u0116\3\u0116\3\u0117\3\u0117")
        buf.write("\3\u0118\3\u0118\3\u0118\5\u0118\u1185\n\u0118\3\u0118")
        buf.write("\3\u0118\5\u0118\u1189\n\u0118\5\u0118\u118b\n\u0118\3")
        buf.write("\u0118\3\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119")
        buf.write("\3\u0119\3\u0119\5\u0119\u1196\n\u0119\3\u011a\3\u011a")
        buf.write("\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b")
        buf.write("\5\u011b\u11a1\n\u011b\3\u011c\3\u011c\3\u011c\3\u011c")
        buf.write("\3\u011c\7\u011c\u11a8\n\u011c\f\u011c\16\u011c\u11ab")
        buf.write("\13\u011c\5\u011c\u11ad\n\u011c\3\u011d\3\u011d\5\u011d")
        buf.write("\u11b1\n\u011d\3\u011d\5\u011d\u11b4\n\u011d\3\u011d\3")
        buf.write("\u011d\5\u011d\u11b8\n\u011d\3\u011e\3\u011e\3\u011e\3")
        buf.write("\u011e\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f")
        buf.write("\3\u011f\5\u011f\u11c5\n\u011f\3\u0120\3\u0120\3\u0120")
        buf.write("\5\u0120\u11ca\n\u0120\3\u0120\3\u0120\3\u0120\3\u0120")
        buf.write("\7\u0120\u11d0\n\u0120\f\u0120\16\u0120\u11d3\13\u0120")
        buf.write("\3\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u11d9\n\u0120")
        buf.write("\3\u0121\3\u0121\3\u0121\5\u0121\u11de\n\u0121\3\u0121")
        buf.write("\3\u0121\5\u0121\u11e2\n\u0121\3\u0121\3\u0121\3\u0121")
        buf.write("\5\u0121\u11e7\n\u0121\3\u0122\3\u0122\3\u0122\5\u0122")
        buf.write("\u11ec\n\u0122\3\u0122\5\u0122\u11ef\n\u0122\3\u0122\3")
        buf.write("\u0122\3\u0122\7\u0122\u11f4\n\u0122\f\u0122\16\u0122")
        buf.write("\u11f7\13\u0122\3\u0122\3\u0122\3\u0123\3\u0123\3\u0123")
        buf.write("\3\u0123\3\u0123\5\u0123\u1200\n\u0123\3\u0123\3\u0123")
        buf.write("\3\u0123\3\u0123\7\u0123\u1206\n\u0123\f\u0123\16\u0123")
        buf.write("\u1209\13\u0123\3\u0123\5\u0123\u120c\n\u0123\3\u0123")
        buf.write("\3\u0123\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124")
        buf.write("\5\u0124\u1216\n\u0124\3\u0124\5\u0124\u1219\n\u0124\5")
        buf.write("\u0124\u121b\n\u0124\3\u0125\3\u0125\3\u0125\3\u0126\3")
        buf.write("\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u1225\n\u0126\5")
        buf.write("\u0126\u1227\n\u0126\3\u0127\3\u0127\3\u0127\3\u0127\5")
        buf.write("\u0127\u122d\n\u0127\3\u0128\3\u0128\3\u0128\3\u0128\5")
        buf.write("\u0128\u1233\n\u0128\5\u0128\u1235\n\u0128\3\u0129\3\u0129")
        buf.write("\3\u0129\3\u012a\3\u012a\3\u012a\3\u012b\3\u012b\3\u012b")
        buf.write("\3\u012b\3\u012b\3\u012b\5\u012b\u1243\n\u012b\5\u012b")
        buf.write("\u1245\n\u012b\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write("\3\u012c\3\u012c\5\u012c\u124e\n\u012c\3\u012c\5\u012c")
        buf.write("\u1251\n\u012c\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write("\3\u012d\3\u012d\5\u012d\u125a\n\u012d\3\u012e\3\u012e")
        buf.write("\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u1263")
        buf.write("\n\u012e\3\u012f\3\u012f\3\u0130\3\u0130\3\u0131\3\u0131")
        buf.write("\3\u0131\3\u0131\5\u0131\u126d\n\u0131\3\u0132\3\u0132")
        buf.write("\3\u0133\3\u0133\5\u0133\u1273\n\u0133\3\u0133\3\u0133")
        buf.write("\3\u0134\5\u0134\u1278\n\u0134\3\u0134\3\u0134\5\u0134")
        buf.write("\u127c\n\u0134\3\u0134\5\u0134\u127f\n\u0134\3\u0135\3")
        buf.write("\u0135\5\u0135\u1283\n\u0135\3\u0136\3\u0136\3\u0137\3")
        buf.write("\u0137\3\u0137\5\u0137\u128a\n\u0137\3\u0138\3\u0138\3")
        buf.write("\u0138\3\u0138\3\u0139\3\u0139\3\u0139\3\u0139\7\u0139")
        buf.write("\u1294\n\u0139\f\u0139\16\u0139\u1297\13\u0139\3\u0139")
        buf.write("\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\7\u0139\u129f")
        buf.write("\n\u0139\f\u0139\16\u0139\u12a2\13\u0139\5\u0139\u12a4")
        buf.write("\n\u0139\3\u013a\3\u013a\5\u013a\u12a8\n\u013a\3\u013b")
        buf.write("\3\u013b\3\u013c\3\u013c\3\u013d\3\u013d\3\u013e\3\u013e")
        buf.write("\3\u013f\3\u013f\3\u0140\3\u0140\3\u0141\3\u0141\3\u0141")
        buf.write("\7\u0141\u12b9\n\u0141\f\u0141\16\u0141\u12bc\13\u0141")
        buf.write("\3\u0141\3\u0141\5\u0141\u12c0\n\u0141\3\u0142\3\u0142")
        buf.write("\3\u0143\3\u0143\3\u0143\5\u0143\u12c7\n\u0143\3\u0144")
        buf.write("\3\u0144\3\u0145\3\u0145\3\u0146\3\u0146\3\u0147\3\u0147")
        buf.write("\3\u0147\7\u0147\u12d2\n\u0147\f\u0147\16\u0147\u12d5")
        buf.write("\13\u0147\3\u0148\3\u0148\3\u0149\3\u0149\3\u0149\7\u0149")
        buf.write("\u12dc\n\u0149\f\u0149\16\u0149\u12df\13\u0149\3\u0149")
        buf.write("\3\u0149\5\u0149\u12e3\n\u0149\3\u014a\3\u014a\3\u014b")
        buf.write("\3\u014b\3\u014b\7\u014b\u12ea\n\u014b\f\u014b\16\u014b")
        buf.write("\u12ed\13\u014b\3\u014c\3\u014c\3\u014c\7\u014c\u12f2")
        buf.write("\n\u014c\f\u014c\16\u014c\u12f5\13\u014c\3\u014d\3\u014d")
        buf.write("\3\u014d\7\u014d\u12fa\n\u014d\f\u014d\16\u014d\u12fd")
        buf.write("\13\u014d\3\u014e\3\u014e\3\u014e\5\u014e\u1302\n\u014e")
        buf.write("\3\u014f\3\u014f\3\u014f\5\u014f\u1307\n\u014f\3\u0150")
        buf.write("\3\u0150\3\u0150\5\u0150\u130c\n\u0150\3\u0151\3\u0151")
        buf.write("\3\u0151\5\u0151\u1311\n\u0151\3\u0152\3\u0152\3\u0152")
        buf.write("\5\u0152\u1316\n\u0152\3\u0153\3\u0153\3\u0153\5\u0153")
        buf.write("\u131b\n\u0153\3\u0154\3\u0154\5\u0154\u131f\n\u0154\3")
        buf.write("\u0154\3\u0154\3\u0154\5\u0154\u1324\n\u0154\3\u0154\5")
        buf.write("\u0154\u1327\n\u0154\3\u0155\3\u0155\3\u0156\3\u0156\5")
        buf.write("\u0156\u132d\n\u0156\3\u0157\3\u0157\5\u0157\u1331\n\u0157")
        buf.write("\3\u0158\3\u0158\3\u0158\5\u0158\u1336\n\u0158\3\u0159")
        buf.write("\3\u0159\3\u015a\3\u015a\3\u015a\7\u015a\u133d\n\u015a")
        buf.write("\f\u015a\16\u015a\u1340\13\u015a\3\u015b\3\u015b\3\u015b")
        buf.write("\5\u015b\u1345\n\u015b\3\u015b\3\u015b\3\u015b\5\u015b")
        buf.write("\u134a\n\u015b\3\u015c\3\u015c\3\u015c\7\u015c\u134f\n")
        buf.write("\u015c\f\u015c\16\u015c\u1352\13\u015c\3\u015d\3\u015d")
        buf.write("\3\u015e\3\u015e\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f")
        buf.write("\3\u015f\3\u015f\5\u015f\u135f\n\u015f\3\u0160\3\u0160")
        buf.write("\5\u0160\u1363\n\u0160\3\u0160\3\u0160\7\u0160\u1367\n")
        buf.write("\u0160\f\u0160\16\u0160\u136a\13\u0160\3\u0160\3\u0160")
        buf.write("\5\u0160\u136e\n\u0160\3\u0161\3\u0161\3\u0161\5\u0161")
        buf.write("\u1373\n\u0161\5\u0161\u1375\n\u0161\3\u0161\3\u0161\3")
        buf.write("\u0161\5\u0161\u137a\n\u0161\7\u0161\u137c\n\u0161\f\u0161")
        buf.write("\16\u0161\u137f\13\u0161\3\u0161\3\u0161\5\u0161\u1383")
        buf.write("\n\u0161\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\5\u0162")
        buf.write("\u138a\n\u0162\3\u0162\3\u0162\3\u0162\5\u0162\u138f\n")
        buf.write("\u0162\5\u0162\u1391\n\u0162\5\u0162\u1393\n\u0162\3\u0162")
        buf.write("\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162")
        buf.write("\5\u0162\u139d\n\u0162\3\u0162\3\u0162\3\u0162\5\u0162")
        buf.write("\u13a2\n\u0162\7\u0162\u13a4\n\u0162\f\u0162\16\u0162")
        buf.write("\u13a7\13\u0162\5\u0162\u13a9\n\u0162\3\u0162\3\u0162")
        buf.write("\5\u0162\u13ad\n\u0162\3\u0163\3\u0163\3\u0163\3\u0164")
        buf.write("\3\u0164\3\u0164\3\u0164\5\u0164\u13b6\n\u0164\3\u0164")
        buf.write("\3\u0164\3\u0165\3\u0165\5\u0165\u13bc\n\u0165\3\u0165")
        buf.write("\3\u0165\5\u0165\u13c0\n\u0165\5\u0165\u13c2\n\u0165\3")
        buf.write("\u0166\3\u0166\5\u0166\u13c6\n\u0166\3\u0166\3\u0166\5")
        buf.write("\u0166\u13ca\n\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3")
        buf.write("\u0166\3\u0166\3\u0166\5\u0166\u13d3\n\u0166\3\u0166\3")
        buf.write("\u0166\3\u0166\3\u0166\3\u0166\3\u0166\5\u0166\u13db\n")
        buf.write("\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166")
        buf.write("\5\u0166\u13e3\n\u0166\5\u0166\u13e5\n\u0166\3\u0167\3")
        buf.write("\u0167\3\u0167\3\u0167\5\u0167\u13eb\n\u0167\3\u0167\5")
        buf.write("\u0167\u13ee\n\u0167\3\u0167\3\u0167\3\u0168\3\u0168\3")
        buf.write("\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u1400")
        buf.write("\n\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168")
        buf.write("\u1407\n\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168")
        buf.write("\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u141a")
        buf.write("\n\u0168\3\u0169\3\u0169\3\u0169\5\u0169\u141f\n\u0169")
        buf.write("\3\u0169\5\u0169\u1422\n\u0169\3\u0169\3\u0169\3\u0169")
        buf.write("\5\u0169\u1427\n\u0169\5\u0169\u1429\n\u0169\3\u0169\3")
        buf.write("\u0169\7\u0169\u142d\n\u0169\f\u0169\16\u0169\u1430\13")
        buf.write("\u0169\3\u016a\3\u016a\3\u016a\7\u016a\u1435\n\u016a\f")
        buf.write("\u016a\16\u016a\u1438\13\u016a\3\u016b\3\u016b\5\u016b")
        buf.write("\u143c\n\u016b\3\u016b\3\u016b\3\u016b\7\u016b\u1441\n")
        buf.write("\u016b\f\u016b\16\u016b\u1444\13\u016b\3\u016b\5\u016b")
        buf.write("\u1447\n\u016b\3\u016c\3\u016c\5\u016c\u144b\n\u016c\3")
        buf.write("\u016c\3\u016c\3\u016c\7\u016c\u1450\n\u016c\f\u016c\16")
        buf.write("\u016c\u1453\13\u016c\3\u016d\3\u016d\3\u016d\5\u016d")
        buf.write("\u1458\n\u016d\3\u016d\3\u016d\3\u016d\3\u016d\5\u016d")
        buf.write("\u145e\n\u016d\3\u016d\3\u016d\3\u016d\3\u016d\5\u016d")
        buf.write("\u1464\n\u016d\3\u016d\3\u016d\3\u016d\3\u016d\5\u016d")
        buf.write("\u146a\n\u016d\3\u016d\3\u016d\3\u016d\5\u016d\u146f\n")
        buf.write("\u016d\5\u016d\u1471\n\u016d\3\u016d\5\u016d\u1474\n\u016d")
        buf.write("\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d")
        buf.write("\3\u016d\5\u016d\u147e\n\u016d\3\u016d\5\u016d\u1481\n")
        buf.write("\u016d\5\u016d\u1483\n\u016d\5\u016d\u1485\n\u016d\3\u016d")
        buf.write("\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d")
        buf.write("\3\u016d\3\u016d\3\u016d\3\u016d\5\u016d\u1493\n\u016d")
        buf.write("\3\u016e\3\u016e\3\u016f\3\u016f\3\u016f\3\u0170\3\u0170")
        buf.write("\3\u0171\3\u0171\5\u0171\u149e\n\u0171\3\u0171\3\u0171")
        buf.write("\3\u0172\3\u0172\5\u0172\u14a4\n\u0172\3\u0173\3\u0173")
        buf.write("\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\5\u0173\u14ad")
        buf.write("\n\u0173\3\u0174\3\u0174\3\u0174\5\u0174\u14b2\n\u0174")
        buf.write("\3\u0175\3\u0175\3\u0175\5\u0175\u14b7\n\u0175\3\u0176")
        buf.write("\3\u0176\3\u0176\5\u0176\u14bc\n\u0176\3\u0177\3\u0177")
        buf.write("\3\u0177\3\u0177\3\u0178\3\u0178\3\u0179\3\u0179\3\u017a")
        buf.write("\3\u017a\3\u017b\3\u017b\3\u017b\2\5\u01d8\u01da\u01e4")
        buf.write("\u017c\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,")
        buf.write(".\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080")
        buf.write("\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092")
        buf.write("\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4")
        buf.write("\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6")
        buf.write("\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8")
        buf.write("\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da")
        buf.write("\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec")
        buf.write("\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe")
        buf.write("\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110")
        buf.write("\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122")
        buf.write("\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134")
        buf.write("\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146")
        buf.write("\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158")
        buf.write("\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a")
        buf.write("\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c")
        buf.write("\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e")
        buf.write("\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0")
        buf.write("\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2")
        buf.write("\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4")
        buf.write("\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6")
        buf.write("\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8")
        buf.write("\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa")
        buf.write("\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c")
        buf.write("\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e")
        buf.write("\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230")
        buf.write("\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242")
        buf.write("\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254")
        buf.write("\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266")
        buf.write("\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278")
        buf.write("\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a")
        buf.write("\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c")
        buf.write("\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae")
        buf.write("\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0")
        buf.write("\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2")
        buf.write("\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4")
        buf.write("\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\2R\3")
        buf.write("\2\u021b\u021b\4\2\16\16\u00bd\u00bd\4\2\u00a0\u00a0\u0130")
        buf.write("\u0130\4\2\67\67\u010e\u010e\4\2\7\7\u0122\u0122\4\2n")
        buf.write("nzz\4\2\5\5\31\31\5\2ii\u00b4\u00b4\u0199\u0199\5\2\u00f0")
        buf.write("\u00f0\u0107\u0107\u0118\u0118\5\2VV\u010d\u010d\u016c")
        buf.write("\u016c\4\2\u00d8\u00d8\u010e\u010e\4\2\u00dc\u00dc\u0173")
        buf.write("\u0173\5\2\u0090\u0090\u00b5\u00b5\u0114\u0114\4\2TTh")
        buf.write("h\6\2\u00a7\u00a7\u00b3\u00b3\u00f4\u00f4\u0111\u0111")
        buf.write("\4\2ee\u0218\u0218\3\3\u021b\u021b\3\2\u013e\u013f\4\2")
        buf.write("\u0109\u0109\u01b3\u01b3\3\2EF\4\2gg\u00a6\u00a6\4\2\u00fd")
        buf.write("\u00fd\u01a9\u01a9\4\2\30\30\u00a6\u00a6\4\2%%jj\5\2\b")
        buf.write("\bpp\u0195\u0195\4\2QQ\u00e9\u00e9\5\2\u009a\u009a\u00c7")
        buf.write("\u00c7\u0143\u0143\4\2\u014f\u014f\u0181\u0181\5\2\u014f")
        buf.write("\u014f\u0169\u0169\u0181\u0181\4\2\u0085\u0085\u00a8\u00a8")
        buf.write("\4\2RR\u0145\u0145\4\2\u00a5\u00a5\u00c2\u00c2\4\2\b\b")
        buf.write("\u019a\u019a\4\2\26\26\u0157\u0157\4\2\17\17kk\4\2\u0091")
        buf.write("\u0091\u00c4\u00c4\4\2\b\b\u0091\u0091\3\2\u017d\u017e")
        buf.write("\4\2\u00dc\u00dc\u0176\u0176\3\2\u00ca\u00cd\3\2\u0213")
        buf.write("\u0214\4\2\u0212\u0212\u0216\u0216\4\2dd\u00aa\u00aa\6")
        buf.write("\2\b\b\f\f\u0088\u0088\u016a\u016a\5\2$$\u00c6\u00c6\u018a")
        buf.write("\u018a\4\2\b\bpp\4\2//\u01b7\u01b7\4\2pp\u0195\u0195\3")
        buf.write("\2\u011c\u011f\4\2,,??\4\2\u0092\u0092\u00c5\u00c5\4\2")
        buf.write("\61\61\u00ed\u00ed\4\2\u01b8\u01b8\u01bb\u01bb\4\2}}\u00f6")
        buf.write("\u00f6\4\2\u0081\u0081\u00e7\u00e7\4\2HHqq\4\2\u00a2\u00a2")
        buf.write("\u0160\u0160\7\2\u01d4\u01d6\u01d8\u01dd\u01df\u01e0\u01e2")
        buf.write("\u01e2\u01e6\u01e9\3\2\u01cd\u01d3\3\2\u01c7\u01cc\4\2")
        buf.write("\u0130\u0130\u0148\u0148\4\2\u0094\u0094\u012a\u012a\4")
        buf.write("\2\u00fb\u00fb\u014e\u014e\4\2\u0110\u0110\u016d\u016d")
        buf.write("\5\2\u008d\u008d\u017a\u017a\u01aa\u01aa\4\2==\u0144\u0144")
        buf.write("\5\2==\u00f9\u00f9\u0144\u0144\4\2\u0119\u0119\u0177\u0177")
        buf.write("\4\2\u00a5\u00a5\u013b\u013b\3\2\u0120\u0121\4\2[[\u01c3")
        buf.write("\u01c3\4\2\u00e5\u00e5\u0151\u0151\4\2((\60\60\6\2[[\u00a3")
        buf.write("\u00a3\u00df\u00df\u0151\u0151\3\2\u0209\u020a\4\2\u0204")
        buf.write("\u0204\u020b\u020bN\2\3\7\n\n\r\r\20\31\37$&&()+-/\62")
        buf.write("\64\6799;ADOQRTY[acdfhloqrtvy{}\u0085\u0087\u0087\u0089")
        buf.write("\u008d\u0090\u0095\u0097\u0098\u009a\u009b\u009f\u00a0")
        buf.write("\u00a2\u00a3\u00a5\u00a6\u00a8\u00ab\u00ad\u00b3\u00b5")
        buf.write("\u00b8\u00ba\u00ba\u00bc\u00bc\u00be\u00c9\u00cb\u00cf")
        buf.write("\u00d1\u00dd\u00df\u00e1\u00e3\u00f2\u00f4\u00f6\u00f9")
        buf.write("\u00f9\u00fb\u00fb\u00ff\u0103\u0105\u0107\u0109\u010a")
        buf.write("\u010d\u010d\u010f\u011b\u0122\u0122\u0124\u0124\u0126")
        buf.write("\u012c\u012f\u0141\u0143\u014f\u0151\u0153\u0155\u0155")
        buf.write("\u0157\u015e\u0160\u0165\u0167\u016e\u0170\u017b\u0180")
        buf.write("\u0188\u018a\u018e\u0190\u0193\u0196\u0196\u0198\u0198")
        buf.write("\u019a\u019d\u019f\u01a0\u01a4\u01ab\u01ad\u01ad\u01af")
        buf.write("\u01af\u01b1\u01d6\u01d8\u01dd\u01df\u01e0\u01e2\u01e2")
        buf.write("\u01e5\u0203\u022f\u022f\5\2\64\64\u01d7\u01d7\u01e3\u01e5")
        buf.write("\7\2OO\u01d4\u01d4\u01de\u01de\u01e1\u01e1\u01e6\u01e6")
        buf.write("\3\2\u01ea\u0203\2\u1712\2\u02f7\3\2\2\2\4\u02fe\3\2\2")
        buf.write("\2\6\u030c\3\2\2\2\b\u0321\3\2\2\2\n\u0323\3\2\2\2\f\u0325")
        buf.write("\3\2\2\2\16\u0327\3\2\2\2\20\u035b\3\2\2\2\22\u035f\3")
        buf.write("\2\2\2\24\u0377\3\2\2\2\26\u0385\3\2\2\2\30\u0387\3\2")
        buf.write("\2\2\32\u039e\3\2\2\2\34\u03bf\3\2\2\2\36\u03c1\3\2\2")
        buf.write("\2 \u03d2\3\2\2\2\"\u03f1\3\2\2\2$\u03f3\3\2\2\2&\u0424")
        buf.write("\3\2\2\2(\u0444\3\2\2\2*\u046c\3\2\2\2,\u0484\3\2\2\2")
        buf.write(".\u048d\3\2\2\2\60\u0496\3\2\2\2\62\u049f\3\2\2\2\64\u04a3")
        buf.write("\3\2\2\2\66\u04a8\3\2\2\28\u04c0\3\2\2\2:\u04c2\3\2\2")
        buf.write("\2<\u04c6\3\2\2\2>\u04fa\3\2\2\2@\u0516\3\2\2\2B\u0518")
        buf.write("\3\2\2\2D\u0526\3\2\2\2F\u0532\3\2\2\2H\u0537\3\2\2\2")
        buf.write("J\u053d\3\2\2\2L\u0540\3\2\2\2N\u054c\3\2\2\2P\u0555\3")
        buf.write("\2\2\2R\u0571\3\2\2\2T\u0577\3\2\2\2V\u057a\3\2\2\2X\u0581")
        buf.write("\3\2\2\2Z\u0589\3\2\2\2\\\u0595\3\2\2\2^\u0597\3\2\2\2")
        buf.write("`\u059b\3\2\2\2b\u05a1\3\2\2\2d\u05bd\3\2\2\2f\u05df\3")
        buf.write("\2\2\2h\u060e\3\2\2\2j\u0610\3\2\2\2l\u0613\3\2\2\2n\u061d")
        buf.write("\3\2\2\2p\u061f\3\2\2\2r\u0624\3\2\2\2t\u0632\3\2\2\2")
        buf.write("v\u0634\3\2\2\2x\u0639\3\2\2\2z\u0649\3\2\2\2|\u066a\3")
        buf.write("\2\2\2~\u068d\3\2\2\2\u0080\u0691\3\2\2\2\u0082\u06a0")
        buf.write("\3\2\2\2\u0084\u06a2\3\2\2\2\u0086\u06a5\3\2\2\2\u0088")
        buf.write("\u06c1\3\2\2\2\u008a\u06c3\3\2\2\2\u008c\u06c7\3\2\2\2")
        buf.write("\u008e\u06d9\3\2\2\2\u0090\u070c\3\2\2\2\u0092\u070e\3")
        buf.write("\2\2\2\u0094\u0715\3\2\2\2\u0096\u071a\3\2\2\2\u0098\u071d")
        buf.write("\3\2\2\2\u009a\u0721\3\2\2\2\u009c\u0726\3\2\2\2\u009e")
        buf.write("\u072a\3\2\2\2\u00a0\u073b\3\2\2\2\u00a2\u0748\3\2\2\2")
        buf.write("\u00a4\u0759\3\2\2\2\u00a6\u0766\3\2\2\2\u00a8\u0773\3")
        buf.write("\2\2\2\u00aa\u0784\3\2\2\2\u00ac\u0786\3\2\2\2\u00ae\u0797")
        buf.write("\3\2\2\2\u00b0\u07b0\3\2\2\2\u00b2\u07ba\3\2\2\2\u00b4")
        buf.write("\u07be\3\2\2\2\u00b6\u07e1\3\2\2\2\u00b8\u07ed\3\2\2\2")
        buf.write("\u00ba\u07f8\3\2\2\2\u00bc\u07fe\3\2\2\2\u00be\u0809\3")
        buf.write("\2\2\2\u00c0\u0815\3\2\2\2\u00c2\u081d\3\2\2\2\u00c4\u082c")
        buf.write("\3\2\2\2\u00c6\u0830\3\2\2\2\u00c8\u0850\3\2\2\2\u00ca")
        buf.write("\u0854\3\2\2\2\u00cc\u0859\3\2\2\2\u00ce\u0861\3\2\2\2")
        buf.write("\u00d0\u0869\3\2\2\2\u00d2\u086c\3\2\2\2\u00d4\u087c\3")
        buf.write("\2\2\2\u00d6\u0881\3\2\2\2\u00d8\u0885\3\2\2\2\u00da\u08b2")
        buf.write("\3\2\2\2\u00dc\u08b4\3\2\2\2\u00de\u08ca\3\2\2\2\u00e0")
        buf.write("\u08cc\3\2\2\2\u00e2\u08d1\3\2\2\2\u00e4\u08d3\3\2\2\2")
        buf.write("\u00e6\u08d5\3\2\2\2\u00e8\u08d7\3\2\2\2\u00ea\u08db\3")
        buf.write("\2\2\2\u00ec\u08e0\3\2\2\2\u00ee\u08e6\3\2\2\2\u00f0\u08f4")
        buf.write("\3\2\2\2\u00f2\u0908\3\2\2\2\u00f4\u090d\3\2\2\2\u00f6")
        buf.write("\u091a\3\2\2\2\u00f8\u091c\3\2\2\2\u00fa\u092a\3\2\2\2")
        buf.write("\u00fc\u0931\3\2\2\2\u00fe\u0937\3\2\2\2\u0100\u0939\3")
        buf.write("\2\2\2\u0102\u093c\3\2\2\2\u0104\u0941\3\2\2\2\u0106\u0959")
        buf.write("\3\2\2\2\u0108\u0968\3\2\2\2\u010a\u096a\3\2\2\2\u010c")
        buf.write("\u097f\3\2\2\2\u010e\u098e\3\2\2\2\u0110\u09a4\3\2\2\2")
        buf.write("\u0112\u09ab\3\2\2\2\u0114\u09b8\3\2\2\2\u0116\u09bb\3")
        buf.write("\2\2\2\u0118\u09d0\3\2\2\2\u011a\u09da\3\2\2\2\u011c\u09e3")
        buf.write("\3\2\2\2\u011e\u09fe\3\2\2\2\u0120\u0a29\3\2\2\2\u0122")
        buf.write("\u0a39\3\2\2\2\u0124\u0a46\3\2\2\2\u0126\u0a4f\3\2\2\2")
        buf.write("\u0128\u0a51\3\2\2\2\u012a\u0a70\3\2\2\2\u012c\u0a74\3")
        buf.write("\2\2\2\u012e\u0a7c\3\2\2\2\u0130\u0a7e\3\2\2\2\u0132\u0a86")
        buf.write("\3\2\2\2\u0134\u0a91\3\2\2\2\u0136\u0ab2\3\2\2\2\u0138")
        buf.write("\u0ab5\3\2\2\2\u013a\u0aca\3\2\2\2\u013c\u0acd\3\2\2\2")
        buf.write("\u013e\u0ad9\3\2\2\2\u0140\u0add\3\2\2\2\u0142\u0af6\3")
        buf.write("\2\2\2\u0144\u0af8\3\2\2\2\u0146\u0b09\3\2\2\2\u0148\u0b10")
        buf.write("\3\2\2\2\u014a\u0b1f\3\2\2\2\u014c\u0b36\3\2\2\2\u014e")
        buf.write("\u0b3c\3\2\2\2\u0150\u0b3e\3\2\2\2\u0152\u0b56\3\2\2\2")
        buf.write("\u0154\u0b6e\3\2\2\2\u0156\u0b92\3\2\2\2\u0158\u0b94\3")
        buf.write("\2\2\2\u015a\u0bb2\3\2\2\2\u015c\u0bb7\3\2\2\2\u015e\u0bb9")
        buf.write("\3\2\2\2\u0160\u0bc5\3\2\2\2\u0162\u0bd5\3\2\2\2\u0164")
        buf.write("\u0bd7\3\2\2\2\u0166\u0bda\3\2\2\2\u0168\u0bf4\3\2\2\2")
        buf.write("\u016a\u0bf6\3\2\2\2\u016c\u0bfa\3\2\2\2\u016e\u0c09\3")
        buf.write("\2\2\2\u0170\u0c15\3\2\2\2\u0172\u0c1d\3\2\2\2\u0174\u0c21")
        buf.write("\3\2\2\2\u0176\u0c2e\3\2\2\2\u0178\u0c34\3\2\2\2\u017a")
        buf.write("\u0c43\3\2\2\2\u017c\u0c57\3\2\2\2\u017e\u0c60\3\2\2\2")
        buf.write("\u0180\u0c62\3\2\2\2\u0182\u0c69\3\2\2\2\u0184\u0c6e\3")
        buf.write("\2\2\2\u0186\u0c7b\3\2\2\2\u0188\u0c83\3\2\2\2\u018a\u0c8b")
        buf.write("\3\2\2\2\u018c\u0c99\3\2\2\2\u018e\u0c9b\3\2\2\2\u0190")
        buf.write("\u0ca7\3\2\2\2\u0192\u0cca\3\2\2\2\u0194\u0ccc\3\2\2\2")
        buf.write("\u0196\u0cda\3\2\2\2\u0198\u0cdf\3\2\2\2\u019a\u0cf1\3")
        buf.write("\2\2\2\u019c\u0cf5\3\2\2\2\u019e\u0cfd\3\2\2\2\u01a0\u0d07")
        buf.write("\3\2\2\2\u01a2\u0d0f\3\2\2\2\u01a4\u0d15\3\2\2\2\u01a6")
        buf.write("\u0d24\3\2\2\2\u01a8\u0d27\3\2\2\2\u01aa\u0d40\3\2\2\2")
        buf.write("\u01ac\u0d53\3\2\2\2\u01ae\u0d57\3\2\2\2\u01b0\u0d5a\3")
        buf.write("\2\2\2\u01b2\u0d76\3\2\2\2\u01b4\u0d7b\3\2\2\2\u01b6\u0d8e")
        buf.write("\3\2\2\2\u01b8\u0d90\3\2\2\2\u01ba\u0da0\3\2\2\2\u01bc")
        buf.write("\u0da8\3\2\2\2\u01be\u0dad\3\2\2\2\u01c0\u0db8\3\2\2\2")
        buf.write("\u01c2\u0dc3\3\2\2\2\u01c4\u0dc6\3\2\2\2\u01c6\u0dd8\3")
        buf.write("\2\2\2\u01c8\u0dda\3\2\2\2\u01ca\u0de9\3\2\2\2\u01cc\u0df4")
        buf.write("\3\2\2\2\u01ce\u0e02\3\2\2\2\u01d0\u0e07\3\2\2\2\u01d2")
        buf.write("\u0e0c\3\2\2\2\u01d4\u0e19\3\2\2\2\u01d6\u0e1d\3\2\2\2")
        buf.write("\u01d8\u0e1f\3\2\2\2\u01da\u0e2a\3\2\2\2\u01dc\u0e38\3")
        buf.write("\2\2\2\u01de\u0e3a\3\2\2\2\u01e0\u0e5f\3\2\2\2\u01e2\u0e68")
        buf.write("\3\2\2\2\u01e4\u0e6a\3\2\2\2\u01e6\u0e76\3\2\2\2\u01e8")
        buf.write("\u0e8d\3\2\2\2\u01ea\u0e8f\3\2\2\2\u01ec\u0e91\3\2\2\2")
        buf.write("\u01ee\u0ea6\3\2\2\2\u01f0\u0ea8\3\2\2\2\u01f2\u0eac\3")
        buf.write("\2\2\2\u01f4\u0eb5\3\2\2\2\u01f6\u0ebd\3\2\2\2\u01f8\u0ec5")
        buf.write("\3\2\2\2\u01fa\u0ee8\3\2\2\2\u01fc\u0eea\3\2\2\2\u01fe")
        buf.write("\u0f08\3\2\2\2\u0200\u0f0a\3\2\2\2\u0202\u0f1a\3\2\2\2")
        buf.write("\u0204\u0f1d\3\2\2\2\u0206\u0f1f\3\2\2\2\u0208\u0f4c\3")
        buf.write("\2\2\2\u020a\u0f50\3\2\2\2\u020c\u0f53\3\2\2\2\u020e\u0f66")
        buf.write("\3\2\2\2\u0210\u0f6e\3\2\2\2\u0212\u0f80\3\2\2\2\u0214")
        buf.write("\u0f87\3\2\2\2\u0216\u0fa0\3\2\2\2\u0218\u0fa2\3\2\2\2")
        buf.write("\u021a\u0fa6\3\2\2\2\u021c\u0faf\3\2\2\2\u021e\u0ff9\3")
        buf.write("\2\2\2\u0220\u0ffe\3\2\2\2\u0222\u1000\3\2\2\2\u0224\u1035")
        buf.write("\3\2\2\2\u0226\u1179\3\2\2\2\u0228\u117b\3\2\2\2\u022a")
        buf.write("\u117d\3\2\2\2\u022c\u117f\3\2\2\2\u022e\u1181\3\2\2\2")
        buf.write("\u0230\u118e\3\2\2\2\u0232\u1197\3\2\2\2\u0234\u11a0\3")
        buf.write("\2\2\2\u0236\u11a2\3\2\2\2\u0238\u11b3\3\2\2\2\u023a\u11b9")
        buf.write("\3\2\2\2\u023c\u11c4\3\2\2\2\u023e\u11c6\3\2\2\2\u0240")
        buf.write("\u11da\3\2\2\2\u0242\u11e8\3\2\2\2\u0244\u11fa\3\2\2\2")
        buf.write("\u0246\u120f\3\2\2\2\u0248\u121c\3\2\2\2\u024a\u121f\3")
        buf.write("\2\2\2\u024c\u1228\3\2\2\2\u024e\u122e\3\2\2\2\u0250\u1236")
        buf.write("\3\2\2\2\u0252\u1239\3\2\2\2\u0254\u1244\3\2\2\2\u0256")
        buf.write("\u124d\3\2\2\2\u0258\u1252\3\2\2\2\u025a\u125b\3\2\2\2")
        buf.write("\u025c\u1264\3\2\2\2\u025e\u1266\3\2\2\2\u0260\u126c\3")
        buf.write("\2\2\2\u0262\u126e\3\2\2\2\u0264\u1270\3\2\2\2\u0266\u127e")
        buf.write("\3\2\2\2\u0268\u1282\3\2\2\2\u026a\u1284\3\2\2\2\u026c")
        buf.write("\u1286\3\2\2\2\u026e\u128b\3\2\2\2\u0270\u12a3\3\2\2\2")
        buf.write("\u0272\u12a7\3\2\2\2\u0274\u12a9\3\2\2\2\u0276\u12ab\3")
        buf.write("\2\2\2\u0278\u12ad\3\2\2\2\u027a\u12af\3\2\2\2\u027c\u12b1")
        buf.write("\3\2\2\2\u027e\u12b3\3\2\2\2\u0280\u12b5\3\2\2\2\u0282")
        buf.write("\u12c1\3\2\2\2\u0284\u12c3\3\2\2\2\u0286\u12c8\3\2\2\2")
        buf.write("\u0288\u12ca\3\2\2\2\u028a\u12cc\3\2\2\2\u028c\u12ce\3")
        buf.write("\2\2\2\u028e\u12d6\3\2\2\2\u0290\u12d8\3\2\2\2\u0292\u12e4")
        buf.write("\3\2\2\2\u0294\u12e6\3\2\2\2\u0296\u12ee\3\2\2\2\u0298")
        buf.write("\u12f6\3\2\2\2\u029a\u12fe\3\2\2\2\u029c\u1303\3\2\2\2")
        buf.write("\u029e\u1308\3\2\2\2\u02a0\u130d\3\2\2\2\u02a2\u1312\3")
        buf.write("\2\2\2\u02a4\u1317\3\2\2\2\u02a6\u1326\3\2\2\2\u02a8\u1328")
        buf.write("\3\2\2\2\u02aa\u132c\3\2\2\2\u02ac\u1330\3\2\2\2\u02ae")
        buf.write("\u1332\3\2\2\2\u02b0\u1337\3\2\2\2\u02b2\u1339\3\2\2\2")
        buf.write("\u02b4\u1341\3\2\2\2\u02b6\u134b\3\2\2\2\u02b8\u1353\3")
        buf.write("\2\2\2\u02ba\u1355\3\2\2\2\u02bc\u1357\3\2\2\2\u02be\u1360")
        buf.write("\3\2\2\2\u02c0\u136f\3\2\2\2\u02c2\u1384\3\2\2\2\u02c4")
        buf.write("\u13ae\3\2\2\2\u02c6\u13b5\3\2\2\2\u02c8\u13c1\3\2\2\2")
        buf.write("\u02ca\u13e4\3\2\2\2\u02cc\u13e6\3\2\2\2\u02ce\u1419\3")
        buf.write("\2\2\2\u02d0\u141e\3\2\2\2\u02d2\u1431\3\2\2\2\u02d4\u143b")
        buf.write("\3\2\2\2\u02d6\u144a\3\2\2\2\u02d8\u1492\3\2\2\2\u02da")
        buf.write("\u1494\3\2\2\2\u02dc\u1496\3\2\2\2\u02de\u1499\3\2\2\2")
        buf.write("\u02e0\u149d\3\2\2\2\u02e2\u14a3\3\2\2\2\u02e4\u14ac\3")
        buf.write("\2\2\2\u02e6\u14b1\3\2\2\2\u02e8\u14b6\3\2\2\2\u02ea\u14bb")
        buf.write("\3\2\2\2\u02ec\u14bd\3\2\2\2\u02ee\u14c1\3\2\2\2\u02f0")
        buf.write("\u14c3\3\2\2\2\u02f2\u14c5\3\2\2\2\u02f4\u14c7\3\2\2\2")
        buf.write("\u02f6\u02f8\n\2\2\2\u02f7\u02f6\3\2\2\2\u02f8\u02f9\3")
        buf.write("\2\2\2\u02f9\u02f7\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa\3")
        buf.write("\3\2\2\2\u02fb\u02fd\5\b\5\2\u02fc\u02fb\3\2\2\2\u02fd")
        buf.write("\u0300\3\2\2\2\u02fe\u02fc\3\2\2\2\u02fe\u02ff\3\2\2\2")
        buf.write("\u02ff\u0301\3\2\2\2\u0300\u02fe\3\2\2\2\u0301\u0302\7")
        buf.write("\2\2\3\u0302\5\3\2\2\2\u0303\u0306\5\b\5\2\u0304\u0306")
        buf.write("\5\u0256\u012c\2\u0305\u0303\3\2\2\2\u0305\u0304\3\2\2")
        buf.write("\2\u0306\u0308\3\2\2\2\u0307\u0309\7\u021b\2\2\u0308\u0307")
        buf.write("\3\2\2\2\u0308\u0309\3\2\2\2\u0309\u030b\3\2\2\2\u030a")
        buf.write("\u0305\3\2\2\2\u030b\u030e\3\2\2\2\u030c\u030a\3\2\2\2")
        buf.write("\u030c\u030d\3\2\2\2\u030d\u030f\3\2\2\2\u030e\u030c\3")
        buf.write("\2\2\2\u030f\u0310\7\2\2\3\u0310\7\3\2\2\2\u0311\u0322")
        buf.write("\5\n\6\2\u0312\u0322\5\f\7\2\u0313\u0322\5\16\b\2\u0314")
        buf.write("\u0322\5\26\f\2\u0315\u0322\5\30\r\2\u0316\u0322\5\32")
        buf.write("\16\2\u0317\u0322\5(\25\2\u0318\u0322\5\u008cG\2\u0319")
        buf.write("\u0322\5\u0086D\2\u031a\u0322\5\u0090I\2\u031b\u0322\5")
        buf.write("*\26\2\u031c\u0322\5L\'\2\u031d\u0322\5h\65\2\u031e\u0322")
        buf.write("\5j\66\2\u031f\u0322\5\u00fc\177\2\u0320\u0322\5\u0094")
        buf.write("K\2\u0321\u0311\3\2\2\2\u0321\u0312\3\2\2\2\u0321\u0313")
        buf.write("\3\2\2\2\u0321\u0314\3\2\2\2\u0321\u0315\3\2\2\2\u0321")
        buf.write("\u0316\3\2\2\2\u0321\u0317\3\2\2\2\u0321\u0318\3\2\2\2")
        buf.write("\u0321\u0319\3\2\2\2\u0321\u031a\3\2\2\2\u0321\u031b\3")
        buf.write("\2\2\2\u0321\u031c\3\2\2\2\u0321\u031d\3\2\2\2\u0321\u031e")
        buf.write("\3\2\2\2\u0321\u031f\3\2\2\2\u0321\u0320\3\2\2\2\u0322")
        buf.write("\t\3\2\2\2\u0323\u0324\13\2\2\2\u0324\13\3\2\2\2\u0325")
        buf.write("\u0326\5\u029e\u0150\2\u0326\r\3\2\2\2\u0327\u032a\7P")
        buf.write("\2\2\u0328\u0329\7\u010c\2\2\u0329\u032b\7\u013a\2\2\u032a")
        buf.write("\u0328\3\2\2\2\u032a\u032b\3\2\2\2\u032b\u032c\3\2\2\2")
        buf.write("\u032c\u032d\7\u009b\2\2\u032d\u0339\5\u02a0\u0151\2\u032e")
        buf.write("\u032f\7\u020f\2\2\u032f\u0334\5\u00a4S\2\u0330\u0331")
        buf.write("\7\u0215\2\2\u0331\u0333\5\u00a4S\2\u0332\u0330\3\2\2")
        buf.write("\2\u0333\u0336\3\2\2\2\u0334\u0332\3\2\2\2\u0334\u0335")
        buf.write("\3\2\2\2\u0335\u0337\3\2\2\2\u0336\u0334\3\2\2\2\u0337")
        buf.write("\u0338\7\u0210\2\2\u0338\u033a\3\2\2\2\u0339\u032e\3\2")
        buf.write("\2\2\u0339\u033a\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u033c")
        buf.write("\7\u013e\2\2\u033c\u0342\5\u02c8\u0165\2\u033d\u0341\5")
        buf.write("\u0096L\2\u033e\u0341\5\20\t\2\u033f\u0341\7l\2\2\u0340")
        buf.write("\u033d\3\2\2\2\u0340\u033e\3\2\2\2\u0340\u033f\3\2\2\2")
        buf.write("\u0341\u0344\3\2\2\2\u0342\u0340\3\2\2\2\u0342\u0343\3")
        buf.write("\2\2\2\u0343\u0356\3\2\2\2\u0344\u0342\3\2\2\2\u0345\u0351")
        buf.write("\t\3\2\2\u0346\u0348\7b\2\2\u0347\u0346\3\2\2\2\u0347")
        buf.write("\u0348\3\2\2\2\u0348\u034c\3\2\2\2\u0349\u034b\5\u00a8")
        buf.write("U\2\u034a\u0349\3\2\2\2\u034b\u034e\3\2\2\2\u034c\u034a")
        buf.write("\3\2\2\2\u034c\u034d\3\2\2\2\u034d\u034f\3\2\2\2\u034e")
        buf.write("\u034c\3\2\2\2\u034f\u0352\5\u00eex\2\u0350\u0352\5\u009a")
        buf.write("N\2\u0351\u0347\3\2\2\2\u0351\u0350\3\2\2\2\u0352\u0357")
        buf.write("\3\2\2\2\u0353\u0354\7\7\2\2\u0354\u0355\7\u019e\2\2\u0355")
        buf.write("\u0357\5\u0284\u0143\2\u0356\u0345\3\2\2\2\u0356\u0353")
        buf.write("\3\2\2\2\u0357\u0359\3\2\2\2\u0358\u035a\7\u021b\2\2\u0359")
        buf.write("\u0358\3\2\2\2\u0359\u035a\3\2\2\2\u035a\17\3\2\2\2\u035b")
        buf.write("\u035d\7\u0116\2\2\u035c\u035e\5\22\n\2\u035d\u035c\3")
        buf.write("\2\2\2\u035d\u035e\3\2\2\2\u035e\21\3\2\2\2\u035f\u0360")
        buf.write("\7\u020f\2\2\u0360\u0361\7\u0119\2\2\u0361\u0362\5\u01d6")
        buf.write("\u00ec\2\u0362\u0370\7\'\2\2\u0363\u0371\7\f\2\2\u0364")
        buf.write("\u0365\t\4\2\2\u0365\u0366\7\u020f\2\2\u0366\u036b\5\u02b2")
        buf.write("\u015a\2\u0367\u0368\7\u0215\2\2\u0368\u036a\5\u02b2\u015a")
        buf.write("\2\u0369\u0367\3\2\2\2\u036a\u036d\3\2\2\2\u036b\u0369")
        buf.write("\3\2\2\2\u036b\u036c\3\2\2\2\u036c\u036e\3\2\2\2\u036d")
        buf.write("\u036b\3\2\2\2\u036e\u036f\7\u0210\2\2\u036f\u0371\3\2")
        buf.write("\2\2\u0370\u0363\3\2\2\2\u0370\u0364\3\2\2\2\u0371\u0373")
        buf.write("\3\2\2\2\u0372\u0374\5\24\13\2\u0373\u0372\3\2\2\2\u0373")
        buf.write("\u0374\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u0376\7\u0210")
        buf.write("\2\2\u0376\23\3\2\2\2\u0377\u0378\t\5\2\2\u0378\u0379")
        buf.write("\5\u01d6\u00ec\2\u0379\u037a\7\'\2\2\u037a\u037b\7\u020f")
        buf.write("\2\2\u037b\u0380\5\u02b2\u015a\2\u037c\u037d\7\u0215\2")
        buf.write("\2\u037d\u037f\5\u02b2\u015a\2\u037e\u037c\3\2\2\2\u037f")
        buf.write("\u0382\3\2\2\2\u0380\u037e\3\2\2\2\u0380\u0381\3\2\2\2")
        buf.write("\u0381\u0383\3\2\2\2\u0382\u0380\3\2\2\2\u0383\u0384\7")
        buf.write("\u0210\2\2\u0384\25\3\2\2\2\u0385\u0386\5\u02a8\u0155")
        buf.write("\2\u0386\27\3\2\2\2\u0387\u038a\7P\2\2\u0388\u0389\7\u010c")
        buf.write("\2\2\u0389\u038b\7\u013a\2\2\u038a\u0388\3\2\2\2\u038a")
        buf.write("\u038b\3\2\2\2\u038b\u038c\3\2\2\2\u038c\u038d\7\u0115")
        buf.write("\2\2\u038d\u038f\5\u0282\u0142\2\u038e\u0390\5\u0096L")
        buf.write("\2\u038f\u038e\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0391")
        buf.write("\3\2\2\2\u0391\u0395\t\3\2\2\u0392\u0394\5\34\17\2\u0393")
        buf.write("\u0392\3\2\2\2\u0394\u0397\3\2\2\2\u0395\u0393\3\2\2\2")
        buf.write("\u0395\u0396\3\2\2\2\u0396\u0398\3\2\2\2\u0397\u0395\3")
        buf.write("\2\2\2\u0398\u039a\7|\2\2\u0399\u039b\5\u0282\u0142\2")
        buf.write("\u039a\u0399\3\2\2\2\u039a\u039b\3\2\2\2\u039b\u039c\3")
        buf.write("\2\2\2\u039c\u039d\7\u021b\2\2\u039d\31\3\2\2\2\u039e")
        buf.write("\u03a1\7P\2\2\u039f\u03a0\7\u010c\2\2\u03a0\u03a2\7\u013a")
        buf.write("\2\2\u03a1\u039f\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a3")
        buf.write("\3\2\2\2\u03a3\u03a4\7\u0115\2\2\u03a4\u03a5\7\"\2\2\u03a5")
        buf.write("\u03a6\5\u0282\u0142\2\u03a6\u03aa\t\3\2\2\u03a7\u03a9")
        buf.write("\5\"\22\2\u03a8\u03a7\3\2\2\2\u03a9\u03ac\3\2\2\2\u03aa")
        buf.write("\u03a8\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u03b3\3\2\2\2")
        buf.write("\u03ac\u03aa\3\2\2\2\u03ad\u03ae\7\32\2\2\u03ae\u03b4")
        buf.write("\5\u00c4c\2\u03af\u03b1\7|\2\2\u03b0\u03b2\5\u0282\u0142")
        buf.write("\2\u03b1\u03b0\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b4")
        buf.write("\3\2\2\2\u03b3\u03ad\3\2\2\2\u03b3\u03af\3\2\2\2\u03b4")
        buf.write("\u03b5\3\2\2\2\u03b5\u03b6\7\u021b\2\2\u03b6\33\3\2\2")
        buf.write("\2\u03b7\u03c0\5\u00aaV\2\u03b8\u03c0\5\u00acW\2\u03b9")
        buf.write("\u03c0\5\u00aeX\2\u03ba\u03c0\5\u00b2Z\2\u03bb\u03c0\5")
        buf.write("\u00b4[\2\u03bc\u03c0\5\u00bc_\2\u03bd\u03c0\5\36\20\2")
        buf.write("\u03be\u03c0\5 \21\2\u03bf\u03b7\3\2\2\2\u03bf\u03b8\3")
        buf.write("\2\2\2\u03bf\u03b9\3\2\2\2\u03bf\u03ba\3\2\2\2\u03bf\u03bb")
        buf.write("\3\2\2\2\u03bf\u03bc\3\2\2\2\u03bf\u03bd\3\2\2\2\u03bf")
        buf.write("\u03be\3\2\2\2\u03c0\35\3\2\2\2\u03c1\u03c2\7\u012e\2")
        buf.write("\2\u03c2\u03ce\5\u02e0\u0171\2\u03c3\u03c4\7\u020f\2\2")
        buf.write("\u03c4\u03c9\5\u00a4S\2\u03c5\u03c6\7\u0215\2\2\u03c6")
        buf.write("\u03c8\5\u00a4S\2\u03c7\u03c5\3\2\2\2\u03c8\u03cb\3\2")
        buf.write("\2\2\u03c9\u03c7\3\2\2\2\u03c9\u03ca\3\2\2\2\u03ca\u03cc")
        buf.write("\3\2\2\2\u03cb\u03c9\3\2\2\2\u03cc\u03cd\7\u0210\2\2\u03cd")
        buf.write("\u03cf\3\2\2\2\u03ce\u03c3\3\2\2\2\u03ce\u03cf\3\2\2\2")
        buf.write("\u03cf\u03d0\3\2\2\2\u03d0\u03d1\7\u021b\2\2\u03d1\37")
        buf.write("\3\2\2\2\u03d2\u03d3\7\u009b\2\2\u03d3\u03df\5\u02e0\u0171")
        buf.write("\2\u03d4\u03d5\7\u020f\2\2\u03d5\u03da\5\u00a4S\2\u03d6")
        buf.write("\u03d7\7\u0215\2\2\u03d7\u03d9\5\u00a4S\2\u03d8\u03d6")
        buf.write("\3\2\2\2\u03d9\u03dc\3\2\2\2\u03da\u03d8\3\2\2\2\u03da")
        buf.write("\u03db\3\2\2\2\u03db\u03dd\3\2\2\2\u03dc\u03da\3\2\2\2")
        buf.write("\u03dd\u03de\7\u0210\2\2\u03de\u03e0\3\2\2\2\u03df\u03d4")
        buf.write("\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1")
        buf.write("\u03e2\7\u013e\2\2\u03e2\u03e4\5\u02c8\u0165\2\u03e3\u03e5")
        buf.write("\7l\2\2\u03e4\u03e3\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5")
        buf.write("\u03e6\3\2\2\2\u03e6\u03e7\7\u021b\2\2\u03e7!\3\2\2\2")
        buf.write("\u03e8\u03f2\5\u00aaV\2\u03e9\u03f2\5\u00acW\2\u03ea\u03f2")
        buf.write("\5\u00aeX\2\u03eb\u03f2\5\u00b2Z\2\u03ec\u03f2\5\u00bc")
        buf.write("_\2\u03ed\u03f2\5&\24\2\u03ee\u03f2\5$\23\2\u03ef\u03f2")
        buf.write("\5\36\20\2\u03f0\u03f2\5 \21\2\u03f1\u03e8\3\2\2\2\u03f1")
        buf.write("\u03e9\3\2\2\2\u03f1\u03ea\3\2\2\2\u03f1\u03eb\3\2\2\2")
        buf.write("\u03f1\u03ec\3\2\2\2\u03f1\u03ed\3\2\2\2\u03f1\u03ee\3")
        buf.write("\2\2\2\u03f1\u03ef\3\2\2\2\u03f1\u03f0\3\2\2\2\u03f2#")
        buf.write("\3\2\2\2\u03f3\u03f4\7\u009b\2\2\u03f4\u0400\5\u02e0\u0171")
        buf.write("\2\u03f5\u03f6\7\u020f\2\2\u03f6\u03fb\5\u00a4S\2\u03f7")
        buf.write("\u03f8\7\u0215\2\2\u03f8\u03fa\5\u00a4S\2\u03f9\u03f7")
        buf.write("\3\2\2\2\u03fa\u03fd\3\2\2\2\u03fb\u03f9\3\2\2\2\u03fb")
        buf.write("\u03fc\3\2\2\2\u03fc\u03fe\3\2\2\2\u03fd\u03fb\3\2\2\2")
        buf.write("\u03fe\u03ff\7\u0210\2\2\u03ff\u0401\3\2\2\2\u0400\u03f5")
        buf.write("\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u0402\3\2\2\2\u0402")
        buf.write("\u0403\7\u013e\2\2\u0403\u0409\5\u02c8\u0165\2\u0404\u0408")
        buf.write("\5\u0096L\2\u0405\u0408\5\20\t\2\u0406\u0408\7l\2\2\u0407")
        buf.write("\u0404\3\2\2\2\u0407\u0405\3\2\2\2\u0407\u0406\3\2\2\2")
        buf.write("\u0408\u040b\3\2\2\2\u0409\u0407\3\2\2\2\u0409\u040a\3")
        buf.write("\2\2\2\u040a\u0420\3\2\2\2\u040b\u0409\3\2\2\2\u040c\u040e")
        buf.write("\7\u0122\2\2\u040d\u040c\3\2\2\2\u040d\u040e\3\2\2\2\u040e")
        buf.write("\u040f\3\2\2\2\u040f\u041b\t\3\2\2\u0410\u0412\7b\2\2")
        buf.write("\u0411\u0410\3\2\2\2\u0411\u0412\3\2\2\2\u0412\u0416\3")
        buf.write("\2\2\2\u0413\u0415\5\u00a8U\2\u0414\u0413\3\2\2\2\u0415")
        buf.write("\u0418\3\2\2\2\u0416\u0414\3\2\2\2\u0416\u0417\3\2\2\2")
        buf.write("\u0417\u0419\3\2\2\2\u0418\u0416\3\2\2\2\u0419\u041c\5")
        buf.write("\u00eex\2\u041a\u041c\5\u009aN\2\u041b\u0411\3\2\2\2\u041b")
        buf.write("\u041a\3\2\2\2\u041c\u0421\3\2\2\2\u041d\u041e\t\6\2\2")
        buf.write("\u041e\u041f\7\u019e\2\2\u041f\u0421\5\u0284\u0143\2\u0420")
        buf.write("\u040d\3\2\2\2\u0420\u041d\3\2\2\2\u0421\u0422\3\2\2\2")
        buf.write("\u0422\u0423\7\u021b\2\2\u0423%\3\2\2\2\u0424\u0425\7")
        buf.write("\u012e\2\2\u0425\u0431\5\u02e0\u0171\2\u0426\u0427\7\u020f")
        buf.write("\2\2\u0427\u042c\5\u00a4S\2\u0428\u0429\7\u0215\2\2\u0429")
        buf.write("\u042b\5\u00a4S\2\u042a\u0428\3\2\2\2\u042b\u042e\3\2")
        buf.write("\2\2\u042c\u042a\3\2\2\2\u042c\u042d\3\2\2\2\u042d\u042f")
        buf.write("\3\2\2\2\u042e\u042c\3\2\2\2\u042f\u0430\7\u0210\2\2\u0430")
        buf.write("\u0432\3\2\2\2\u0431\u0426\3\2\2\2\u0431\u0432\3\2\2\2")
        buf.write("\u0432\u0433\3\2\2\2\u0433\u0440\t\3\2\2\u0434\u0436\7")
        buf.write("b\2\2\u0435\u0434\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u043a")
        buf.write("\3\2\2\2\u0437\u0439\5\u00a8U\2\u0438\u0437\3\2\2\2\u0439")
        buf.write("\u043c\3\2\2\2\u043a\u0438\3\2\2\2\u043a\u043b\3\2\2\2")
        buf.write("\u043b\u043d\3\2\2\2\u043c\u043a\3\2\2\2\u043d\u0441\5")
        buf.write("\u00eex\2\u043e\u0441\5\u009aN\2\u043f\u0441\7\u008b\2")
        buf.write("\2\u0440\u0435\3\2\2\2\u0440\u043e\3\2\2\2\u0440\u043f")
        buf.write("\3\2\2\2\u0441\u0442\3\2\2\2\u0442\u0443\7\u021b\2\2\u0443")
        buf.write("\'\3\2\2\2\u0444\u0447\7P\2\2\u0445\u0446\7\u010c\2\2")
        buf.write("\u0446\u0448\7\u013a\2\2\u0447\u0445\3\2\2\2\u0447\u0448")
        buf.write("\3\2\2\2\u0448\u0449\3\2\2\2\u0449\u044a\7\u012e\2\2\u044a")
        buf.write("\u0456\5\u02a2\u0152\2\u044b\u044c\7\u020f\2\2\u044c\u0451")
        buf.write("\5\u00a4S\2\u044d\u044e\7\u0215\2\2\u044e\u0450\5\u00a4")
        buf.write("S\2\u044f\u044d\3\2\2\2\u0450\u0453\3\2\2\2\u0451\u044f")
        buf.write("\3\2\2\2\u0451\u0452\3\2\2\2\u0452\u0454\3\2\2\2\u0453")
        buf.write("\u0451\3\2\2\2\u0454\u0455\7\u0210\2\2\u0455\u0457\3\2")
        buf.write("\2\2\u0456\u044b\3\2\2\2\u0456\u0457\3\2\2\2\u0457\u0459")
        buf.write("\3\2\2\2\u0458\u045a\5\u0096L\2\u0459\u0458\3\2\2\2\u0459")
        buf.write("\u045a\3\2\2\2\u045a\u045b\3\2\2\2\u045b\u0468\t\3\2\2")
        buf.write("\u045c\u045e\7b\2\2\u045d\u045c\3\2\2\2\u045d\u045e\3")
        buf.write("\2\2\2\u045e\u0462\3\2\2\2\u045f\u0461\5\u00a8U\2\u0460")
        buf.write("\u045f\3\2\2\2\u0461\u0464\3\2\2\2\u0462\u0460\3\2\2\2")
        buf.write("\u0462\u0463\3\2\2\2\u0463\u0465\3\2\2\2\u0464\u0462\3")
        buf.write("\2\2\2\u0465\u0469\5\u00eex\2\u0466\u0469\5\u009aN\2\u0467")
        buf.write("\u0469\7\u008b\2\2\u0468\u045d\3\2\2\2\u0468\u0466\3\2")
        buf.write("\2\2\u0468\u0467\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u046b")
        buf.write("\7\u021b\2\2\u046b)\3\2\2\2\u046c\u046f\7P\2\2\u046d\u046e")
        buf.write("\7\u010c\2\2\u046e\u0470\7\u013a\2\2\u046f\u046d\3\2\2")
        buf.write("\2\u046f\u0470\3\2\2\2\u0470\u0471\3\2\2\2\u0471\u0472")
        buf.write("\7\u018e\2\2\u0472\u0476\5\u02a4\u0153\2\u0473\u0477\5")
        buf.write("\60\31\2\u0474\u0477\5\64\33\2\u0475\u0477\5\66\34\2\u0476")
        buf.write("\u0473\3\2\2\2\u0476\u0474\3\2\2\2\u0476\u0475\3\2\2\2")
        buf.write("\u0477\u0479\3\2\2\2\u0478\u047a\5,\27\2\u0479\u0478\3")
        buf.write("\2\2\2\u0479\u047a\3\2\2\2\u047a\u047c\3\2\2\2\u047b\u047d")
        buf.write("\t\7\2\2\u047c\u047b\3\2\2\2\u047c\u047d\3\2\2\2\u047d")
        buf.write("\u047f\3\2\2\2\u047e\u0480\5.\30\2\u047f\u047e\3\2\2\2")
        buf.write("\u047f\u0480\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0482\5")
        buf.write("8\35\2\u0482\u0483\7\u021b\2\2\u0483+\3\2\2\2\u0484\u0485")
        buf.write("\7\u0095\2\2\u0485\u048a\5\u02a4\u0153\2\u0486\u0487\7")
        buf.write("\u0215\2\2\u0487\u0489\5\u02a4\u0153\2\u0488\u0486\3\2")
        buf.write("\2\2\u0489\u048c\3\2\2\2\u048a\u0488\3\2\2\2\u048a\u048b")
        buf.write("\3\2\2\2\u048b-\3\2\2\2\u048c\u048a\3\2\2\2\u048d\u048e")
        buf.write("\7\u01ac\2\2\u048e\u048f\7\u020f\2\2\u048f\u0490\5\u01d4")
        buf.write("\u00eb\2\u0490\u0491\7\u0210\2\2\u0491/\3\2\2\2\u0492")
        buf.write("\u0497\7\31\2\2\u0493\u0497\7\5\2\2\u0494\u0495\7\u00b6")
        buf.write("\2\2\u0495\u0497\7\u0104\2\2\u0496\u0492\3\2\2\2\u0496")
        buf.write("\u0493\3\2\2\2\u0496\u0494\3\2\2\2\u0497\u0498\3\2\2\2")
        buf.write("\u0498\u049a\5B\"\2\u0499\u049b\5H%\2\u049a\u0499\3\2")
        buf.write("\2\2\u049a\u049b\3\2\2\2\u049b\u049d\3\2\2\2\u049c\u049e")
        buf.write("\5\62\32\2\u049d\u049c\3\2\2\2\u049d\u049e\3\2\2\2\u049e")
        buf.write("\61\3\2\2\2\u049f\u04a0\7\u0096\2\2\u04a0\u04a1\7u\2\2")
        buf.write("\u04a1\u04a2\7\u0146\2\2\u04a2\63\3\2\2\2\u04a3\u04a4")
        buf.write("\7\u0096\2\2\u04a4\u04a6\5B\"\2\u04a5\u04a7\5H%\2\u04a6")
        buf.write("\u04a5\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\65\3\2\2\2\u04a8")
        buf.write("\u04a9\t\b\2\2\u04a9\u04ae\5@!\2\u04aa\u04ab\7\u010c\2")
        buf.write("\2\u04ab\u04ad\5@!\2\u04ac\u04aa\3\2\2\2\u04ad\u04b0\3")
        buf.write("\2\2\2\u04ae\u04ac\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04b1")
        buf.write("\3\2\2\2\u04b0\u04ae\3\2\2\2\u04b1\u04b9\7\u0108\2\2\u04b2")
        buf.write("\u04ba\7Y\2\2\u04b3\u04b4\5\u027e\u0140\2\u04b4\u04b5")
        buf.write("\7\u0208\2\2\u04b5\u04b7\3\2\2\2\u04b6\u04b3\3\2\2\2\u04b6")
        buf.write("\u04b7\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8\u04ba\7\u014d")
        buf.write("\2\2\u04b9\u04b2\3\2\2\2\u04b9\u04b6\3\2\2\2\u04ba\67")
        buf.write("\3\2\2\2\u04bb\u04bc\7A\2\2\u04bc\u04c1\7\u018e\2\2\u04bd")
        buf.write("\u04be\7+\2\2\u04be\u04c1\5\u02e0\u0171\2\u04bf\u04c1")
        buf.write("\5\u00f2z\2\u04c0\u04bb\3\2\2\2\u04c0\u04bd\3\2\2\2\u04c0")
        buf.write("\u04bf\3\2\2\2\u04c19\3\2\2\2\u04c2\u04c4\5\u0280\u0141")
        buf.write("\2\u04c3\u04c5\5\u02be\u0160\2\u04c4\u04c3\3\2\2\2\u04c4")
        buf.write("\u04c5\3\2\2\2\u04c5;\3\2\2\2\u04c6\u04c7\7A\2\2\u04c7")
        buf.write("\u04cb\7\u018e\2\2\u04c8\u04ca\5\u00a8U\2\u04c9\u04c8")
        buf.write("\3\2\2\2\u04ca\u04cd\3\2\2\2\u04cb\u04c9\3\2\2\2\u04cb")
        buf.write("\u04cc\3\2\2\2\u04cc\u04cf\3\2\2\2\u04cd\u04cb\3\2\2\2")
        buf.write("\u04ce\u04d0\5> \2\u04cf\u04ce\3\2\2\2\u04d0\u04d1\3\2")
        buf.write("\2\2\u04d1\u04cf\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2\u04d3")
        buf.write("\3\2\2\2\u04d3\u04d4\7|\2\2\u04d4\u04d5\5\u02a4\u0153")
        buf.write("\2\u04d5=\3\2\2\2\u04d6\u04d7\7\31\2\2\u04d7\u04d8\7\u0171")
        buf.write("\2\2\u04d8\u04d9\7\u00bd\2\2\u04d9\u04da\5\u00f2z\2\u04da")
        buf.write("\u04db\7\31\2\2\u04db\u04dc\7\u0171\2\2\u04dc\u04dd\7")
        buf.write("\u021b\2\2\u04dd\u04fb\3\2\2\2\u04de\u04df\7\31\2\2\u04df")
        buf.write("\u04e0\7u\2\2\u04e0\u04e1\7\u0146\2\2\u04e1\u04e2\7\u00bd")
        buf.write("\2\2\u04e2\u04e3\5\u00f2z\2\u04e3\u04e4\7\31\2\2\u04e4")
        buf.write("\u04e5\7u\2\2\u04e5\u04e6\7\u0146\2\2\u04e6\u04e7\7\u021b")
        buf.write("\2\2\u04e7\u04fb\3\2\2\2\u04e8\u04e9\7\5\2\2\u04e9\u04ea")
        buf.write("\7\u0171\2\2\u04ea\u04eb\7\u00bd\2\2\u04eb\u04ec\5\u00f2")
        buf.write("z\2\u04ec\u04ed\7\5\2\2\u04ed\u04ee\7\u0171\2\2\u04ee")
        buf.write("\u04ef\7\u021b\2\2\u04ef\u04fb\3\2\2\2\u04f0\u04f1\7\5")
        buf.write("\2\2\u04f1\u04f2\7u\2\2\u04f2\u04f3\7\u0146\2\2\u04f3")
        buf.write("\u04f4\7\u00bd\2\2\u04f4\u04f5\5\u00f2z\2\u04f5\u04f6")
        buf.write("\7\5\2\2\u04f6\u04f7\7u\2\2\u04f7\u04f8\7\u0146\2\2\u04f8")
        buf.write("\u04f9\7\u021b\2\2\u04f9\u04fb\3\2\2\2\u04fa\u04d6\3\2")
        buf.write("\2\2\u04fa\u04de\3\2\2\2\u04fa\u04e8\3\2\2\2\u04fa\u04f0")
        buf.write("\3\2\2\2\u04fb?\3\2\2\2\u04fc\u0517\7\t\2\2\u04fd\u0517")
        buf.write("\7\n\2\2\u04fe\u04ff\7\20\2\2\u04ff\u0517\7\u0174\2\2")
        buf.write("\u0500\u0517\7\23\2\2\u0501\u0517\7<\2\2\u0502\u0517\7")
        buf.write("P\2\2\u0503\u0504\7o\2\2\u0504\u0517\7\u0174\2\2\u0505")
        buf.write("\u0517\7s\2\2\u0506\u0517\7\u009d\2\2\u0507\u0517\7\u00f2")
        buf.write("\2\2\u0508\u0517\7\u0139\2\2\u0509\u0517\7\u0142\2\2\u050a")
        buf.write("\u0517\7\u0190\2\2\u050b\u0517\7^\2\2\u050c\u0517\7\u0170")
        buf.write("\2\2\u050d\u0517\7\u0161\2\2\u050e\u0517\7\\\2\2\u050f")
        buf.write("\u0517\7\u00d4\2\2\u0510\u0517\7\u00d3\2\2\u0511\u0517")
        buf.write("\7\u015a\2\2\u0512\u0517\7\u017b\2\2\u0513\u0517\7Y\2")
        buf.write("\2\u0514\u0517\7\u014d\2\2\u0515\u0517\7\u0095\2\2\u0516")
        buf.write("\u04fc\3\2\2\2\u0516\u04fd\3\2\2\2\u0516\u04fe\3\2\2\2")
        buf.write("\u0516\u0500\3\2\2\2\u0516\u0501\3\2\2\2\u0516\u0502\3")
        buf.write("\2\2\2\u0516\u0503\3\2\2\2\u0516\u0505\3\2\2\2\u0516\u0506")
        buf.write("\3\2\2\2\u0516\u0507\3\2\2\2\u0516\u0508\3\2\2\2\u0516")
        buf.write("\u0509\3\2\2\2\u0516\u050a\3\2\2\2\u0516\u050b\3\2\2\2")
        buf.write("\u0516\u050c\3\2\2\2\u0516\u050d\3\2\2\2\u0516\u050e\3")
        buf.write("\2\2\2\u0516\u050f\3\2\2\2\u0516\u0510\3\2\2\2\u0516\u0511")
        buf.write("\3\2\2\2\u0516\u0512\3\2\2\2\u0516\u0513\3\2\2\2\u0516")
        buf.write("\u0514\3\2\2\2\u0516\u0515\3\2\2\2\u0517A\3\2\2\2\u0518")
        buf.write("\u051d\5D#\2\u0519\u051a\7\u010c\2\2\u051a\u051c\5D#\2")
        buf.write("\u051b\u0519\3\2\2\2\u051c\u051f\3\2\2\2\u051d\u051b\3")
        buf.write("\2\2\2\u051d\u051e\3\2\2\2\u051e\u0520\3\2\2\2\u051f\u051d")
        buf.write("\3\2\2\2\u0520\u0522\7\u0108\2\2\u0521\u0523\5F$\2\u0522")
        buf.write("\u0521\3\2\2\2\u0522\u0523\3\2\2\2\u0523\u0524\3\2\2\2")
        buf.write("\u0524\u0525\5\u02b4\u015b\2\u0525C\3\2\2\2\u0526\u0530")
        buf.write("\t\t\2\2\u0527\u0528\7\u0104\2\2\u0528\u052d\5\u02b2\u015a")
        buf.write("\2\u0529\u052a\7\u0215\2\2\u052a\u052c\5\u02b2\u015a\2")
        buf.write("\u052b\u0529\3\2\2\2\u052c\u052f\3\2\2\2\u052d\u052b\3")
        buf.write("\2\2\2\u052d\u052e\3\2\2\2\u052e\u0531\3\2\2\2\u052f\u052d")
        buf.write("\3\2\2\2\u0530\u0527\3\2\2\2\u0530\u0531\3\2\2\2\u0531")
        buf.write("E\3\2\2\2\u0532\u0533\7\u00ef\2\2\u0533\u0534\7\u017d")
        buf.write("\2\2\u0534\u0535\5\u02b4\u015b\2\u0535\u0536\7\u0104\2")
        buf.write("\2\u0536G\3\2\2\2\u0537\u0539\7\u0137\2\2\u0538\u053a")
        buf.write("\5J&\2\u0539\u0538\3\2\2\2\u053a\u053b\3\2\2\2\u053b\u0539")
        buf.write("\3\2\2\2\u053b\u053c\3\2\2\2\u053cI\3\2\2\2\u053d\u053e")
        buf.write("\t\n\2\2\u053e\u053f\5\u0266\u0134\2\u053fK\3\2\2\2\u0540")
        buf.write("\u0543\7P\2\2\u0541\u0542\7\u010c\2\2\u0542\u0544\7\u013a")
        buf.write("\2\2\u0543\u0541\3\2\2\2\u0543\u0544\3\2\2\2\u0544\u0545")
        buf.write("\3\2\2\2\u0545\u0548\7\u0191\2\2\u0546\u0549\5N(\2\u0547")
        buf.write("\u0549\5Z.\2\u0548\u0546\3\2\2\2\u0548\u0547\3\2\2\2\u0549")
        buf.write("\u054a\3\2\2\2\u054a\u054b\7\u021b\2\2\u054bM\3\2\2\2")
        buf.write("\u054c\u054f\5\u0294\u014b\2\u054d\u054e\7\u0106\2\2\u054e")
        buf.write("\u0550\7\u020b\2\2\u054f\u054d\3\2\2\2\u054f\u0550\3\2")
        buf.write("\2\2\u0550\u0552\3\2\2\2\u0551\u0553\5P)\2\u0552\u0551")
        buf.write("\3\2\2\2\u0552\u0553\3\2\2\2\u0553O\3\2\2\2\u0554\u0556")
        buf.write("\5\u0096L\2\u0555\u0554\3\2\2\2\u0555\u0556\3\2\2\2\u0556")
        buf.write("\u0559\3\2\2\2\u0557\u055a\5R*\2\u0558\u055a\5T+\2\u0559")
        buf.write("\u0557\3\2\2\2\u0559\u0558\3\2\2\2\u055a\u055c\3\2\2\2")
        buf.write("\u055b\u055d\5X-\2\u055c\u055b\3\2\2\2\u055c\u055d\3\2")
        buf.write("\2\2\u055d\u0569\3\2\2\2\u055e\u055f\7\u020f\2\2\u055f")
        buf.write("\u0564\5n8\2\u0560\u0561\7\u0215\2\2\u0561\u0563\5n8\2")
        buf.write("\u0562\u0560\3\2\2\2\u0563\u0566\3\2\2\2\u0564\u0562\3")
        buf.write("\2\2\2\u0564\u0565\3\2\2\2\u0565\u0567\3\2\2\2\u0566\u0564")
        buf.write("\3\2\2\2\u0567\u0568\7\u0210\2\2\u0568\u056a\3\2\2\2\u0569")
        buf.write("\u055e\3\2\2\2\u0569\u056a\3\2\2\2\u056a\u056e\3\2\2\2")
        buf.write("\u056b\u056d\5l\67\2\u056c\u056b\3\2\2\2\u056d\u0570\3")
        buf.write("\2\2\2\u056e\u056c\3\2\2\2\u056e\u056f\3\2\2\2\u056fQ")
        buf.write("\3\2\2\2\u0570\u056e\3\2\2\2\u0571\u0575\t\3\2\2\u0572")
        buf.write("\u0576\7\u0103\2\2\u0573\u0576\5\u00c2b\2\u0574\u0576")
        buf.write("\5V,\2\u0575\u0572\3\2\2\2\u0575\u0573\3\2\2\2\u0575\u0574")
        buf.write("\3\2\2\2\u0576S\3\2\2\2\u0577\u0578\7\u0193\2\2\u0578")
        buf.write("\u0579\5\u02c8\u0165\2\u0579U\3\2\2\2\u057a\u057b\7\u017d")
        buf.write("\2\2\u057b\u057c\7\u0104\2\2\u057c\u057f\5\u02c8\u0165")
        buf.write("\2\u057d\u057e\7\u00fc\2\2\u057e\u0580\7\u00fe\2\2\u057f")
        buf.write("\u057d\3\2\2\2\u057f\u0580\3\2\2\2\u0580W\3\2\2\2\u0581")
        buf.write("\u0582\7\u008b\2\2\u0582\u0583\7\u00e7\2\2\u0583\u0584")
        buf.write("\5\u01d6\u00ec\2\u0584\u0585\7\u00c3\2\2\u0585\u0586\7")
        buf.write("\u00c0\2\2\u0586\u0587\7\u019e\2\2\u0587\u0588\t\13\2")
        buf.write("\2\u0588Y\3\2\2\2\u0589\u058a\7\"\2\2\u058a\u058b\5\u0294")
        buf.write("\u014b\2\u058b\u058d\t\3\2\2\u058c\u058e\5\\/\2\u058d")
        buf.write("\u058c\3\2\2\2\u058e\u058f\3\2\2\2\u058f\u058d\3\2\2\2")
        buf.write("\u058f\u0590\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0592\7")
        buf.write("|\2\2\u0592[\3\2\2\2\u0593\u0596\5^\60\2\u0594\u0596\5")
        buf.write("`\61\2\u0595\u0593\3\2\2\2\u0595\u0594\3\2\2\2\u0596]")
        buf.write("\3\2\2\2\u0597\u0598\t\f\2\2\u0598\u0599\7\u00dc\2\2\u0599")
        buf.write("\u059a\5d\63\2\u059a_\3\2\2\2\u059b\u059f\t\r\2\2\u059c")
        buf.write("\u05a0\5b\62\2\u059d\u05a0\5d\63\2\u059e\u05a0\5f\64\2")
        buf.write("\u059f\u059c\3\2\2\2\u059f\u059d\3\2\2\2\u059f\u059e\3")
        buf.write("\2\2\2\u05a0a\3\2\2\2\u05a1\u05a2\7\u012e\2\2\u05a2\u05a3")
        buf.write("\5\u02a2\u0152\2\u05a3\u05a4\7\u020f\2\2\u05a4\u05a9\5")
        buf.write("\u0084C\2\u05a5\u05a6\7\u0215\2\2\u05a6\u05a8\5\u0084")
        buf.write("C\2\u05a7\u05a5\3\2\2\2\u05a8\u05ab\3\2\2\2\u05a9\u05a7")
        buf.write("\3\2\2\2\u05a9\u05aa\3\2\2\2\u05aa\u05ac\3\2\2\2\u05ab")
        buf.write("\u05a9\3\2\2\2\u05ac\u05ad\7\u0210\2\2\u05ad\u05bb\t\3")
        buf.write("\2\2\u05ae\u05bc\5\u009aN\2\u05af\u05b1\7b\2\2\u05b0\u05af")
        buf.write("\3\2\2\2\u05b0\u05b1\3\2\2\2\u05b1\u05b5\3\2\2\2\u05b2")
        buf.write("\u05b4\5\u00a8U\2\u05b3\u05b2\3\2\2\2\u05b4\u05b7\3\2")
        buf.write("\2\2\u05b5\u05b3\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6\u05b8")
        buf.write("\3\2\2\2\u05b7\u05b5\3\2\2\2\u05b8\u05b9\5\u00eex\2\u05b9")
        buf.write("\u05ba\7\u021b\2\2\u05ba\u05bc\3\2\2\2\u05bb\u05ae\3\2")
        buf.write("\2\2\u05bb\u05b0\3\2\2\2\u05bcc\3\2\2\2\u05bd\u05be\7")
        buf.write("\u009b\2\2\u05be\u05ca\5\u02a0\u0151\2\u05bf\u05c0\7\u020f")
        buf.write("\2\2\u05c0\u05c5\5\u0084C\2\u05c1\u05c2\7\u0215\2\2\u05c2")
        buf.write("\u05c4\5\u0084C\2\u05c3\u05c1\3\2\2\2\u05c4\u05c7\3\2")
        buf.write("\2\2\u05c5\u05c3\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6\u05c8")
        buf.write("\3\2\2\2\u05c7\u05c5\3\2\2\2\u05c8\u05c9\7\u0210\2\2\u05c9")
        buf.write("\u05cb\3\2\2\2\u05ca\u05bf\3\2\2\2\u05ca\u05cb\3\2\2\2")
        buf.write("\u05cb\u05cc\3\2\2\2\u05cc\u05cd\7\u013e\2\2\u05cd\u05ce")
        buf.write("\5\u02c8\u0165\2\u05ce\u05dc\t\3\2\2\u05cf\u05dd\5\u009a")
        buf.write("N\2\u05d0\u05d2\7b\2\2\u05d1\u05d0\3\2\2\2\u05d1\u05d2")
        buf.write("\3\2\2\2\u05d2\u05d6\3\2\2\2\u05d3\u05d5\5\u00a8U\2\u05d4")
        buf.write("\u05d3\3\2\2\2\u05d5\u05d8\3\2\2\2\u05d6\u05d4\3\2\2\2")
        buf.write("\u05d6\u05d7\3\2\2\2\u05d7\u05d9\3\2\2\2\u05d8\u05d6\3")
        buf.write("\2\2\2\u05d9\u05da\5\u00eex\2\u05da\u05db\7\u021b\2\2")
        buf.write("\u05db\u05dd\3\2\2\2\u05dc\u05cf\3\2\2\2\u05dc\u05d1\3")
        buf.write("\2\2\2\u05dde\3\2\2\2\u05de\u05e0\7\u0090\2\2\u05df\u05de")
        buf.write("\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05e2\3\2\2\2\u05e1")
        buf.write("\u05e3\7\u00b5\2\2\u05e2\u05e1\3\2\2\2\u05e2\u05e3\3\2")
        buf.write("\2\2\u05e3\u05e4\3\2\2\2\u05e4\u05e5\7G\2\2\u05e5\u05e6")
        buf.write("\7\u009b\2\2\u05e6\u05f8\5\u02c8\u0165\2\u05e7\u05e8\7")
        buf.write("\u020f\2\2\u05e8\u05e9\7\u0155\2\2\u05e9\u05ea\7\u00a7")
        buf.write("\2\2\u05ea\u05eb\7\u0111\2\2\u05eb\u05ec\5\u02c8\u0165")
        buf.write("\2\u05ec\u05ed\7\u0215\2\2\u05ed\u05ee\3\2\2\2\u05ee\u05f3")
        buf.write("\5\u0084C\2\u05ef\u05f0\7\u0215\2\2\u05f0\u05f2\5\u0084")
        buf.write("C\2\u05f1\u05ef\3\2\2\2\u05f2\u05f5\3\2\2\2\u05f3\u05f1")
        buf.write("\3\2\2\2\u05f3\u05f4\3\2\2\2\u05f4\u05f6\3\2\2\2\u05f5")
        buf.write("\u05f3\3\2\2\2\u05f6\u05f7\7\u0210\2\2\u05f7\u05f9\3\2")
        buf.write("\2\2\u05f8\u05e7\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9\u05fa")
        buf.write("\3\2\2\2\u05fa\u05fb\7\u013e\2\2\u05fb\u05fc\7\u0155\2")
        buf.write("\2\u05fc\u05fd\7\16\2\2\u05fd\u05fe\7\u013d\2\2\u05fe")
        buf.write("\u060c\t\3\2\2\u05ff\u060d\5\u009aN\2\u0600\u0602\7b\2")
        buf.write("\2\u0601\u0600\3\2\2\2\u0601\u0602\3\2\2\2\u0602\u0606")
        buf.write("\3\2\2\2\u0603\u0605\5\u00a8U\2\u0604\u0603\3\2\2\2\u0605")
        buf.write("\u0608\3\2\2\2\u0606\u0604\3\2\2\2\u0606\u0607\3\2\2\2")
        buf.write("\u0607\u0609\3\2\2\2\u0608\u0606\3\2\2\2\u0609\u060a\5")
        buf.write("\u00eex\2\u060a\u060b\7\u021b\2\2\u060b\u060d\3\2\2\2")
        buf.write("\u060c\u05ff\3\2\2\2\u060c\u0601\3\2\2\2\u060dg\3\2\2")
        buf.write("\2\u060e\u060f\5\u029a\u014e\2\u060fi\3\2\2\2\u0610\u0611")
        buf.write("\5\u029c\u014f\2\u0611k\3\2\2\2\u0612\u0614\7\u00fc\2")
        buf.write("\2\u0613\u0612\3\2\2\2\u0613\u0614\3\2\2\2\u0614\u0615")
        buf.write("\3\2\2\2\u0615\u0616\t\16\2\2\u0616m\3\2\2\2\u0617\u0618")
        buf.write("\5\u02e0\u0171\2\u0618\u061a\5\u02c8\u0165\2\u0619\u061b")
        buf.write("\5p9\2\u061a\u0619\3\2\2\2\u061a\u061b\3\2\2\2\u061b\u061e")
        buf.write("\3\2\2\2\u061c\u061e\5r:\2\u061d\u0617\3\2\2\2\u061d\u061c")
        buf.write("\3\2\2\2\u061eo\3\2\2\2\u061f\u0620\7\u008b\2\2\u0620")
        buf.write("\u0621\7\u00e7\2\2\u0621\u0622\5\u01d6\u00ec\2\u0622q")
        buf.write("\3\2\2\2\u0623\u0625\5l\67\2\u0624\u0623\3\2\2\2\u0624")
        buf.write("\u0625\3\2\2\2\u0625\u0627\3\2\2\2\u0626\u0628\5t;\2\u0627")
        buf.write("\u0626\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u0627\3\2\2\2")
        buf.write("\u0629\u062a\3\2\2\2\u062a\u062d\3\2\2\2\u062b\u062c\7")
        buf.write("\u0215\2\2\u062c\u062e\5\u0080A\2\u062d\u062b\3\2\2\2")
        buf.write("\u062d\u062e\3\2\2\2\u062es\3\2\2\2\u062f\u0633\5v<\2")
        buf.write("\u0630\u0633\5|?\2\u0631\u0633\5~@\2\u0632\u062f\3\2\2")
        buf.write("\2\u0632\u0630\3\2\2\2\u0632\u0631\3\2\2\2\u0633u\3\2")
        buf.write("\2\2\u0634\u0637\t\r\2\2\u0635\u0638\5x=\2\u0636\u0638")
        buf.write("\5z>\2\u0637\u0635\3\2\2\2\u0637\u0636\3\2\2\2\u0638w")
        buf.write("\3\2\2\2\u0639\u063a\7\u012e\2\2\u063a\u063b\5\u02a2\u0152")
        buf.write("\2\u063b\u063c\7\u020f\2\2\u063c\u0641\5\u0084C\2\u063d")
        buf.write("\u063e\7\u0215\2\2\u063e\u0640\5\u0084C\2\u063f\u063d")
        buf.write("\3\2\2\2\u0640\u0643\3\2\2\2\u0641\u063f\3\2\2\2\u0641")
        buf.write("\u0642\3\2\2\2\u0642\u0644\3\2\2\2\u0643\u0641\3\2\2\2")
        buf.write("\u0644\u0647\7\u0210\2\2\u0645\u0646\t\3\2\2\u0646\u0648")
        buf.write("\5\u009aN\2\u0647\u0645\3\2\2\2\u0647\u0648\3\2\2\2\u0648")
        buf.write("y\3\2\2\2\u0649\u064a\7\u009b\2\2\u064a\u0656\5\u02a0")
        buf.write("\u0151\2\u064b\u064c\7\u020f\2\2\u064c\u0651\5\u0084C")
        buf.write("\2\u064d\u064e\7\u0215\2\2\u064e\u0650\5\u0084C\2\u064f")
        buf.write("\u064d\3\2\2\2\u0650\u0653\3\2\2\2\u0651\u064f\3\2\2\2")
        buf.write("\u0651\u0652\3\2\2\2\u0652\u0654\3\2\2\2\u0653\u0651\3")
        buf.write("\2\2\2\u0654\u0655\7\u0210\2\2\u0655\u0657\3\2\2\2\u0656")
        buf.write("\u064b\3\2\2\2\u0656\u0657\3\2\2\2\u0657\u0658\3\2\2\2")
        buf.write("\u0658\u065d\7\u013e\2\2\u0659\u065e\5\u02c8\u0165\2\u065a")
        buf.write("\u065b\7\u0155\2\2\u065b\u065c\7\16\2\2\u065c\u065e\7")
        buf.write("\u013d\2\2\u065d\u0659\3\2\2\2\u065d\u065a\3\2\2\2\u065e")
        buf.write("\u0667\3\2\2\2\u065f\u0660\t\3\2\2\u0660\u0668\5\u009a")
        buf.write("N\2\u0661\u0663\7\u008b\2\2\u0662\u0664\7\u01a4\2\2\u0663")
        buf.write("\u0662\3\2\2\2\u0663\u0664\3\2\2\2\u0664\u0665\3\2\2\2")
        buf.write("\u0665\u0666\7\u00e7\2\2\u0666\u0668\5\u01d6\u00ec\2\u0667")
        buf.write("\u065f\3\2\2\2\u0667\u0661\3\2\2\2\u0667\u0668\3\2\2\2")
        buf.write("\u0668{\3\2\2\2\u0669\u066b\7\u0090\2\2\u066a\u0669\3")
        buf.write("\2\2\2\u066a\u066b\3\2\2\2\u066b\u066d\3\2\2\2\u066c\u066e")
        buf.write("\7\u00b5\2\2\u066d\u066c\3\2\2\2\u066d\u066e\3\2\2\2\u066e")
        buf.write("\u066f\3\2\2\2\u066f\u0670\7G\2\2\u0670\u0671\7\u009b")
        buf.write("\2\2\u0671\u0683\5\u02c8\u0165\2\u0672\u0673\7\u020f\2")
        buf.write("\2\u0673\u0674\7\u0155\2\2\u0674\u0675\7\u00a7\2\2\u0675")
        buf.write("\u0676\7\u0111\2\2\u0676\u0677\5\u02c8\u0165\2\u0677\u0678")
        buf.write("\7\u0215\2\2\u0678\u0679\3\2\2\2\u0679\u067e\5\u0084C")
        buf.write("\2\u067a\u067b\7\u0215\2\2\u067b\u067d\5\u0084C\2\u067c")
        buf.write("\u067a\3\2\2\2\u067d\u0680\3\2\2\2\u067e\u067c\3\2\2\2")
        buf.write("\u067e\u067f\3\2\2\2\u067f\u0681\3\2\2\2\u0680\u067e\3")
        buf.write("\2\2\2\u0681\u0682\7\u0210\2\2\u0682\u0684\3\2\2\2\u0683")
        buf.write("\u0672\3\2\2\2\u0683\u0684\3\2\2\2\u0684\u0685\3\2\2\2")
        buf.write("\u0685\u0686\7\u013e\2\2\u0686\u0687\7\u0155\2\2\u0687")
        buf.write("\u0688\7\16\2\2\u0688\u068b\7\u013d\2\2\u0689\u068a\t")
        buf.write("\3\2\2\u068a\u068c\5\u009aN\2\u068b\u0689\3\2\2\2\u068b")
        buf.write("\u068c\3\2\2\2\u068c}\3\2\2\2\u068d\u068e\t\f\2\2\u068e")
        buf.write("\u068f\7\u00dc\2\2\u068f\u0690\5z>\2\u0690\177\3\2\2\2")
        buf.write("\u0691\u0692\7\u0129\2\2\u0692\u0693\7\u013c\2\2\u0693")
        buf.write("\u0694\7\u020f\2\2\u0694\u0699\5\u0082B\2\u0695\u0696")
        buf.write("\7\u0215\2\2\u0696\u0698\5\u0082B\2\u0697\u0695\3\2\2")
        buf.write("\2\u0698\u069b\3\2\2\2\u0699\u0697\3\2\2\2\u0699\u069a")
        buf.write("\3\2\2\2\u069a\u069c\3\2\2\2\u069b\u0699\3\2\2\2\u069c")
        buf.write("\u069d\7\u0210\2\2\u069d\u0081\3\2\2\2\u069e\u06a1\5\u02e0")
        buf.write("\u0171\2\u069f\u06a1\7e\2\2\u06a0\u069e\3\2\2\2\u06a0")
        buf.write("\u069f\3\2\2\2\u06a1\u0083\3\2\2\2\u06a2\u06a3\5\u0286")
        buf.write("\u0144\2\u06a3\u06a4\5\u02c8\u0165\2\u06a4\u0085\3\2\2")
        buf.write("\2\u06a5\u06a6\7P\2\2\u06a6\u06a7\7\u0156\2\2\u06a7\u06ac")
        buf.write("\5\u0296\u014c\2\u06a8\u06ab\5\u008aF\2\u06a9\u06ab\5")
        buf.write("\u0088E\2\u06aa\u06a8\3\2\2\2\u06aa\u06a9\3\2\2\2\u06ab")
        buf.write("\u06ae\3\2\2\2\u06ac\u06aa\3\2\2\2\u06ac\u06ad\3\2\2\2")
        buf.write("\u06ad\u06af\3\2\2\2\u06ae\u06ac\3\2\2\2\u06af\u06b0\7")
        buf.write("\u021b\2\2\u06b0\u0087\3\2\2\2\u06b1\u06b2\7\u00aa\2\2")
        buf.write("\u06b2\u06b3\7\'\2\2\u06b3\u06c2\7\u0209\2\2\u06b4\u06b5")
        buf.write("\7\u00da\2\2\u06b5\u06c2\7\u0209\2\2\u06b6\u06c2\7\u00f7")
        buf.write("\2\2\u06b7\u06b8\7\u00e0\2\2\u06b8\u06c2\7\u0209\2\2\u06b9")
        buf.write("\u06c2\7\u00f8\2\2\u06ba\u06c2\7W\2\2\u06bb\u06c2\7\u00f5")
        buf.write("\2\2\u06bc\u06bd\7*\2\2\u06bd\u06c2\7\u0209\2\2\u06be")
        buf.write("\u06c2\7\u00f3\2\2\u06bf\u06c2\7\u010e\2\2\u06c0\u06c2")
        buf.write("\7\u00fa\2\2\u06c1\u06b1\3\2\2\2\u06c1\u06b4\3\2\2\2\u06c1")
        buf.write("\u06b6\3\2\2\2\u06c1\u06b7\3\2\2\2\u06c1\u06b9\3\2\2\2")
        buf.write("\u06c1\u06ba\3\2\2\2\u06c1\u06bb\3\2\2\2\u06c1\u06bc\3")
        buf.write("\2\2\2\u06c1\u06be\3\2\2\2\u06c1\u06bf\3\2\2\2\u06c1\u06c0")
        buf.write("\3\2\2\2\u06c2\u0089\3\2\2\2\u06c3\u06c4\7\u016f\2\2\u06c4")
        buf.write("\u06c5\7\u01b0\2\2\u06c5\u06c6\7\u0209\2\2\u06c6\u008b")
        buf.write("\3\2\2\2\u06c7\u06c8\7P\2\2\u06c8\u06c9\7\u017d\2\2\u06c9")
        buf.write("\u06ca\5\u02b4\u015b\2\u06ca\u06cb\7\u020f\2\2\u06cb\u06cc")
        buf.write("\5\u02b2\u015a\2\u06cc\u06d3\5\u02ca\u0166\2\u06cd\u06ce")
        buf.write("\7\u0215\2\2\u06ce\u06cf\5\u02b2\u015a\2\u06cf\u06d0\5")
        buf.write("\u02ca\u0166\2\u06d0\u06d2\3\2\2\2\u06d1\u06cd\3\2\2\2")
        buf.write("\u06d2\u06d5\3\2\2\2\u06d3\u06d1\3\2\2\2\u06d3\u06d4\3")
        buf.write("\2\2\2\u06d4\u06d6\3\2\2\2\u06d5\u06d3\3\2\2\2\u06d6\u06d7")
        buf.write("\7\u0210\2\2\u06d7\u06d8\7\u021b\2\2\u06d8\u008d\3\2\2")
        buf.write("\2\u06d9\u06da\7<\2\2\u06da\u06db\7\u0108\2\2\u06db\u06dc")
        buf.write("\7:\2\2\u06dc\u06dd\5\u02b4\u015b\2\u06dd\u06de\7\u0208")
        buf.write("\2\2\u06de\u06df\5\u02b2\u015a\2\u06df\u06e0\7\u00bd\2")
        buf.write("\2\u06e0\u06e1\5\u02de\u0170\2\u06e1\u008f\3\2\2\2\u06e2")
        buf.write("\u06e5\7P\2\2\u06e3\u06e4\7\u010c\2\2\u06e4\u06e6\7\u013a")
        buf.write("\2\2\u06e5\u06e3\3\2\2\2\u06e5\u06e6\3\2\2\2\u06e6\u06e7")
        buf.write("\3\2\2\2\u06e7\u06e8\7\u0125\2\2\u06e8\u06e9\7\u017c\2")
        buf.write("\2\u06e9\u06ea\5\u02b8\u015d\2\u06ea\u06ee\7\u0096\2\2")
        buf.write("\u06eb\u06ec\5\u027e\u0140\2\u06ec\u06ed\7\u0208\2\2\u06ed")
        buf.write("\u06ef\3\2\2\2\u06ee\u06eb\3\2\2\2\u06ee\u06ef\3\2\2\2")
        buf.write("\u06ef\u06f0\3\2\2\2\u06f0\u06f3\5\u02ba\u015e\2\u06f1")
        buf.write("\u06f2\7\u0217\2\2\u06f2\u06f4\5\u02b0\u0159\2\u06f3\u06f1")
        buf.write("\3\2\2\2\u06f3\u06f4\3\2\2\2\u06f4\u070d\3\2\2\2\u06f5")
        buf.write("\u06f8\7P\2\2\u06f6\u06f7\7\u010c\2\2\u06f7\u06f9\7\u013a")
        buf.write("\2\2\u06f8\u06f6\3\2\2\2\u06f8\u06f9\3\2\2\2\u06f9\u06fa")
        buf.write("\3\2\2\2\u06fa\u06fe\7\u017c\2\2\u06fb\u06fc\5\u027e\u0140")
        buf.write("\2\u06fc\u06fd\7\u0208\2\2\u06fd\u06ff\3\2\2\2\u06fe\u06fb")
        buf.write("\3\2\2\2\u06fe\u06ff\3\2\2\2\u06ff\u0700\3\2\2\2\u0700")
        buf.write("\u0701\5\u02b8\u015d\2\u0701\u0705\7\u0096\2\2\u0702\u0703")
        buf.write("\5\u027e\u0140\2\u0703\u0704\7\u0208\2\2\u0704\u0706\3")
        buf.write("\2\2\2\u0705\u0702\3\2\2\2\u0705\u0706\3\2\2\2\u0706\u0707")
        buf.write("\3\2\2\2\u0707\u070a\5\u02ba\u015e\2\u0708\u0709\7\u0217")
        buf.write("\2\2\u0709\u070b\5\u02b0\u0159\2\u070a\u0708\3\2\2\2\u070a")
        buf.write("\u070b\3\2\2\2\u070b\u070d\3\2\2\2\u070c\u06e2\3\2\2\2")
        buf.write("\u070c\u06f5\3\2\2\2\u070d\u0091\3\2\2\2\u070e\u070f\7")
        buf.write("<\2\2\u070f\u0710\7\u0108\2\2\u0710\u0711\7\u017d\2\2")
        buf.write("\u0711\u0712\5\u02b4\u015b\2\u0712\u0713\7\u00bd\2\2\u0713")
        buf.write("\u0714\5\u02de\u0170\2\u0714\u0093\3\2\2\2\u0715\u0716")
        buf.write("\7\32\2\2\u0716\u0717\5\u00c4c\2\u0717\u0718\7|\2\2\u0718")
        buf.write("\u0719\7\u021b\2\2\u0719\u0095\3\2\2\2\u071a\u071b\7\24")
        buf.write("\2\2\u071b\u071c\t\17\2\2\u071c\u0097\3\2\2\2\u071d\u071e")
        buf.write("\5\u02e0\u0171\2\u071e\u071f\7\u0226\2\2\u071f\u0720\5")
        buf.write("\u01d6\u00ec\2\u0720\u0099\3\2\2\2\u0721\u0724\7\u00c3")
        buf.write("\2\2\u0722\u0725\5\u009cO\2\u0723\u0725\5\u009eP\2\u0724")
        buf.write("\u0722\3\2\2\2\u0724\u0723\3\2\2\2\u0725\u009b\3\2\2\2")
        buf.write("\u0726\u0727\7\u00c0\2\2\u0727\u0728\7\u00e7\2\2\u0728")
        buf.write("\u0729\7\u020b\2\2\u0729\u009d\3\2\2\2\u072a\u072d\7)")
        buf.write("\2\2\u072b\u072c\7\u00e7\2\2\u072c\u072e\7\u020b\2\2\u072d")
        buf.write("\u072b\3\2\2\2\u072d\u072e\3\2\2\2\u072e\u072f\3\2\2\2")
        buf.write("\u072f\u0730\7\u00c9\2\2\u0730\u0732\5\u02e0\u0171\2\u0731")
        buf.write("\u0733\5\u00a0Q\2\u0732\u0731\3\2\2\2\u0732\u0733\3\2")
        buf.write("\2\2\u0733\u0736\3\2\2\2\u0734\u0735\7\u01b0\2\2\u0735")
        buf.write("\u0737\7I\2\2\u0736\u0734\3\2\2\2\u0736\u0737\3\2\2\2")
        buf.write("\u0737\u0739\3\2\2\2\u0738\u073a\5\u00a2R\2\u0739\u0738")
        buf.write("\3\2\2\2\u0739\u073a\3\2\2\2\u073a\u009f\3\2\2\2\u073b")
        buf.write("\u073c\7\6\2\2\u073c\u073d\7\u00a7\2\2\u073d\u073e\7\u020f")
        buf.write("\2\2\u073e\u0743\5\u01d6\u00ec\2\u073f\u0740\7\u0215\2")
        buf.write("\2\u0740\u0742\5\u01d6\u00ec\2\u0741\u073f\3\2\2\2\u0742")
        buf.write("\u0745\3\2\2\2\u0743\u0741\3\2\2\2\u0743\u0744\3\2\2\2")
        buf.write("\u0744\u0746\3\2\2\2\u0745\u0743\3\2\2\2\u0746\u0747\7")
        buf.write("\u0210\2\2\u0747\u00a1\3\2\2\2\u0748\u0749\7\u0117\2\2")
        buf.write("\u0749\u0755\7\u020f\2\2\u074a\u074f\5\u01d6\u00ec\2\u074b")
        buf.write("\u074c\7\u0215\2\2\u074c\u074e\5\u01d6\u00ec\2\u074d\u074b")
        buf.write("\3\2\2\2\u074e\u0751\3\2\2\2\u074f\u074d\3\2\2\2\u074f")
        buf.write("\u0750\3\2\2\2\u0750\u0756\3\2\2\2\u0751\u074f\3\2\2\2")
        buf.write("\u0752\u0753\7\u0208\2\2\u0753\u0754\7\u0208\2\2\u0754")
        buf.write("\u0756\7\u0208\2\2\u0755\u074a\3\2\2\2\u0755\u0752\3\2")
        buf.write("\2\2\u0756\u0757\3\2\2\2\u0757\u0758\7\u0210\2\2\u0758")
        buf.write("\u00a3\3\2\2\2\u0759\u075d\5\u0286\u0144\2\u075a\u075c")
        buf.write("\t\20\2\2\u075b\u075a\3\2\2\2\u075c\u075f\3\2\2\2\u075d")
        buf.write("\u075b\3\2\2\2\u075d\u075e\3\2\2\2\u075e\u0761\3\2\2\2")
        buf.write("\u075f\u075d\3\2\2\2\u0760\u0762\5\u02c8\u0165\2\u0761")
        buf.write("\u0760\3\2\2\2\u0761\u0762\3\2\2\2\u0762\u0764\3\2\2\2")
        buf.write("\u0763\u0765\5\u00a6T\2\u0764\u0763\3\2\2\2\u0764\u0765")
        buf.write("\3\2\2\2\u0765\u00a5\3\2\2\2\u0766\u0767\t\21\2\2\u0767")
        buf.write("\u0768\5\u01d6\u00ec\2\u0768\u00a7\3\2\2\2\u0769\u0774")
        buf.write("\5\u00aaV\2\u076a\u0774\5\u00acW\2\u076b\u0774\5\u00ae")
        buf.write("X\2\u076c\u0774\5\u00b2Z\2\u076d\u0774\5\u00b4[\2\u076e")
        buf.write("\u0774\5\u00bc_\2\u076f\u0774\5\36\20\2\u0770\u0774\5")
        buf.write(" \21\2\u0771\u0774\5&\24\2\u0772\u0774\5$\23\2\u0773\u0769")
        buf.write("\3\2\2\2\u0773\u076a\3\2\2\2\u0773\u076b\3\2\2\2\u0773")
        buf.write("\u076c\3\2\2\2\u0773\u076d\3\2\2\2\u0773\u076e\3\2\2\2")
        buf.write("\u0773\u076f\3\2\2\2\u0773\u0770\3\2\2\2\u0773\u0771\3")
        buf.write("\2\2\2\u0773\u0772\3\2\2\2\u0774\u00a9\3\2\2\2\u0775\u0777")
        buf.write("\5\u02e0\u0171\2\u0776\u0778\7D\2\2\u0777\u0776\3\2\2")
        buf.write("\2\u0777\u0778\3\2\2\2\u0778\u0779\3\2\2\2\u0779\u077c")
        buf.write("\5\u02c8\u0165\2\u077a\u077b\7\u00fc\2\2\u077b\u077d\7")
        buf.write("\u00fe\2\2\u077c\u077a\3\2\2\2\u077c\u077d\3\2\2\2\u077d")
        buf.write("\u077f\3\2\2\2\u077e\u0780\5\u00a6T\2\u077f\u077e\3\2")
        buf.write("\2\2\u077f\u0780\3\2\2\2\u0780\u0781\3\2\2\2\u0781\u0782")
        buf.write("\7\u021b\2\2\u0782\u0785\3\2\2\2\u0783\u0785\5\u02e0\u0171")
        buf.write("\2\u0784\u0775\3\2\2\2\u0784\u0783\3\2\2\2\u0785\u00ab")
        buf.write("\3\2\2\2\u0786\u0787\7\u0179\2\2\u0787\u0788\5\u02e0\u0171")
        buf.write("\2\u0788\u0789\7\u00bd\2\2\u0789\u078f\5\u02c8\u0165\2")
        buf.write("\u078a\u078b\7\u0130\2\2\u078b\u078c\5\u01d6\u00ec\2\u078c")
        buf.write("\u078d\7\u0207\2\2\u078d\u078e\5\u01d6\u00ec\2\u078e\u0790")
        buf.write("\3\2\2\2\u078f\u078a\3\2\2\2\u078f\u0790\3\2\2\2\u0790")
        buf.write("\u0793\3\2\2\2\u0791\u0792\7\u00fc\2\2\u0792\u0794\7\u00fe")
        buf.write("\2\2\u0793\u0791\3\2\2\2\u0793\u0794\3\2\2\2\u0794\u0795")
        buf.write("\3\2\2\2\u0795\u0796\7\u021b\2\2\u0796\u00ad\3\2\2\2\u0797")
        buf.write("\u0798\7U\2\2\u0798\u07a4\5\u02e0\u0171\2\u0799\u079a")
        buf.write("\7\u020f\2\2\u079a\u079f\5\u00b0Y\2\u079b\u079c\7\u0215")
        buf.write("\2\2\u079c\u079e\5\u00b0Y\2\u079d\u079b\3\2\2\2\u079e")
        buf.write("\u07a1\3\2\2\2\u079f\u079d\3\2\2\2\u079f\u07a0\3\2\2\2")
        buf.write("\u07a0\u07a2\3\2\2\2\u07a1\u079f\3\2\2\2\u07a2\u07a3\7")
        buf.write("\u0210\2\2\u07a3\u07a5\3\2\2\2\u07a4\u0799\3\2\2\2\u07a4")
        buf.write("\u07a5\3\2\2\2\u07a5\u07a8\3\2\2\2\u07a6\u07a7\7\u013e")
        buf.write("\2\2\u07a7\u07a9\5\u02c8\u0165\2\u07a8\u07a6\3\2\2\2\u07a8")
        buf.write("\u07a9\3\2\2\2\u07a9\u07ac\3\2\2\2\u07aa\u07ab\7\u00bd")
        buf.write("\2\2\u07ab\u07ad\5\u0118\u008d\2\u07ac\u07aa\3\2\2\2\u07ac")
        buf.write("\u07ad\3\2\2\2\u07ad\u07ae\3\2\2\2\u07ae\u07af\7\u021b")
        buf.write("\2\2\u07af\u00af\3\2\2\2\u07b0\u07b5\5\u0286\u0144\2\u07b1")
        buf.write("\u07b3\7\u00a7\2\2\u07b2\u07b1\3\2\2\2\u07b2\u07b3\3\2")
        buf.write("\2\2\u07b3\u07b4\3\2\2\2\u07b4\u07b6\5\u02c8\u0165\2\u07b5")
        buf.write("\u07b2\3\2\2\2\u07b5\u07b6\3\2\2\2\u07b6\u07b8\3\2\2\2")
        buf.write("\u07b7\u07b9\5\u00a6T\2\u07b8\u07b7\3\2\2\2\u07b8\u07b9")
        buf.write("\3\2\2\2\u07b9\u00b1\3\2\2\2\u07ba\u07bb\5\u02e0\u0171")
        buf.write("\2\u07bb\u07bc\7\u0082\2\2\u07bc\u07bd\7\u021b\2\2\u07bd")
        buf.write("\u00b3\3\2\2\2\u07be\u07dd\7\u0129\2\2\u07bf\u07de\7\u0159")
        buf.write("\2\2\u07c0\u07de\7\27\2\2\u07c1\u07c2\7\u0083\2\2\u07c2")
        buf.write("\u07c3\7\u020f\2\2\u07c3\u07c4\5\u0298\u014d\2\u07c4\u07c5")
        buf.write("\7\u0215\2\2\u07c5\u07c6\5\u02dc\u016f\2\u07c6\u07c7\7")
        buf.write("\u0210\2\2\u07c7\u07de\3\2\2\2\u07c8\u07c9\7\u00b1\2\2")
        buf.write("\u07c9\u07ca\7\u020f\2\2\u07ca\u07cb\5\u02e0\u0171\2\u07cb")
        buf.write("\u07cc\7\u0215\2\2\u07cc\u07cd\5\u01d6\u00ec\2\u07cd\u07ce")
        buf.write("\7\u0210\2\2\u07ce\u07de\3\2\2\2\u07cf\u07d0\7\u013c\2")
        buf.write("\2\u07d0\u07d3\7\u020f\2\2\u07d1\u07d4\5\u02e0\u0171\2")
        buf.write("\u07d2\u07d4\7e\2\2\u07d3\u07d1\3\2\2\2\u07d3\u07d2\3")
        buf.write("\2\2\2\u07d4\u07d7\3\2\2\2\u07d5\u07d6\7\u0215\2\2\u07d6")
        buf.write("\u07d8\5\u02e0\u0171\2\u07d7\u07d5\3\2\2\2\u07d8\u07d9")
        buf.write("\3\2\2\2\u07d9\u07d7\3\2\2\2\u07d9\u07da\3\2\2\2\u07da")
        buf.write("\u07db\3\2\2\2\u07db\u07dc\7\u0210\2\2\u07dc\u07de\3\2")
        buf.write("\2\2\u07dd\u07bf\3\2\2\2\u07dd\u07c0\3\2\2\2\u07dd\u07c1")
        buf.write("\3\2\2\2\u07dd\u07c8\3\2\2\2\u07dd\u07cf\3\2\2\2\u07de")
        buf.write("\u07df\3\2\2\2\u07df\u07e0\7\u021b\2\2\u07e0\u00b5\3\2")
        buf.write("\2\2\u07e1\u07e2\7\u0134\2\2\u07e2\u07e3\7\u020f\2\2\u07e3")
        buf.write("\u07e8\5\u00b8]\2\u07e4\u07e5\7\u0215\2\2\u07e5\u07e7")
        buf.write("\5\u00b8]\2\u07e6\u07e4\3\2\2\2\u07e7\u07ea\3\2\2\2\u07e8")
        buf.write("\u07e6\3\2\2\2\u07e8\u07e9\3\2\2\2\u07e9\u07eb\3\2\2\2")
        buf.write("\u07ea\u07e8\3\2\2\2\u07eb\u07ec\7\u0210\2\2\u07ec\u00b7")
        buf.write("\3\2\2\2\u07ed\u07ef\5\u02b2\u015a\2\u07ee\u07f0\5\u02c8")
        buf.write("\u0165\2\u07ef\u07ee\3\2\2\2\u07ef\u07f0\3\2\2\2\u07f0")
        buf.write("\u07f3\3\2\2\2\u07f1\u07f2\7\u00fc\2\2\u07f2\u07f4\7\u00fe")
        buf.write("\2\2\u07f3\u07f1\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u07f6")
        buf.write("\3\2\2\2\u07f5\u07f7\5\u00a6T\2\u07f6\u07f5\3\2\2\2\u07f6")
        buf.write("\u07f7\3\2\2\2\u07f7\u00b9\3\2\2\2\u07f8\u07f9\7\u0135")
        buf.write("\2\2\u07f9\u07fc\7U\2\2\u07fa\u07fb\7\u013e\2\2\u07fb")
        buf.write("\u07fd\5\u02c8\u0165\2\u07fc\u07fa\3\2\2\2\u07fc\u07fd")
        buf.write("\3\2\2\2\u07fd\u00bb\3\2\2\2\u07fe\u07ff\7\u0191\2\2\u07ff")
        buf.write("\u0800\5\u02e0\u0171\2\u0800\u0805\7\u00bd\2\2\u0801\u0806")
        buf.write("\5\u00be`\2\u0802\u0806\5\u00c2b\2\u0803\u0806\5\u00b6")
        buf.write("\\\2\u0804\u0806\5\u00ba^\2\u0805\u0801\3\2\2\2\u0805")
        buf.write("\u0802\3\2\2\2\u0805\u0803\3\2\2\2\u0805\u0804\3\2\2\2")
        buf.write("\u0806\u0807\3\2\2\2\u0807\u0808\7\u021b\2\2\u0808\u00bd")
        buf.write("\3\2\2\2\u0809\u080a\7\u017d\2\2\u080a\u080b\7\u0104\2")
        buf.write("\2\u080b\u080d\5\u02c8\u0165\2\u080c\u080e\5\u00c0a\2")
        buf.write("\u080d\u080c\3\2\2\2\u080d\u080e\3\2\2\2\u080e\u0811\3")
        buf.write("\2\2\2\u080f\u0810\7\u00fc\2\2\u0810\u0812\7\u00fe\2\2")
        buf.write("\u0811\u080f\3\2\2\2\u0811\u0812\3\2\2\2\u0812\u00bf\3")
        buf.write("\2\2\2\u0813\u0816\7\u00ad\2\2\u0814\u0816\7\u00ac\2\2")
        buf.write("\u0815\u0813\3\2\2\2\u0815\u0814\3\2\2\2\u0816\u0817\3")
        buf.write("\2\2\2\u0817\u0818\7\'\2\2\u0818\u0819\5\u02c8\u0165\2")
        buf.write("\u0819\u00c1\3\2\2\2\u081a\u081e\7\u01a5\2\2\u081b\u081c")
        buf.write("\7\u01a6\2\2\u081c\u081e\7\r\2\2\u081d\u081a\3\2\2\2\u081d")
        buf.write("\u081b\3\2\2\2\u081e\u081f\3\2\2\2\u081f\u0820\7\u020f")
        buf.write("\2\2\u0820\u0821\5\u01d6\u00ec\2\u0821\u0822\7\u0210\2")
        buf.write("\2\u0822\u0823\7\u0104\2\2\u0823\u0826\5\u02c8\u0165\2")
        buf.write("\u0824\u0825\7\u00fc\2\2\u0825\u0827\7\u00fe\2\2\u0826")
        buf.write("\u0824\3\2\2\2\u0826\u0827\3\2\2\2\u0827\u00c3\3\2\2\2")
        buf.write("\u0828\u0829\5\u00c8e\2\u0829\u082a\t\22\2\2\u082a\u082d")
        buf.write("\3\2\2\2\u082b\u082d\5\u00c6d\2\u082c\u0828\3\2\2\2\u082c")
        buf.write("\u082b\3\2\2\2\u082d\u082e\3\2\2\2\u082e\u082c\3\2\2\2")
        buf.write("\u082e\u082f\3\2\2\2\u082f\u00c5\3\2\2\2\u0830\u0831\7")
        buf.write("\u021d\2\2\u0831\u0832\7\u021d\2\2\u0832\u0833\5\u0292")
        buf.write("\u014a\2\u0833\u0834\7\u0223\2\2\u0834\u0835\7\u0223\2")
        buf.write("\2\u0835\u00c7\3\2\2\2\u0836\u0837\7P\2\2\u0837\u0851")
        buf.write("\5\2\2\2\u0838\u0839\7\t\2\2\u0839\u0851\5\2\2\2\u083a")
        buf.write("\u083c\7\u009d\2\2\u083b\u083d\7\b\2\2\u083c\u083b\3\2")
        buf.write("\2\2\u083c\u083d\3\2\2\2\u083d\u083e\3\2\2\2\u083e\u0851")
        buf.write("\5\2\2\2\u083f\u0840\7\u0190\2\2\u0840\u0851\5\2\2\2\u0841")
        buf.write("\u0851\5\u00eex\2\u0842\u0851\5\u00f4{\2\u0843\u0851\5")
        buf.write("\u00caf\2\u0844\u0851\5\u00ccg\2\u0845\u0851\5\u00ceh")
        buf.write("\2\u0846\u0851\5\u00d0i\2\u0847\u0851\5\u00d2j\2\u0848")
        buf.write("\u0851\5\u00d8m\2\u0849\u0851\5\u00dco\2\u084a\u0851\5")
        buf.write("\u00e6t\2\u084b\u0851\5\u00e8u\2\u084c\u0851\5\u00eav")
        buf.write("\2\u084d\u0851\5\u020a\u0106\2\u084e\u0851\5\u00f6|\2")
        buf.write("\u084f\u0851\5\u00ecw\2\u0850\u0836\3\2\2\2\u0850\u0838")
        buf.write("\3\2\2\2\u0850\u083a\3\2\2\2\u0850\u083f\3\2\2\2\u0850")
        buf.write("\u0841\3\2\2\2\u0850\u0842\3\2\2\2\u0850\u0843\3\2\2\2")
        buf.write("\u0850\u0844\3\2\2\2\u0850\u0845\3\2\2\2\u0850\u0846\3")
        buf.write("\2\2\2\u0850\u0847\3\2\2\2\u0850\u0848\3\2\2\2\u0850\u0849")
        buf.write("\3\2\2\2\u0850\u084a\3\2\2\2\u0850\u084b\3\2\2\2\u0850")
        buf.write("\u084c\3\2\2\2\u0850\u084d\3\2\2\2\u0850\u084e\3\2\2\2")
        buf.write("\u0850\u084f\3\2\2\2\u0851\u00c9\3\2\2\2\u0852\u0855\5")
        buf.write("\u02d2\u016a\2\u0853\u0855\5\u02d0\u0169\2\u0854\u0852")
        buf.write("\3\2\2\2\u0854\u0853\3\2\2\2\u0855\u0856\3\2\2\2\u0856")
        buf.write("\u0857\7\u0218\2\2\u0857\u0858\5\u01d6\u00ec\2\u0858\u00cb")
        buf.write("\3\2\2\2\u0859\u085b\7J\2\2\u085a\u085c\5\u0292\u014a")
        buf.write("\2\u085b\u085a\3\2\2\2\u085b\u085c\3\2\2\2\u085c\u085f")
        buf.write("\3\2\2\2\u085d\u085e\7\u01ac\2\2\u085e\u0860\5\u01d4\u00eb")
        buf.write("\2\u085f\u085d\3\2\2\2\u085f\u0860\3\2\2\2\u0860\u00cd")
        buf.write("\3\2\2\2\u0861\u0863\7\u0089\2\2\u0862\u0864\5\u0292\u014a")
        buf.write("\2\u0863\u0862\3\2\2\2\u0863\u0864\3\2\2\2\u0864\u0867")
        buf.write("\3\2\2\2\u0865\u0866\7\u01ac\2\2\u0866\u0868\5\u01d4\u00eb")
        buf.write("\2\u0867\u0865\3\2\2\2\u0867\u0868\3\2\2\2\u0868\u00cf")
        buf.write("\3\2\2\2\u0869\u086a\7\u009c\2\2\u086a\u086b\5\u0292\u014a")
        buf.write("\2\u086b\u00d1\3\2\2\2\u086c\u086d\7\u00a4\2\2\u086d\u086e")
        buf.write("\5\u01d4\u00eb\2\u086e\u086f\7\u017f\2\2\u086f\u0873\5")
        buf.write("\u00c4c\2\u0870\u0872\5\u00d4k\2\u0871\u0870\3\2\2\2\u0872")
        buf.write("\u0875\3\2\2\2\u0873\u0871\3\2\2\2\u0873\u0874\3\2\2\2")
        buf.write("\u0874\u0877\3\2\2\2\u0875\u0873\3\2\2\2\u0876\u0878\5")
        buf.write("\u00d6l\2\u0877\u0876\3\2\2\2\u0877\u0878\3\2\2\2\u0878")
        buf.write("\u0879\3\2\2\2\u0879\u087a\7|\2\2\u087a\u087b\7\u00a4")
        buf.write("\2\2\u087b\u00d3\3\2\2\2\u087c\u087d\7x\2\2\u087d\u087e")
        buf.write("\5\u01d4\u00eb\2\u087e\u087f\7\u017f\2\2\u087f\u0880\5")
        buf.write("\u00c4c\2\u0880\u00d5\3\2\2\2\u0881\u0882\7w\2\2\u0882")
        buf.write("\u0883\5\u00c4c\2\u0883\u00d7\3\2\2\2\u0884\u0886\5\u0292")
        buf.write("\u014a\2\u0885\u0884\3\2\2\2\u0885\u0886\3\2\2\2\u0886")
        buf.write("\u088b\3\2\2\2\u0887\u0888\7\u01af\2\2\u0888\u088c\5\u01d4")
        buf.write("\u00eb\2\u0889\u088a\7\u0096\2\2\u088a\u088c\5\u00dan")
        buf.write("\2\u088b\u0887\3\2\2\2\u088b\u0889\3\2\2\2\u088b\u088c")
        buf.write("\3\2\2\2\u088c\u088d\3\2\2\2\u088d\u088e\7\u00d6\2\2\u088e")
        buf.write("\u088f\5\u00c4c\2\u088f\u0890\7|\2\2\u0890\u0892\7\u00d6")
        buf.write("\2\2\u0891\u0893\5\u0292\u014a\2\u0892\u0891\3\2\2\2\u0892")
        buf.write("\u0893\3\2\2\2\u0893\u00d9\3\2\2\2\u0894\u08b3\5\u02a8")
        buf.write("\u0155\2\u0895\u0896\5\u02a8\u0155\2\u0896\u0898\7\u00a7")
        buf.write("\2\2\u0897\u0899\7\u0141\2\2\u0898\u0897\3\2\2\2\u0898")
        buf.write("\u0899\3\2\2\2\u0899\u08b3\3\2\2\2\u089a\u089b\5\u02a8")
        buf.write("\u0155\2\u089b\u089c\7\u00a7\2\2\u089c\u089d\7\u0209\2")
        buf.write("\2\u089d\u089e\7\u0207\2\2\u089e\u089f\7\u0209\2\2\u089f")
        buf.write("\u08b3\3\2\2\2\u08a0\u08a1\5\u02a8\u0155\2\u08a1\u08a2")
        buf.write("\7\u00a7\2\2\u08a2\u08a3\7\u0209\2\2\u08a3\u08a4\7\u0207")
        buf.write("\2\2\u08a4\u08a5\5\u02a8\u0155\2\u08a5\u08b3\3\2\2\2\u08a6")
        buf.write("\u08a7\5\u02ac\u0157\2\u08a7\u08b0\7\u00a7\2\2\u08a8\u08aa")
        buf.write("\5\u02aa\u0156\2\u08a9\u08ab\5\u01d2\u00ea\2\u08aa\u08a9")
        buf.write("\3\2\2\2\u08aa\u08ab\3\2\2\2\u08ab\u08b1\3\2\2\2\u08ac")
        buf.write("\u08ad\7\u020f\2\2\u08ad\u08ae\5\u0118\u008d\2\u08ae\u08af")
        buf.write("\7\u0210\2\2\u08af\u08b1\3\2\2\2\u08b0\u08a8\3\2\2\2\u08b0")
        buf.write("\u08ac\3\2\2\2\u08b1\u08b3\3\2\2\2\u08b2\u0894\3\2\2\2")
        buf.write("\u08b2\u0895\3\2\2\2\u08b2\u089a\3\2\2\2\u08b2\u08a0\3")
        buf.write("\2\2\2\u08b2\u08a6\3\2\2\2\u08b3\u00db\3\2\2\2\u08b4\u08b5")
        buf.write("\7\u0097\2\2\u08b5\u08b6\5\u02a8\u0155\2\u08b6\u08b7\7")
        buf.write("\u00a7\2\2\u08b7\u08b8\5\u00dep\2\u08b8\u08bb\5\u00f6")
        buf.write("|\2\u08b9\u08ba\7\u014b\2\2\u08ba\u08bc\7\u0084\2\2\u08bb")
        buf.write("\u08b9\3\2\2\2\u08bb\u08bc\3\2\2\2\u08bc\u00dd\3\2\2\2")
        buf.write("\u08bd\u08be\5\u00e2r\2\u08be\u08bf\7\u0207\2\2\u08bf")
        buf.write("\u08c0\5\u00e4s\2\u08c0\u08cb\3\2\2\2\u08c1\u08c2\7\u00af")
        buf.write("\2\2\u08c2\u08c3\7\u0104\2\2\u08c3\u08c5\5\u02ae\u0158")
        buf.write("\2\u08c4\u08c6\5\u00e0q\2\u08c5\u08c4\3\2\2\2\u08c5\u08c6")
        buf.write("\3\2\2\2\u08c6\u08cb\3\2\2\2\u08c7\u08c8\7\u01a1\2\2\u08c8")
        buf.write("\u08c9\7\u0104\2\2\u08c9\u08cb\5\u02a8\u0155\2\u08ca\u08bd")
        buf.write("\3\2\2\2\u08ca\u08c1\3\2\2\2\u08ca\u08c7\3\2\2\2\u08cb")
        buf.write("\u00df\3\2\2\2\u08cc\u08cd\7\33\2\2\u08cd\u08ce\5\u00e2")
        buf.write("r\2\u08ce\u08cf\7\13\2\2\u08cf\u08d0\5\u00e4s\2\u08d0")
        buf.write("\u00e1\3\2\2\2\u08d1\u08d2\5\u01f2\u00fa\2\u08d2\u00e3")
        buf.write("\3\2\2\2\u08d3\u08d4\5\u01f2\u00fa\2\u08d4\u00e5\3\2\2")
        buf.write("\2\u08d5\u08d6\7\u00fe\2\2\u08d6\u00e7\3\2\2\2\u08d7\u08d9")
        buf.write("\7\u012f\2\2\u08d8\u08da\5\u0298\u014d\2\u08d9\u08d8\3")
        buf.write("\2\2\2\u08d9\u08da\3\2\2\2\u08da\u00e9\3\2\2\2\u08db\u08dd")
        buf.write("\7\u013e\2\2\u08dc\u08de\5\u01d6\u00ec\2\u08dd\u08dc\3")
        buf.write("\2\2\2\u08dd\u08de\3\2\2\2\u08de\u00eb\3\2\2\2\u08df\u08e1")
        buf.write("\7+\2\2\u08e0\u08df\3\2\2\2\u08e0\u08e1\3\2\2\2\u08e1")
        buf.write("\u08e2\3\2\2\2\u08e2\u08e4\5\u0280\u0141\2\u08e3\u08e5")
        buf.write("\5\u02be\u0160\2\u08e4\u08e3\3\2\2\2\u08e4\u08e5\3\2\2")
        buf.write("\2\u08e5\u00ed\3\2\2\2\u08e6\u08e7\7\32\2\2\u08e7\u08ee")
        buf.write("\5\u00c4c\2\u08e8\u08ea\7\u0082\2\2\u08e9\u08eb\5\u00f0")
        buf.write("y\2\u08ea\u08e9\3\2\2\2\u08eb\u08ec\3\2\2\2\u08ec\u08ea")
        buf.write("\3\2\2\2\u08ec\u08ed\3\2\2\2\u08ed\u08ef\3\2\2\2\u08ee")
        buf.write("\u08e8\3\2\2\2\u08ee\u08ef\3\2\2\2\u08ef\u08f0\3\2\2\2")
        buf.write("\u08f0\u08f2\7|\2\2\u08f1\u08f3\5\u0292\u014a\2\u08f2")
        buf.write("\u08f1\3\2\2\2\u08f2\u08f3\3\2\2\2\u08f3\u00ef\3\2\2\2")
        buf.write("\u08f4\u08f5\7\u01ac\2\2\u08f5\u08fa\5\u0298\u014d\2\u08f6")
        buf.write("\u08f7\7\u010c\2\2\u08f7\u08f9\5\u0298\u014d\2\u08f8\u08f6")
        buf.write("\3\2\2\2\u08f9\u08fc\3\2\2\2\u08fa\u08f8\3\2\2\2\u08fa")
        buf.write("\u08fb\3\2\2\2\u08fb\u08fd\3\2\2\2\u08fc\u08fa\3\2\2\2")
        buf.write("\u08fd\u08fe\7\u017f\2\2\u08fe\u08ff\5\u00c4c\2\u08ff")
        buf.write("\u00f1\3\2\2\2\u0900\u0902\7b\2\2\u0901\u0900\3\2\2\2")
        buf.write("\u0901\u0902\3\2\2\2\u0902\u0904\3\2\2\2\u0903\u0905\5")
        buf.write("\u00a8U\2\u0904\u0903\3\2\2\2\u0905\u0906\3\2\2\2\u0906")
        buf.write("\u0904\3\2\2\2\u0906\u0907\3\2\2\2\u0907\u0909\3\2\2\2")
        buf.write("\u0908\u0901\3\2\2\2\u0908\u0909\3\2\2\2\u0909\u090a\3")
        buf.write("\2\2\2\u090a\u090b\5\u00eex\2\u090b\u00f3\3\2\2\2\u090c")
        buf.write("\u090e\7b\2\2\u090d\u090c\3\2\2\2\u090d\u090e\3\2\2\2")
        buf.write("\u090e\u0910\3\2\2\2\u090f\u0911\5\u00a8U\2\u0910\u090f")
        buf.write("\3\2\2\2\u0911\u0912\3\2\2\2\u0912\u0910\3\2\2\2\u0912")
        buf.write("\u0913\3\2\2\2\u0913\u0914\3\2\2\2\u0914\u0915\5\u00ee")
        buf.write("x\2\u0915\u00f5\3\2\2\2\u0916\u091b\5\u00f8}\2\u0917\u091b")
        buf.write("\5\u00fc\177\2\u0918\u091b\5\u00fe\u0080\2\u0919\u091b")
        buf.write("\5\u0108\u0085\2\u091a\u0916\3\2\2\2\u091a\u0917\3\2\2")
        buf.write("\2\u091a\u0918\3\2\2\2\u091a\u0919\3\2\2\2\u091b\u00f7")
        buf.write("\3\2\2\2\u091c\u091d\7\u0087\2\2\u091d\u091e\7\u00a6\2")
        buf.write("\2\u091e\u0928\5\u01d6\u00ec\2\u091f\u0921\5\u0270\u0139")
        buf.write("\2\u0920\u0922\5\u0236\u011c\2\u0921\u0920\3\2\2\2\u0921")
        buf.write("\u0922\3\2\2\2\u0922\u0929\3\2\2\2\u0923\u0925\5\u0236")
        buf.write("\u011c\2\u0924\u0926\5\u00fa~\2\u0925\u0924\3\2\2\2\u0925")
        buf.write("\u0926\3\2\2\2\u0926\u0929\3\2\2\2\u0927\u0929\5\u00fa")
        buf.write("~\2\u0928\u091f\3\2\2\2\u0928\u0923\3\2\2\2\u0928\u0927")
        buf.write("\3\2\2\2\u0928\u0929\3\2\2\2\u0929\u00f9\3\2\2\2\u092a")
        buf.write("\u092b\t\23\2\2\u092b\u092c\5\u0270\u0139\2\u092c\u00fb")
        buf.write("\3\2\2\2\u092d\u0932\5\u0118\u008d\2\u092e\u0932\5\u018e")
        buf.write("\u00c8\2\u092f\u0932\5\u0194\u00cb\2\u0930\u0932\5\u0196")
        buf.write("\u00cc\2\u0931\u092d\3\2\2\2\u0931\u092e\3\2\2\2\u0931")
        buf.write("\u092f\3\2\2\2\u0931\u0930\3\2\2\2\u0932\u00fd\3\2\2\2")
        buf.write("\u0933\u0938\5\u0100\u0081\2\u0934\u0938\5\u0102\u0082")
        buf.write("\2\u0935\u0938\5\u0104\u0083\2\u0936\u0938\5\u0106\u0084")
        buf.write("\2\u0937\u0933\3\2\2\2\u0937\u0934\3\2\2\2\u0937\u0935")
        buf.write("\3\2\2\2\u0937\u0936\3\2\2\2\u0938\u00ff\3\2\2\2\u0939")
        buf.write("\u093a\7\66\2\2\u093a\u093b\5\u02aa\u0156\2\u093b\u0101")
        buf.write("\3\2\2\2\u093c\u093d\7\u010a\2\2\u093d\u093f\5\u02aa\u0156")
        buf.write("\2\u093e\u0940\5\u01d2\u00ea\2\u093f\u093e\3\2\2\2\u093f")
        buf.write("\u0940\3\2\2\2\u0940\u0103\3\2\2\2\u0941\u0942\7\u008f")
        buf.write("\2\2\u0942\u0957\5\u02aa\u0156\2\u0943\u0944\7\u00bb\2")
        buf.write("\2\u0944\u0949\5\u02a6\u0154\2\u0945\u0946\7\u0215\2\2")
        buf.write("\u0946\u0948\5\u02a6\u0154\2\u0947\u0945\3\2\2\2\u0948")
        buf.write("\u094b\3\2\2\2\u0949\u0947\3\2\2\2\u0949\u094a\3\2\2\2")
        buf.write("\u094a\u0958\3\2\2\2\u094b\u0949\3\2\2\2\u094c\u094d\7")
        buf.write("&\2\2\u094d\u094e\79\2\2\u094e\u094f\7\u00bb\2\2\u094f")
        buf.write("\u0954\5\u02a6\u0154\2\u0950\u0951\7\u0215\2\2\u0951\u0953")
        buf.write("\5\u02a6\u0154\2\u0952\u0950\3\2\2\2\u0953\u0956\3\2\2")
        buf.write("\2\u0954\u0952\3\2\2\2\u0954\u0955\3\2\2\2\u0955\u0958")
        buf.write("\3\2\2\2\u0956\u0954\3\2\2\2\u0957\u0943\3\2\2\2\u0957")
        buf.write("\u094c\3\2\2\2\u0958\u0105\3\2\2\2\u0959\u095a\7\u010a")
        buf.write("\2\2\u095a\u095b\5\u02a6\u0154\2\u095b\u095e\7\u0096\2")
        buf.write("\2\u095c\u095f\5\u0118\u008d\2\u095d\u095f\5\u01d6\u00ec")
        buf.write("\2\u095e\u095c\3\2\2\2\u095e\u095d\3\2\2\2\u095f\u0961")
        buf.write("\3\2\2\2\u0960\u0962\5\u0236\u011c\2\u0961\u0960\3\2\2")
        buf.write("\2\u0961\u0962\3\2\2\2\u0962\u0107\3\2\2\2\u0963\u0969")
        buf.write("\5\u010a\u0086\2\u0964\u0969\5\u010c\u0087\2\u0965\u0969")
        buf.write("\5\u010e\u0088\2\u0966\u0969\5\u0112\u008a\2\u0967\u0969")
        buf.write("\5\u0114\u008b\2\u0968\u0963\3\2\2\2\u0968\u0964\3\2\2")
        buf.write("\2\u0968\u0965\3\2\2\2\u0968\u0966\3\2\2\2\u0968\u0967")
        buf.write("\3\2\2\2\u0969\u0109\3\2\2\2\u096a\u096b\7\u015c\2\2\u096b")
        buf.write("\u0979\7\u018b\2\2\u096c\u096d\7\u0132\2\2\u096d\u097a")
        buf.write("\t\24\2\2\u096e\u096f\7\u00be\2\2\u096f\u0973\7\u00c8")
        buf.write("\2\2\u0970\u0974\7\u0158\2\2\u0971\u0972\7\u0132\2\2\u0972")
        buf.write("\u0974\7>\2\2\u0973\u0970\3\2\2\2\u0973\u0971\3\2\2\2")
        buf.write("\u0974\u097a\3\2\2\2\u0975\u0976\7\u019d\2\2\u0976\u0977")
        buf.write("\7\u0144\2\2\u0977\u0978\7\u0153\2\2\u0978\u097a\5\u027a")
        buf.write("\u013e\2\u0979\u096c\3\2\2\2\u0979\u096e\3\2\2\2\u0979")
        buf.write("\u0975\3\2\2\2\u0979\u097a\3\2\2\2\u097a\u097d\3\2\2\2")
        buf.write("\u097b\u097c\7\u00e7\2\2\u097c\u097e\5\u02de\u0170\2\u097d")
        buf.write("\u097b\3\2\2\2\u097d\u097e\3\2\2\2\u097e\u010b\3\2\2\2")
        buf.write("\u097f\u0980\7\u015c\2\2\u0980\u098a\t\25\2\2\u0981\u098b")
        buf.write("\7\b\2\2\u0982\u0987\5\u0290\u0149\2\u0983\u0984\7\u0215")
        buf.write("\2\2\u0984\u0986\5\u0290\u0149\2\u0985\u0983\3\2\2\2\u0986")
        buf.write("\u0989\3\2\2\2\u0987\u0985\3\2\2\2\u0987\u0988\3\2\2\2")
        buf.write("\u0988\u098b\3\2\2\2\u0989\u0987\3\2\2\2\u098a\u0981\3")
        buf.write("\2\2\2\u098a\u0982\3\2\2\2\u098b\u098c\3\2\2\2\u098c\u098d")
        buf.write("\t\26\2\2\u098d\u010d\3\2\2\2\u098e\u0990\7=\2\2\u098f")
        buf.write("\u0991\7\u01b2\2\2\u0990\u098f\3\2\2\2\u0990\u0991\3\2")
        buf.write("\2\2\u0991\u099f\3\2\2\2\u0992\u0993\7<\2\2\u0993\u09a0")
        buf.write("\5\u01d6\u00ec\2\u0994\u099d\7\u0098\2\2\u0995\u0996\7")
        buf.write("L\2\2\u0996\u099e\5\u01d6\u00ec\2\u0997\u099e\7M\2\2\u0998")
        buf.write("\u099b\5\u01d6\u00ec\2\u0999\u099a\7\u0215\2\2\u099a\u099c")
        buf.write("\5\u01d6\u00ec\2\u099b\u0999\3\2\2\2\u099b\u099c\3\2\2")
        buf.write("\2\u099c\u099e\3\2\2\2\u099d\u0995\3\2\2\2\u099d\u0997")
        buf.write("\3\2\2\2\u099d\u0998\3\2\2\2\u099e\u09a0\3\2\2\2\u099f")
        buf.write("\u0992\3\2\2\2\u099f\u0994\3\2\2\2\u099f\u09a0\3\2\2\2")
        buf.write("\u09a0\u09a2\3\2\2\2\u09a1\u09a3\5\u0110\u0089\2\u09a2")
        buf.write("\u09a1\3\2\2\2\u09a2\u09a3\3\2\2\2\u09a3\u010f\3\2\2\2")
        buf.write("\u09a4\u09a6\7\u01b3\2\2\u09a5\u09a7\t\27\2\2\u09a6\u09a5")
        buf.write("\3\2\2\2\u09a6\u09a7\3\2\2\2\u09a7\u09a9\3\2\2\2\u09a8")
        buf.write("\u09aa\t\30\2\2\u09a9\u09a8\3\2\2\2\u09a9\u09aa\3\2\2")
        buf.write("\2\u09aa\u0111\3\2\2\2\u09ab\u09ad\7\u0144\2\2\u09ac\u09ae")
        buf.write("\7\u01b2\2\2\u09ad\u09ac\3\2\2\2\u09ad\u09ae\3\2\2\2\u09ae")
        buf.write("\u09b6\3\2\2\2\u09af\u09b1\7\u0189\2\2\u09b0\u09b2\7\u014c")
        buf.write("\2\2\u09b1\u09b0\3\2\2\2\u09b1\u09b2\3\2\2\2\u09b2\u09b3")
        buf.write("\3\2\2\2\u09b3\u09b7\5\u0278\u013d\2\u09b4\u09b5\7\u0098")
        buf.write("\2\2\u09b5\u09b7\5\u02de\u0170\2\u09b6\u09af\3\2\2\2\u09b6")
        buf.write("\u09b4\3\2\2\2\u09b6\u09b7\3\2\2\2\u09b7\u0113\3\2\2\2")
        buf.write("\u09b8\u09b9\7\u014c\2\2\u09b9\u09ba\5\u0278\u013d\2\u09ba")
        buf.write("\u0115\3\2\2\2\u09bb\u09bc\7\u008a\2\2\u09bc\u09c1\7\u0124")
        buf.write("\2\2\u09bd\u09be\7\u015c\2\2\u09be\u09bf\7\u0172\2\2\u09bf")
        buf.write("\u09c0\7\u0226\2\2\u09c0\u09c2\5\u02de\u0170\2\u09c1\u09bd")
        buf.write("\3\2\2\2\u09c1\u09c2\3\2\2\2\u09c2\u09c5\3\2\2\2\u09c3")
        buf.write("\u09c4\7\u00bb\2\2\u09c4\u09c6\5\u02b4\u015b\2\u09c5\u09c3")
        buf.write("\3\2\2\2\u09c5\u09c6\3\2\2\2\u09c6\u09c7\3\2\2\2\u09c7")
        buf.write("\u09cd\7\u0096\2\2\u09c8\u09ce\5\u0118\u008d\2\u09c9\u09ce")
        buf.write("\5\u018e\u00c8\2\u09ca\u09ce\5\u0194\u00cb\2\u09cb\u09ce")
        buf.write("\5\u0196\u00cc\2\u09cc\u09ce\5\u01a8\u00d5\2\u09cd\u09c8")
        buf.write("\3\2\2\2\u09cd\u09c9\3\2\2\2\u09cd\u09ca\3\2\2\2\u09cd")
        buf.write("\u09cb\3\2\2\2\u09cd\u09cc\3\2\2\2\u09ce\u0117\3\2\2\2")
        buf.write("\u09cf\u09d1\5\u011a\u008e\2\u09d0\u09cf\3\2\2\2\u09d0")
        buf.write("\u09d1\3\2\2\2\u09d1\u09d2\3\2\2\2\u09d2\u09d7\5\u0122")
        buf.write("\u0092\2\u09d3\u09d6\5\u0188\u00c5\2\u09d4\u09d6\5\u0184")
        buf.write("\u00c3\2\u09d5\u09d3\3\2\2\2\u09d5\u09d4\3\2\2\2\u09d6")
        buf.write("\u09d9\3\2\2\2\u09d7\u09d5\3\2\2\2\u09d7\u09d8\3\2\2\2")
        buf.write("\u09d8\u0119\3\2\2\2\u09d9\u09d7\3\2\2\2\u09da\u09db\7")
        buf.write("\u01b0\2\2\u09db\u09e0\5\u011c\u008f\2\u09dc\u09dd\7\u0215")
        buf.write("\2\2\u09dd\u09df\5\u011c\u008f\2\u09de\u09dc\3\2\2\2\u09df")
        buf.write("\u09e2\3\2\2\2\u09e0\u09de\3\2\2\2\u09e0\u09e1\3\2\2\2")
        buf.write("\u09e1\u011b\3\2\2\2\u09e2\u09e0\3\2\2\2\u09e3\u09ef\5")
        buf.write("\u028e\u0148\2\u09e4\u09e5\7\u020f\2\2\u09e5\u09ea\5\u02b2")
        buf.write("\u015a\2\u09e6\u09e7\7\u0215\2\2\u09e7\u09e9\5\u02b2\u015a")
        buf.write("\2\u09e8\u09e6\3\2\2\2\u09e9\u09ec\3\2\2\2\u09ea\u09e8")
        buf.write("\3\2\2\2\u09ea\u09eb\3\2\2\2\u09eb\u09ed\3\2\2\2\u09ec")
        buf.write("\u09ea\3\2\2\2\u09ed\u09ee\7\u0210\2\2\u09ee\u09f0\3\2")
        buf.write("\2\2\u09ef\u09e4\3\2\2\2\u09ef\u09f0\3\2\2\2\u09f0\u09f1")
        buf.write("\3\2\2\2\u09f1\u09f2\7\16\2\2\u09f2\u09f3\7\u020f\2\2")
        buf.write("\u09f3\u09f5\5\u0122\u0092\2\u09f4\u09f6\5\u0184\u00c3")
        buf.write("\2\u09f5\u09f4\3\2\2\2\u09f5\u09f6\3\2\2\2\u09f6\u09f7")
        buf.write("\3\2\2\2\u09f7\u09f9\7\u0210\2\2\u09f8\u09fa\5\u011e\u0090")
        buf.write("\2\u09f9\u09f8\3\2\2\2\u09f9\u09fa\3\2\2\2\u09fa\u09fc")
        buf.write("\3\2\2\2\u09fb\u09fd\5\u0120\u0091\2\u09fc\u09fb\3\2\2")
        buf.write("\2\u09fc\u09fd\3\2\2\2\u09fd\u011d\3\2\2\2\u09fe\u09ff")
        buf.write("\7\u0150\2\2\u09ff\u0a00\t\31\2\2\u0a00\u0a01\7\u0091")
        buf.write("\2\2\u0a01\u0a02\7\'\2\2\u0a02\u0a04\5\u02b2\u015a\2\u0a03")
        buf.write("\u0a05\7\17\2\2\u0a04\u0a03\3\2\2\2\u0a04\u0a05\3\2\2")
        buf.write("\2\u0a05\u0a07\3\2\2\2\u0a06\u0a08\7k\2\2\u0a07\u0a06")
        buf.write("\3\2\2\2\u0a07\u0a08\3\2\2\2\u0a08\u0a0b\3\2\2\2\u0a09")
        buf.write("\u0a0a\7\u00ff\2\2\u0a0a\u0a0c\7\u0091\2\2\u0a0b\u0a09")
        buf.write("\3\2\2\2\u0a0b\u0a0c\3\2\2\2\u0a0c\u0a0f\3\2\2\2\u0a0d")
        buf.write("\u0a0e\7\u00ff\2\2\u0a0e\u0a10\7\u00c4\2\2\u0a0f\u0a0d")
        buf.write("\3\2\2\2\u0a0f\u0a10\3\2\2\2\u0a10\u0a23\3\2\2\2\u0a11")
        buf.write("\u0a12\7\u0215\2\2\u0a12\u0a14\5\u02b2\u015a\2\u0a13\u0a15")
        buf.write("\7\17\2\2\u0a14\u0a13\3\2\2\2\u0a14\u0a15\3\2\2\2\u0a15")
        buf.write("\u0a17\3\2\2\2\u0a16\u0a18\7k\2\2\u0a17\u0a16\3\2\2\2")
        buf.write("\u0a17\u0a18\3\2\2\2\u0a18\u0a1b\3\2\2\2\u0a19\u0a1a\7")
        buf.write("\u00ff\2\2\u0a1a\u0a1c\7\u0091\2\2\u0a1b\u0a19\3\2\2\2")
        buf.write("\u0a1b\u0a1c\3\2\2\2\u0a1c\u0a1f\3\2\2\2\u0a1d\u0a1e\7")
        buf.write("\u00ff\2\2\u0a1e\u0a20\7\u00c4\2\2\u0a1f\u0a1d\3\2\2\2")
        buf.write("\u0a1f\u0a20\3\2\2\2\u0a20\u0a22\3\2\2\2\u0a21\u0a11\3")
        buf.write("\2\2\2\u0a22\u0a25\3\2\2\2\u0a23\u0a21\3\2\2\2\u0a23\u0a24")
        buf.write("\3\2\2\2\u0a24\u0a26\3\2\2\2\u0a25\u0a23\3\2\2\2\u0a26")
        buf.write("\u0a27\7\u015c\2\2\u0a27\u0a28\5\u02b2\u015a\2\u0a28\u011f")
        buf.write("\3\2\2\2\u0a29\u0a2a\7W\2\2\u0a2a\u0a2f\5\u02b2\u015a")
        buf.write("\2\u0a2b\u0a2c\7\u0215\2\2\u0a2c\u0a2e\5\u02b2\u015a\2")
        buf.write("\u0a2d\u0a2b\3\2\2\2\u0a2e\u0a31\3\2\2\2\u0a2f\u0a2d\3")
        buf.write("\2\2\2\u0a2f\u0a30\3\2\2\2\u0a30\u0a32\3\2\2\2\u0a31\u0a2f")
        buf.write("\3\2\2\2\u0a32\u0a33\7\u015c\2\2\u0a33\u0a34\5\u02b2\u015a")
        buf.write("\2\u0a34\u0a35\7\u0189\2\2\u0a35\u0a36\5\u01d6\u00ec\2")
        buf.write("\u0a36\u0a37\7e\2\2\u0a37\u0a38\5\u01d6\u00ec\2\u0a38")
        buf.write("\u0121\3\2\2\2\u0a39\u0a3d\5\u0126\u0094\2\u0a3a\u0a3c")
        buf.write("\5\u0124\u0093\2\u0a3b\u0a3a\3\2\2\2\u0a3c\u0a3f\3\2\2")
        buf.write("\2\u0a3d\u0a3b\3\2\2\2\u0a3d\u0a3e\3\2\2\2\u0a3e\u0123")
        buf.write("\3\2\2\2\u0a3f\u0a3d\3\2\2\2\u0a40\u0a42\7\u0194\2\2\u0a41")
        buf.write("\u0a43\7\b\2\2\u0a42\u0a41\3\2\2\2\u0a42\u0a43\3\2\2\2")
        buf.write("\u0a43\u0a47\3\2\2\2\u0a44\u0a47\7\u00b9\2\2\u0a45\u0a47")
        buf.write("\7\u00de\2\2\u0a46\u0a40\3\2\2\2\u0a46\u0a44\3\2\2\2\u0a46")
        buf.write("\u0a45\3\2\2\2\u0a47\u0a48\3\2\2\2\u0a48\u0a49\5\u0126")
        buf.write("\u0094\2\u0a49\u0125\3\2\2\2\u0a4a\u0a50\5\u0128\u0095")
        buf.write("\2\u0a4b\u0a4c\7\u020f\2\2\u0a4c\u0a4d\5\u0122\u0092\2")
        buf.write("\u0a4d\u0a4e\7\u0210\2\2\u0a4e\u0a50\3\2\2\2\u0a4f\u0a4a")
        buf.write("\3\2\2\2\u0a4f\u0a4b\3\2\2\2\u0a50\u0127\3\2\2\2\u0a51")
        buf.write("\u0a53\7\u0154\2\2\u0a52\u0a54\t\32\2\2\u0a53\u0a52\3")
        buf.write("\2\2\2\u0a53\u0a54\3\2\2\2\u0a54\u0a5e\3\2\2\2\u0a55\u0a5f")
        buf.write("\7\u0212\2\2\u0a56\u0a5b\5\u012a\u0096\2\u0a57\u0a58\7")
        buf.write("\u0215\2\2\u0a58\u0a5a\5\u012a\u0096\2\u0a59\u0a57\3\2")
        buf.write("\2\2\u0a5a\u0a5d\3\2\2\2\u0a5b\u0a59\3\2\2\2\u0a5b\u0a5c")
        buf.write("\3\2\2\2\u0a5c\u0a5f\3\2\2\2\u0a5d\u0a5b\3\2\2\2\u0a5e")
        buf.write("\u0a55\3\2\2\2\u0a5e\u0a56\3\2\2\2\u0a5f\u0a61\3\2\2\2")
        buf.write("\u0a60\u0a62\5\u0270\u0139\2\u0a61\u0a60\3\2\2\2\u0a61")
        buf.write("\u0a62\3\2\2\2\u0a62\u0a63\3\2\2\2\u0a63\u0a65\5\u012c")
        buf.write("\u0097\2\u0a64\u0a66\5\u026c\u0137\2\u0a65\u0a64\3\2\2")
        buf.write("\2\u0a65\u0a66\3\2\2\2\u0a66\u0a68\3\2\2\2\u0a67\u0a69")
        buf.write("\5\u0156\u00ac\2\u0a68\u0a67\3\2\2\2\u0a68\u0a69\3\2\2")
        buf.write("\2\u0a69\u0a6b\3\2\2\2\u0a6a\u0a6c\5\u015a\u00ae\2\u0a6b")
        buf.write("\u0a6a\3\2\2\2\u0a6b\u0a6c\3\2\2\2\u0a6c\u0a6e\3\2\2\2")
        buf.write("\u0a6d\u0a6f\5\u0166\u00b4\2\u0a6e\u0a6d\3\2\2\2\u0a6e")
        buf.write("\u0a6f\3\2\2\2\u0a6f\u0129\3\2\2\2\u0a70\u0a72\5\u012e")
        buf.write("\u0098\2\u0a71\u0a73\5\u0266\u0134\2\u0a72\u0a71\3\2\2")
        buf.write("\2\u0a72\u0a73\3\2\2\2\u0a73\u012b\3\2\2\2\u0a74\u0a75")
        buf.write("\7\u0099\2\2\u0a75\u0a76\5\u0130\u0099\2\u0a76\u012d\3")
        buf.write("\2\2\2\u0a77\u0a78\5\u02b4\u015b\2\u0a78\u0a79\7\u0208")
        buf.write("\2\2\u0a79\u0a7a\7\u0212\2\2\u0a7a\u0a7d\3\2\2\2\u0a7b")
        buf.write("\u0a7d\5\u01d6\u00ec\2\u0a7c\u0a77\3\2\2\2\u0a7c\u0a7b")
        buf.write("\3\2\2\2\u0a7d\u012f\3\2\2\2\u0a7e\u0a83\5\u0132\u009a")
        buf.write("\2\u0a7f\u0a80\7\u0215\2\2\u0a80\u0a82\5\u0132\u009a\2")
        buf.write("\u0a81\u0a7f\3\2\2\2\u0a82\u0a85\3\2\2\2\u0a83\u0a81\3")
        buf.write("\2\2\2\u0a83\u0a84\3\2\2\2\u0a84\u0131\3\2\2\2\u0a85\u0a83")
        buf.write("\3\2\2\2\u0a86\u0a8a\5\u0134\u009b\2\u0a87\u0a89\5\u0138")
        buf.write("\u009d\2\u0a88\u0a87\3\2\2\2\u0a89\u0a8c\3\2\2\2\u0a8a")
        buf.write("\u0a88\3\2\2\2\u0a8a\u0a8b\3\2\2\2\u0a8b\u0a8f\3\2\2\2")
        buf.write("\u0a8c\u0a8a\3\2\2\2\u0a8d\u0a90\5\u0144\u00a3\2\u0a8e")
        buf.write("\u0a90\5\u0150\u00a9\2\u0a8f\u0a8d\3\2\2\2\u0a8f\u0a8e")
        buf.write("\3\2\2\2\u0a8f\u0a90\3\2\2\2\u0a90\u0133\3\2\2\2\u0a91")
        buf.write("\u0a95\5\u0136\u009c\2\u0a92\u0a94\5\u0142\u00a2\2\u0a93")
        buf.write("\u0a92\3\2\2\2\u0a94\u0a97\3\2\2\2\u0a95\u0a93\3\2\2\2")
        buf.write("\u0a95\u0a96\3\2\2\2\u0a96\u0a99\3\2\2\2\u0a97\u0a95\3")
        buf.write("\2\2\2\u0a98\u0a9a\5\u0268\u0135\2\u0a99\u0a98\3\2\2\2")
        buf.write("\u0a99\u0a9a\3\2\2\2\u0a9a\u0135\3\2\2\2\u0a9b\u0a9e\5")
        buf.write("\u01c6\u00e4\2\u0a9c\u0a9f\5\u0144\u00a3\2\u0a9d\u0a9f")
        buf.write("\5\u0150\u00a9\2\u0a9e\u0a9c\3\2\2\2\u0a9e\u0a9d\3\2\2")
        buf.write("\2\u0a9e\u0a9f\3\2\2\2\u0a9f\u0ab3\3\2\2\2\u0aa0\u0aa1")
        buf.write("\7\u020f\2\2\u0aa1\u0aa5\5\u0132\u009a\2\u0aa2\u0aa4\5")
        buf.write("\u0124\u0093\2\u0aa3\u0aa2\3\2\2\2\u0aa4\u0aa7\3\2\2\2")
        buf.write("\u0aa5\u0aa3\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6\u0aa8\3")
        buf.write("\2\2\2\u0aa7\u0aa5\3\2\2\2\u0aa8\u0aab\7\u0210\2\2\u0aa9")
        buf.write("\u0aac\5\u0144\u00a3\2\u0aaa\u0aac\5\u0150\u00a9\2\u0aab")
        buf.write("\u0aa9\3\2\2\2\u0aab\u0aaa\3\2\2\2\u0aab\u0aac\3\2\2\2")
        buf.write("\u0aac\u0ab3\3\2\2\2\u0aad\u0aae\7\u0109\2\2\u0aae\u0aaf")
        buf.write("\7\u020f\2\2\u0aaf\u0ab0\5\u01c6\u00e4\2\u0ab0\u0ab1\7")
        buf.write("\u0210\2\2\u0ab1\u0ab3\3\2\2\2\u0ab2\u0a9b\3\2\2\2\u0ab2")
        buf.write("\u0aa0\3\2\2\2\u0ab2\u0aad\3\2\2\2\u0ab3\u0137\3\2\2\2")
        buf.write("\u0ab4\u0ab6\5\u0140\u00a1\2\u0ab5\u0ab4\3\2\2\2\u0ab5")
        buf.write("\u0ab6\3\2\2\2\u0ab6\u0ab8\3\2\2\2\u0ab7\u0ab9\t\33\2")
        buf.write("\2\u0ab8\u0ab7\3\2\2\2\u0ab8\u0ab9\3\2\2\2\u0ab9\u0abc")
        buf.write("\3\2\2\2\u0aba\u0abd\7\u00b2\2\2\u0abb\u0abd\5\u013e\u00a0")
        buf.write("\2\u0abc\u0aba\3\2\2\2\u0abc\u0abb\3\2\2\2\u0abc\u0abd")
        buf.write("\3\2\2\2\u0abd\u0abe\3\2\2\2\u0abe\u0abf\7\u00c1\2\2\u0abf")
        buf.write("\u0ac1\5\u0134\u009b\2\u0ac0\u0ac2\5\u0140\u00a1\2\u0ac1")
        buf.write("\u0ac0\3\2\2\2\u0ac1\u0ac2\3\2\2\2\u0ac2\u0ac7\3\2\2\2")
        buf.write("\u0ac3\u0ac6\5\u013a\u009e\2\u0ac4\u0ac6\5\u013c\u009f")
        buf.write("\2\u0ac5\u0ac3\3\2\2\2\u0ac5\u0ac4\3\2\2\2\u0ac6\u0ac9")
        buf.write("\3\2\2\2\u0ac7\u0ac5\3\2\2\2\u0ac7\u0ac8\3\2\2\2\u0ac8")
        buf.write("\u0139\3\2\2\2\u0ac9\u0ac7\3\2\2\2\u0aca\u0acb\7\u0108")
        buf.write("\2\2\u0acb\u0acc\5\u01d4\u00eb\2\u0acc\u013b\3\2\2\2\u0acd")
        buf.write("\u0ace\7\u019e\2\2\u0ace\u0acf\7\u020f\2\2\u0acf\u0ad4")
        buf.write("\5\u02b2\u015a\2\u0ad0\u0ad1\7\u0215\2\2\u0ad1\u0ad3\5")
        buf.write("\u02b2\u015a\2\u0ad2\u0ad0\3\2\2\2\u0ad3\u0ad6\3\2\2\2")
        buf.write("\u0ad4\u0ad2\3\2\2\2\u0ad4\u0ad5\3\2\2\2\u0ad5\u0ad7\3")
        buf.write("\2\2\2\u0ad6\u0ad4\3\2\2\2\u0ad7\u0ad8\7\u0210\2\2\u0ad8")
        buf.write("\u013d\3\2\2\2\u0ad9\u0adb\t\34\2\2\u0ada\u0adc\7\u0112")
        buf.write("\2\2\u0adb\u0ada\3\2\2\2\u0adb\u0adc\3\2\2\2\u0adc\u013f")
        buf.write("\3\2\2\2\u0add\u0ade\7\u0119\2\2\u0ade\u0aec\7\'\2\2\u0adf")
        buf.write("\u0ae0\7\u020f\2\2\u0ae0\u0ae1\5\u0122\u0092\2\u0ae1\u0ae2")
        buf.write("\7\u0210\2\2\u0ae2\u0aed\3\2\2\2\u0ae3\u0aed\5\u01d2\u00ea")
        buf.write("\2\u0ae4\u0ae9\5\u01d6\u00ec\2\u0ae5\u0ae6\7\u0215\2\2")
        buf.write("\u0ae6\u0ae8\5\u01d6\u00ec\2\u0ae7\u0ae5\3\2\2\2\u0ae8")
        buf.write("\u0aeb\3\2\2\2\u0ae9\u0ae7\3\2\2\2\u0ae9\u0aea\3\2\2\2")
        buf.write("\u0aea\u0aed\3\2\2\2\u0aeb\u0ae9\3\2\2\2\u0aec\u0adf\3")
        buf.write("\2\2\2\u0aec\u0ae3\3\2\2\2\u0aec\u0ae4\3\2\2\2\u0aed\u0141")
        buf.write("\3\2\2\2\u0aee\u0aef\7\u01a8\2\2\u0aef\u0af0\7\33\2\2")
        buf.write("\u0af0\u0af1\t\35\2\2\u0af1\u0af7\5\u01d6\u00ec\2\u0af2")
        buf.write("\u0af3\7\16\2\2\u0af3\u0af4\7\u0104\2\2\u0af4\u0af5\t")
        buf.write("\36\2\2\u0af5\u0af7\5\u01d6\u00ec\2\u0af6\u0aee\3\2\2")
        buf.write("\2\u0af6\u0af2\3\2\2\2\u0af7\u0143\3\2\2\2\u0af8\u0afa")
        buf.write("\7\u0123\2\2\u0af9\u0afb\7\u01b4\2\2\u0afa\u0af9\3\2\2")
        buf.write("\2\u0afa\u0afb\3\2\2\2\u0afb\u0afc\3\2\2\2\u0afc\u0afd")
        buf.write("\7\u020f\2\2\u0afd\u0b02\5\u0146\u00a4\2\u0afe\u0aff\7")
        buf.write("\u0215\2\2\u0aff\u0b01\5\u0146\u00a4\2\u0b00\u0afe\3\2")
        buf.write("\2\2\u0b01\u0b04\3\2\2\2\u0b02\u0b00\3\2\2\2\u0b02\u0b03")
        buf.write("\3\2\2\2\u0b03\u0b05\3\2\2\2\u0b04\u0b02\3\2\2\2\u0b05")
        buf.write("\u0b06\5\u0148\u00a5\2\u0b06\u0b07\5\u014a\u00a6\2\u0b07")
        buf.write("\u0b08\7\u0210\2\2\u0b08\u0145\3\2\2\2\u0b09\u0b0a\5\u028c")
        buf.write("\u0147\2\u0b0a\u0b0b\7\u020f\2\2\u0b0b\u0b0c\5\u01d6\u00ec")
        buf.write("\2\u0b0c\u0b0e\7\u0210\2\2\u0b0d\u0b0f\5\u0266\u0134\2")
        buf.write("\u0b0e\u0b0d\3\2\2\2\u0b0e\u0b0f\3\2\2\2\u0b0f\u0147\3")
        buf.write("\2\2\2\u0b10\u0b1d\7\u0096\2\2\u0b11\u0b1e\5\u02b2\u015a")
        buf.write("\2\u0b12\u0b13\7\u020f\2\2\u0b13\u0b18\5\u02b2\u015a\2")
        buf.write("\u0b14\u0b15\7\u0215\2\2\u0b15\u0b17\5\u02b2\u015a\2\u0b16")
        buf.write("\u0b14\3\2\2\2\u0b17\u0b1a\3\2\2\2\u0b18\u0b16\3\2\2\2")
        buf.write("\u0b18\u0b19\3\2\2\2\u0b19\u0b1b\3\2\2\2\u0b1a\u0b18\3")
        buf.write("\2\2\2\u0b1b\u0b1c\7\u0210\2\2\u0b1c\u0b1e\3\2\2\2\u0b1d")
        buf.write("\u0b11\3\2\2\2\u0b1d\u0b12\3\2\2\2\u0b1e\u0149\3\2\2\2")
        buf.write("\u0b1f\u0b20\7\u00a7\2\2\u0b20\u0b32\7\u020f\2\2\u0b21")
        buf.write("\u0b33\5\u0122\u0092\2\u0b22\u0b27\7\f\2\2\u0b23\u0b24")
        buf.write("\7\u0215\2\2\u0b24\u0b26\7\f\2\2\u0b25\u0b23\3\2\2\2\u0b26")
        buf.write("\u0b29\3\2\2\2\u0b27\u0b25\3\2\2\2\u0b27\u0b28\3\2\2\2")
        buf.write("\u0b28\u0b33\3\2\2\2\u0b29\u0b27\3\2\2\2\u0b2a\u0b2f\5")
        buf.write("\u014c\u00a7\2\u0b2b\u0b2c\7\u0215\2\2\u0b2c\u0b2e\5\u014c")
        buf.write("\u00a7\2\u0b2d\u0b2b\3\2\2\2\u0b2e\u0b31\3\2\2\2\u0b2f")
        buf.write("\u0b2d\3\2\2\2\u0b2f\u0b30\3\2\2\2\u0b30\u0b33\3\2\2\2")
        buf.write("\u0b31\u0b2f\3\2\2\2\u0b32\u0b21\3\2\2\2\u0b32\u0b22\3")
        buf.write("\2\2\2\u0b32\u0b2a\3\2\2\2\u0b33\u0b34\3\2\2\2\u0b34\u0b35")
        buf.write("\7\u0210\2\2\u0b35\u014b\3\2\2\2\u0b36\u0b38\5\u014e\u00a8")
        buf.write("\2\u0b37\u0b39\5\u0266\u0134\2\u0b38\u0b37\3\2\2\2\u0b38")
        buf.write("\u0b39\3\2\2\2\u0b39\u014d\3\2\2\2\u0b3a\u0b3d\5\u01d6")
        buf.write("\u00ec\2\u0b3b\u0b3d\5\u01d2\u00ea\2\u0b3c\u0b3a\3\2\2")
        buf.write("\2\u0b3c\u0b3b\3\2\2\2\u0b3d\u014f\3\2\2\2\u0b3e\u0b41")
        buf.write("\7\u0197\2\2\u0b3f\u0b40\t\37\2\2\u0b40\u0b42\7\u00ff")
        buf.write("\2\2\u0b41\u0b3f\3\2\2\2\u0b41\u0b42\3\2\2\2\u0b42\u0b43")
        buf.write("\3\2\2\2\u0b43\u0b50\7\u020f\2\2\u0b44\u0b51\5\u02b2\u015a")
        buf.write("\2\u0b45\u0b46\7\u020f\2\2\u0b46\u0b4b\5\u02b2\u015a\2")
        buf.write("\u0b47\u0b48\7\u0215\2\2\u0b48\u0b4a\5\u02b2\u015a\2\u0b49")
        buf.write("\u0b47\3\2\2\2\u0b4a\u0b4d\3\2\2\2\u0b4b\u0b49\3\2\2\2")
        buf.write("\u0b4b\u0b4c\3\2\2\2\u0b4c\u0b4e\3\2\2\2\u0b4d\u0b4b\3")
        buf.write("\2\2\2\u0b4e\u0b4f\7\u0210\2\2\u0b4f\u0b51\3\2\2\2\u0b50")
        buf.write("\u0b44\3\2\2\2\u0b50\u0b45\3\2\2\2\u0b51\u0b52\3\2\2\2")
        buf.write("\u0b52\u0b53\5\u0148\u00a5\2\u0b53\u0b54\5\u0152\u00aa")
        buf.write("\2\u0b54\u0b55\7\u0210\2\2\u0b55\u0151\3\2\2\2\u0b56\u0b57")
        buf.write("\7\u00a7\2\2\u0b57\u0b58\7\u020f\2\2\u0b58\u0b5d\5\u0154")
        buf.write("\u00ab\2\u0b59\u0b5a\7\u0215\2\2\u0b5a\u0b5c\5\u0154\u00ab")
        buf.write("\2\u0b5b\u0b59\3\2\2\2\u0b5c\u0b5f\3\2\2\2\u0b5d\u0b5b")
        buf.write("\3\2\2\2\u0b5d\u0b5e\3\2\2\2\u0b5e\u0b60\3\2\2\2\u0b5f")
        buf.write("\u0b5d\3\2\2\2\u0b60\u0b61\7\u0210\2\2\u0b61\u0153\3\2")
        buf.write("\2\2\u0b62\u0b6f\5\u02b2\u015a\2\u0b63\u0b64\7\u020f\2")
        buf.write("\2\u0b64\u0b69\5\u02b2\u015a\2\u0b65\u0b66\7\u0215\2\2")
        buf.write("\u0b66\u0b68\5\u02b2\u015a\2\u0b67\u0b65\3\2\2\2\u0b68")
        buf.write("\u0b6b\3\2\2\2\u0b69\u0b67\3\2\2\2\u0b69\u0b6a\3\2\2\2")
        buf.write("\u0b6a\u0b6c\3\2\2\2\u0b6b\u0b69\3\2\2\2\u0b6c\u0b6d\7")
        buf.write("\u0210\2\2\u0b6d\u0b6f\3\2\2\2\u0b6e\u0b62\3\2\2\2\u0b6e")
        buf.write("\u0b63\3\2\2\2\u0b6f\u0b7f\3\2\2\2\u0b70\u0b7d\7\16\2")
        buf.write("\2\u0b71\u0b7e\5\u02d8\u016d\2\u0b72\u0b73\7\u020f\2\2")
        buf.write("\u0b73\u0b78\5\u02d8\u016d\2\u0b74\u0b75\7\u0215\2\2\u0b75")
        buf.write("\u0b77\5\u02d8\u016d\2\u0b76\u0b74\3\2\2\2\u0b77\u0b7a")
        buf.write("\3\2\2\2\u0b78\u0b76\3\2\2\2\u0b78\u0b79\3\2\2\2\u0b79")
        buf.write("\u0b7b\3\2\2\2\u0b7a\u0b78\3\2\2\2\u0b7b\u0b7c\7\u0210")
        buf.write("\2\2\u0b7c\u0b7e\3\2\2\2\u0b7d\u0b71\3\2\2\2\u0b7d\u0b72")
        buf.write("\3\2\2\2\u0b7e\u0b80\3\2\2\2\u0b7f\u0b70\3\2\2\2\u0b7f")
        buf.write("\u0b80\3\2\2\2\u0b80\u0155\3\2\2\2\u0b81\u0b82\7B\2\2")
        buf.write("\u0b82\u0b84\7\'\2\2\u0b83\u0b85\7\u00f5\2\2\u0b84\u0b83")
        buf.write("\3\2\2\2\u0b84\u0b85\3\2\2\2\u0b85\u0b86\3\2\2\2\u0b86")
        buf.write("\u0b88\5\u01d4\u00eb\2\u0b87\u0b89\5\u0158\u00ad\2\u0b88")
        buf.write("\u0b87\3\2\2\2\u0b88\u0b89\3\2\2\2\u0b89\u0b93\3\2\2\2")
        buf.write("\u0b8a\u0b8b\5\u0158\u00ad\2\u0b8b\u0b8c\7B\2\2\u0b8c")
        buf.write("\u0b8e\7\'\2\2\u0b8d\u0b8f\7\u00f5\2\2\u0b8e\u0b8d\3\2")
        buf.write("\2\2\u0b8e\u0b8f\3\2\2\2\u0b8f\u0b90\3\2\2\2\u0b90\u0b91")
        buf.write("\5\u01d4\u00eb\2\u0b91\u0b93\3\2\2\2\u0b92\u0b81\3\2\2")
        buf.write("\2\u0b92\u0b8a\3\2\2\2\u0b93\u0157\3\2\2\2\u0b94\u0b95")
        buf.write("\7\u016f\2\2\u0b95\u0b96\7\u01b0\2\2\u0b96\u0b97\5\u01d4")
        buf.write("\u00eb\2\u0b97\u0159\3\2\2\2\u0b98\u0b99\7\u009e\2\2\u0b99")
        buf.write("\u0b9a\7\'\2\2\u0b9a\u0b9f\5\u015c\u00af\2\u0b9b\u0b9c")
        buf.write("\7\u0215\2\2\u0b9c\u0b9e\5\u015c\u00af\2\u0b9d\u0b9b\3")
        buf.write("\2\2\2\u0b9e\u0ba1\3\2\2\2\u0b9f\u0b9d\3\2\2\2\u0b9f\u0ba0")
        buf.write("\3\2\2\2\u0ba0\u0ba3\3\2\2\2\u0ba1\u0b9f\3\2\2\2\u0ba2")
        buf.write("\u0ba4\5\u0164\u00b3\2\u0ba3\u0ba2\3\2\2\2\u0ba3\u0ba4")
        buf.write("\3\2\2\2\u0ba4\u0bb3\3\2\2\2\u0ba5\u0bb0\5\u0164\u00b3")
        buf.write("\2\u0ba6\u0ba7\7\u009e\2\2\u0ba7\u0ba8\7\'\2\2\u0ba8\u0bad")
        buf.write("\5\u015c\u00af\2\u0ba9\u0baa\7\u0215\2\2\u0baa\u0bac\5")
        buf.write("\u015c\u00af\2\u0bab\u0ba9\3\2\2\2\u0bac\u0baf\3\2\2\2")
        buf.write("\u0bad\u0bab\3\2\2\2\u0bad\u0bae\3\2\2\2\u0bae\u0bb1\3")
        buf.write("\2\2\2\u0baf\u0bad\3\2\2\2\u0bb0\u0ba6\3\2\2\2\u0bb0\u0bb1")
        buf.write("\3\2\2\2\u0bb1\u0bb3\3\2\2\2\u0bb2\u0b98\3\2\2\2\u0bb2")
        buf.write("\u0ba5\3\2\2\2\u0bb3\u015b\3\2\2\2\u0bb4\u0bb8\5\u0160")
        buf.write("\u00b1\2\u0bb5\u0bb8\5\u015e\u00b0\2\u0bb6\u0bb8\5\u01d6")
        buf.write("\u00ec\2\u0bb7\u0bb4\3\2\2\2\u0bb7\u0bb5\3\2\2\2\u0bb7")
        buf.write("\u0bb6\3\2\2\2\u0bb8\u015d\3\2\2\2\u0bb9\u0bba\t \2\2")
        buf.write("\u0bba\u0bbb\7\u020f\2\2\u0bbb\u0bc0\5\u0162\u00b2\2\u0bbc")
        buf.write("\u0bbd\7\u0215\2\2\u0bbd\u0bbf\5\u0162\u00b2\2\u0bbe\u0bbc")
        buf.write("\3\2\2\2\u0bbf\u0bc2\3\2\2\2\u0bc0\u0bbe\3\2\2\2\u0bc0")
        buf.write("\u0bc1\3\2\2\2\u0bc1\u0bc3\3\2\2\2\u0bc2\u0bc0\3\2\2\2")
        buf.write("\u0bc3\u0bc4\7\u0210\2\2\u0bc4\u015f\3\2\2\2\u0bc5\u0bc6")
        buf.write("\7\u009f\2\2\u0bc6\u0bc7\7\u015d\2\2\u0bc7\u0bc8\7\u020f")
        buf.write("\2\2\u0bc8\u0bcd\5\u0162\u00b2\2\u0bc9\u0bca\7\u0215\2")
        buf.write("\2\u0bca\u0bcc\5\u0162\u00b2\2\u0bcb\u0bc9\3\2\2\2\u0bcc")
        buf.write("\u0bcf\3\2\2\2\u0bcd\u0bcb\3\2\2\2\u0bcd\u0bce\3\2\2\2")
        buf.write("\u0bce\u0bd0\3\2\2\2\u0bcf\u0bcd\3\2\2\2\u0bd0\u0bd1\7")
        buf.write("\u0210\2\2\u0bd1\u0161\3\2\2\2\u0bd2\u0bd6\5\u015e\u00b0")
        buf.write("\2\u0bd3\u0bd6\5\u01d2\u00ea\2\u0bd4\u0bd6\5\u01d6\u00ec")
        buf.write("\2\u0bd5\u0bd2\3\2\2\2\u0bd5\u0bd3\3\2\2\2\u0bd5\u0bd4")
        buf.write("\3\2\2\2\u0bd6\u0163\3\2\2\2\u0bd7\u0bd8\7\u00a1\2\2\u0bd8")
        buf.write("\u0bd9\5\u01d4\u00eb\2\u0bd9\u0165\3\2\2\2\u0bda\u0bde")
        buf.write("\7\u00e3\2\2\u0bdb\u0bdd\5\u0168\u00b5\2\u0bdc\u0bdb\3")
        buf.write("\2\2\2\u0bdd\u0be0\3\2\2\2\u0bde\u0bdc\3\2\2\2\u0bde\u0bdf")
        buf.write("\3\2\2\2\u0bdf\u0be2\3\2\2\2\u0be0\u0bde\3\2\2\2\u0be1")
        buf.write("\u0be3\5\u016a\u00b6\2\u0be2\u0be1\3\2\2\2\u0be2\u0be3")
        buf.write("\3\2\2\2\u0be3\u0be7\3\2\2\2\u0be4\u0be6\5\u016c\u00b7")
        buf.write("\2\u0be5\u0be4\3\2\2\2\u0be6\u0be9\3\2\2\2\u0be7\u0be5")
        buf.write("\3\2\2\2\u0be7\u0be8\3\2\2\2\u0be8\u0bea\3\2\2\2\u0be9")
        buf.write("\u0be7\3\2\2\2\u0bea\u0beb\5\u016e\u00b8\2\u0beb\u0167")
        buf.write("\3\2\2\2\u0bec\u0bed\t!\2\2\u0bed\u0bf5\7\u00eb\2\2\u0bee")
        buf.write("\u0bf2\7\u0195\2\2\u0bef\u0bf3\7m\2\2\u0bf0\u0bf1\7\u0165")
        buf.write("\2\2\u0bf1\u0bf3\7\u0136\2\2\u0bf2\u0bef\3\2\2\2\u0bf2")
        buf.write("\u0bf0\3\2\2\2\u0bf3\u0bf5\3\2\2\2\u0bf4\u0bec\3\2\2\2")
        buf.write("\u0bf4\u0bee\3\2\2\2\u0bf5\u0169\3\2\2\2\u0bf6\u0bf7\7")
        buf.write("\u013e\2\2\u0bf7\u0bf8\t\"\2\2\u0bf8\u0bf9\7\u0148\2\2")
        buf.write("\u0bf9\u016b\3\2\2\2\u0bfa\u0bfb\7\u0136\2\2\u0bfb\u0bfc")
        buf.write("\5\u0288\u0145\2\u0bfc\u0bfd\7\u0108\2\2\u0bfd\u0bfe\7")
        buf.write("\u020f\2\2\u0bfe\u0bff\5\u0122\u0092\2\u0bff\u0c00\7\u0210")
        buf.write("\2\2\u0c00\u0c04\5\u0170\u00b9\2\u0c01\u0c03\5\u0168\u00b5")
        buf.write("\2\u0c02\u0c01\3\2\2\2\u0c03\u0c06\3\2\2\2\u0c04\u0c02")
        buf.write("\3\2\2\2\u0c04\u0c05\3\2\2\2\u0c05\u016d\3\2\2\2\u0c06")
        buf.write("\u0c04\3\2\2\2\u0c07\u0c08\7\u00d7\2\2\u0c08\u0c0a\5\u028a")
        buf.write("\u0146\2\u0c09\u0c07\3\2\2\2\u0c09\u0c0a\3\2\2\2\u0c0a")
        buf.write("\u0c0b\3\2\2\2\u0c0b\u0c0f\5\u0170\u00b9\2\u0c0c\u0c0e")
        buf.write("\5\u0168\u00b5\2\u0c0d\u0c0c\3\2\2\2\u0c0e\u0c11\3\2\2")
        buf.write("\2\u0c0f\u0c0d\3\2\2\2\u0c0f\u0c10\3\2\2\2\u0c10\u0c12")
        buf.write("\3\2\2\2\u0c11\u0c0f\3\2\2\2\u0c12\u0c13\5\u0178\u00bd")
        buf.write("\2\u0c13\u016f\3\2\2\2\u0c14\u0c16\5\u0172\u00ba\2\u0c15")
        buf.write("\u0c14\3\2\2\2\u0c15\u0c16\3\2\2\2\u0c16\u0c17\3\2\2\2")
        buf.write("\u0c17\u0c18\7m\2\2\u0c18\u0c19\7\'\2\2\u0c19\u0c1a\5")
        buf.write("\u0174\u00bb\2\u0c1a\u0c1b\7\u00db\2\2\u0c1b\u0c1c\5\u0174")
        buf.write("\u00bb\2\u0c1c\u0171\3\2\2\2\u0c1d\u0c1e\7\u0119\2\2\u0c1e")
        buf.write("\u0c1f\7\'\2\2\u0c1f\u0c20\5\u0174\u00bb\2\u0c20\u0173")
        buf.write("\3\2\2\2\u0c21\u0c22\7\u020f\2\2\u0c22\u0c27\5\u0176\u00bc")
        buf.write("\2\u0c23\u0c24\7\u0215\2\2\u0c24\u0c26\5\u0176\u00bc\2")
        buf.write("\u0c25\u0c23\3\2\2\2\u0c26\u0c29\3\2\2\2\u0c27\u0c25\3")
        buf.write("\2\2\2\u0c27\u0c28\3\2\2\2\u0c28\u0c2a\3\2\2\2\u0c29\u0c27")
        buf.write("\3\2\2\2\u0c2a\u0c2b\7\u0210\2\2\u0c2b\u0175\3\2\2\2\u0c2c")
        buf.write("\u0c2f\5\u01d6\u00ec\2\u0c2d\u0c2f\5\u0128\u0095\2\u0c2e")
        buf.write("\u0c2c\3\2\2\2\u0c2e\u0c2d\3\2\2\2\u0c2f\u0c31\3\2\2\2")
        buf.write("\u0c30\u0c32\5\u0266\u0134\2\u0c31\u0c30\3\2\2\2\u0c31")
        buf.write("\u0c32\3\2\2\2\u0c32\u0177\3\2\2\2\u0c33\u0c35\5\u017a")
        buf.write("\u00be\2\u0c34\u0c33\3\2\2\2\u0c34\u0c35\3\2\2\2\u0c35")
        buf.write("\u0c36\3\2\2\2\u0c36\u0c3f\7\u020f\2\2\u0c37\u0c3c\5\u017c")
        buf.write("\u00bf\2\u0c38\u0c39\7\u0215\2\2\u0c39\u0c3b\5\u017c\u00bf")
        buf.write("\2\u0c3a\u0c38\3\2\2\2\u0c3b\u0c3e\3\2\2\2\u0c3c\u0c3a")
        buf.write("\3\2\2\2\u0c3c\u0c3d\3\2\2\2\u0c3d\u0c40\3\2\2\2\u0c3e")
        buf.write("\u0c3c\3\2\2\2\u0c3f\u0c37\3\2\2\2\u0c3f\u0c40\3\2\2\2")
        buf.write("\u0c40\u0c41\3\2\2\2\u0c41\u0c42\7\u0210\2\2\u0c42\u0179")
        buf.write("\3\2\2\2\u0c43\u0c49\7\u0149\2\2\u0c44\u0c4a\7\u0199\2")
        buf.write("\2\u0c45\u0c47\7\u019b\2\2\u0c46\u0c48\7\b\2\2\u0c47\u0c46")
        buf.write("\3\2\2\2\u0c47\u0c48\3\2\2\2\u0c48\u0c4a\3\2\2\2\u0c49")
        buf.write("\u0c44\3\2\2\2\u0c49\u0c45\3\2\2\2\u0c49\u0c4a\3\2\2\2")
        buf.write("\u0c4a\u0c4d\3\2\2\2\u0c4b\u0c4c\t#\2\2\u0c4c\u0c4e\7")
        buf.write("\u010e\2\2\u0c4d\u0c4b\3\2\2\2\u0c4d\u0c4e\3\2\2\2\u0c4e")
        buf.write("\u0c50\3\2\2\2\u0c4f\u0c51\5\u0180\u00c1\2\u0c50\u0c4f")
        buf.write("\3\2\2\2\u0c50\u0c51\3\2\2\2\u0c51\u017b\3\2\2\2\u0c52")
        buf.write("\u0c58\7\u0199\2\2\u0c53\u0c55\7\u019b\2\2\u0c54\u0c56")
        buf.write("\7\b\2\2\u0c55\u0c54\3\2\2\2\u0c55\u0c56\3\2\2\2\u0c56")
        buf.write("\u0c58\3\2\2\2\u0c57\u0c52\3\2\2\2\u0c57\u0c53\3\2\2\2")
        buf.write("\u0c57\u0c58\3\2\2\2\u0c58\u0c59\3\2\2\2\u0c59\u0c5b\5")
        buf.write("\u017e\u00c0\2\u0c5a\u0c5c\5\u0184\u00c3\2\u0c5b\u0c5a")
        buf.write("\3\2\2\2\u0c5b\u0c5c\3\2\2\2\u0c5c\u0c5d\3\2\2\2\u0c5d")
        buf.write("\u0c5e\7\u0226\2\2\u0c5e\u0c5f\5\u01d6\u00ec\2\u0c5f\u017d")
        buf.write("\3\2\2\2\u0c60\u0c61\5\u01fc\u00ff\2\u0c61\u017f\3\2\2")
        buf.write("\2\u0c62\u0c63\7\u00bf\2\2\u0c63\u0c64\7\u020f\2\2\u0c64")
        buf.write("\u0c65\5\u01d6\u00ec\2\u0c65\u0c67\7\u0210\2\2\u0c66\u0c68")
        buf.write("\5\u0182\u00c2\2\u0c67\u0c66\3\2\2\2\u0c67\u0c68\3\2\2")
        buf.write("\2\u0c68\u0181\3\2\2\2\u0c69\u0c6a\7\u0198\2\2\u0c6a\u0c6b")
        buf.write("\7\u020f\2\2\u0c6b\u0c6c\5\u01d4\u00eb\2\u0c6c\u0c6d\7")
        buf.write("\u0210\2\2\u0c6d\u0183\3\2\2\2\u0c6e\u0c70\7\u010e\2\2")
        buf.write("\u0c6f\u0c71\7\u0162\2\2\u0c70\u0c6f\3\2\2\2\u0c70\u0c71")
        buf.write("\3\2\2\2\u0c71\u0c72\3\2\2\2\u0c72\u0c73\7\'\2\2\u0c73")
        buf.write("\u0c78\5\u0186\u00c4\2\u0c74\u0c75\7\u0215\2\2\u0c75\u0c77")
        buf.write("\5\u0186\u00c4\2\u0c76\u0c74\3\2\2\2\u0c77\u0c7a\3\2\2")
        buf.write("\2\u0c78\u0c76\3\2\2\2\u0c78\u0c79\3\2\2\2\u0c79\u0185")
        buf.write("\3\2\2\2\u0c7a\u0c78\3\2\2\2\u0c7b\u0c7d\5\u01d6\u00ec")
        buf.write("\2\u0c7c\u0c7e\t$\2\2\u0c7d\u0c7c\3\2\2\2\u0c7d\u0c7e")
        buf.write("\3\2\2\2\u0c7e\u0c81\3\2\2\2\u0c7f\u0c80\7\u00ff\2\2\u0c80")
        buf.write("\u0c82\t%\2\2\u0c81\u0c7f\3\2\2\2\u0c81\u0c82\3\2\2\2")
        buf.write("\u0c82\u0187\3\2\2\2\u0c83\u0c84\7\u0096\2\2\u0c84\u0c86")
        buf.write("\7\u0199\2\2\u0c85\u0c87\5\u018a\u00c6\2\u0c86\u0c85\3")
        buf.write("\2\2\2\u0c86\u0c87\3\2\2\2\u0c87\u0c89\3\2\2\2\u0c88\u0c8a")
        buf.write("\5\u018c\u00c7\2\u0c89\u0c88\3\2\2\2\u0c89\u0c8a\3\2\2")
        buf.write("\2\u0c8a\u0189\3\2\2\2\u0c8b\u0c8c\7\u0104\2\2\u0c8c\u0c91")
        buf.write("\5\u02b2\u015a\2\u0c8d\u0c8e\7\u0215\2\2\u0c8e\u0c90\5")
        buf.write("\u02b2\u015a\2\u0c8f\u0c8d\3\2\2\2\u0c90\u0c93\3\2\2\2")
        buf.write("\u0c91\u0c8f\3\2\2\2\u0c91\u0c92\3\2\2\2\u0c92\u018b\3")
        buf.write("\2\2\2\u0c93\u0c91\3\2\2\2\u0c94\u0c95\7\u0167\2\2\u0c95")
        buf.write("\u0c9a\7\u00d1\2\2\u0c96\u0c9a\7\u00fd\2\2\u0c97\u0c98")
        buf.write("\7\u01a9\2\2\u0c98\u0c9a\5\u01d6\u00ec\2\u0c99\u0c94\3")
        buf.write("\2\2\2\u0c99\u0c96\3\2\2\2\u0c99\u0c97\3\2\2\2\u0c9a\u018d")
        buf.write("\3\2\2\2\u0c9b\u0c9c\7\u0199\2\2\u0c9c\u0c9d\5\u01bc\u00df")
        buf.write("\2\u0c9d\u0c9f\5\u0190\u00c9\2\u0c9e\u0ca0\5\u026c\u0137")
        buf.write("\2\u0c9f\u0c9e\3\2\2\2\u0c9f\u0ca0\3\2\2\2\u0ca0\u0ca2")
        buf.write("\3\2\2\2\u0ca1\u0ca3\5\u01be\u00e0\2\u0ca2\u0ca1\3\2\2")
        buf.write("\2\u0ca2\u0ca3\3\2\2\2\u0ca3\u0ca5\3\2\2\2\u0ca4\u0ca6")
        buf.write("\5\u01c0\u00e1\2\u0ca5\u0ca4\3\2\2\2\u0ca5\u0ca6\3\2\2")
        buf.write("\2\u0ca6\u018f\3\2\2\2\u0ca7\u0cb7\7\u015c\2\2\u0ca8\u0cad")
        buf.write("\5\u0192\u00ca\2\u0ca9\u0caa\7\u0215\2\2\u0caa\u0cac\5")
        buf.write("\u0192\u00ca\2\u0cab\u0ca9\3\2\2\2\u0cac\u0caf\3\2\2\2")
        buf.write("\u0cad\u0cab\3\2\2\2\u0cad\u0cae\3\2\2\2\u0cae\u0cb8\3")
        buf.write("\2\2\2\u0caf\u0cad\3\2\2\2\u0cb0\u0cb1\7\u01a0\2\2\u0cb1")
        buf.write("\u0cb2\7\u020f\2\2\u0cb2\u0cb3\5\u02e0\u0171\2\u0cb3\u0cb4")
        buf.write("\7\u0210\2\2\u0cb4\u0cb5\7\u0226\2\2\u0cb5\u0cb6\5\u01d6")
        buf.write("\u00ec\2\u0cb6\u0cb8\3\2\2\2\u0cb7\u0ca8\3\2\2\2\u0cb7")
        buf.write("\u0cb0\3\2\2\2\u0cb8\u0191\3\2\2\2\u0cb9\u0cba\5\u02b2")
        buf.write("\u015a\2\u0cba\u0cbb\7\u0226\2\2\u0cbb\u0cbc\5\u01d6\u00ec")
        buf.write("\2\u0cbc\u0ccb\3\2\2\2\u0cbd\u0cbe\7\u020f\2\2\u0cbe\u0cc3")
        buf.write("\5\u02b2\u015a\2\u0cbf\u0cc0\7\u0215\2\2\u0cc0\u0cc2\5")
        buf.write("\u02b2\u015a\2\u0cc1\u0cbf\3\2\2\2\u0cc2\u0cc5\3\2\2\2")
        buf.write("\u0cc3\u0cc1\3\2\2\2\u0cc3\u0cc4\3\2\2\2\u0cc4\u0cc6\3")
        buf.write("\2\2\2\u0cc5\u0cc3\3\2\2\2\u0cc6\u0cc7\7\u0210\2\2\u0cc7")
        buf.write("\u0cc8\7\u0226\2\2\u0cc8\u0cc9\5\u0122\u0092\2\u0cc9\u0ccb")
        buf.write("\3\2\2\2\u0cca\u0cb9\3\2\2\2\u0cca\u0cbd\3\2\2\2\u0ccb")
        buf.write("\u0193\3\2\2\2\u0ccc\u0cce\7i\2\2\u0ccd\u0ccf\7\u0099")
        buf.write("\2\2\u0cce\u0ccd\3\2\2\2\u0cce\u0ccf\3\2\2\2\u0ccf\u0cd0")
        buf.write("\3\2\2\2\u0cd0\u0cd2\5\u01bc\u00df\2\u0cd1\u0cd3\5\u026c")
        buf.write("\u0137\2\u0cd2\u0cd1\3\2\2\2\u0cd2\u0cd3\3\2\2\2\u0cd3")
        buf.write("\u0cd5\3\2\2\2\u0cd4\u0cd6\5\u01be\u00e0\2\u0cd5\u0cd4")
        buf.write("\3\2\2\2\u0cd5\u0cd6\3\2\2\2\u0cd6\u0cd8\3\2\2\2\u0cd7")
        buf.write("\u0cd9\5\u01c0\u00e1\2\u0cd8\u0cd7\3\2\2\2\u0cd8\u0cd9")
        buf.write("\3\2\2\2\u0cd9\u0195\3\2\2\2\u0cda\u0cdd\7\u00b4\2\2\u0cdb")
        buf.write("\u0cde\5\u0198\u00cd\2\u0cdc\u0cde\5\u019a\u00ce\2\u0cdd")
        buf.write("\u0cdb\3\2\2\2\u0cdd\u0cdc\3\2\2\2\u0cde\u0197\3\2\2\2")
        buf.write("\u0cdf\u0ce5\5\u01a4\u00d3\2\u0ce0\u0ce2\5\u01a6\u00d4")
        buf.write("\2\u0ce1\u0ce3\5\u01be\u00e0\2\u0ce2\u0ce1\3\2\2\2\u0ce2")
        buf.write("\u0ce3\3\2\2\2\u0ce3\u0ce6\3\2\2\2\u0ce4\u0ce6\5\u0118")
        buf.write("\u008d\2\u0ce5\u0ce0\3\2\2\2\u0ce5\u0ce4\3\2\2\2\u0ce6")
        buf.write("\u0ce8\3\2\2\2\u0ce7\u0ce9\5\u01c0\u00e1\2\u0ce8\u0ce7")
        buf.write("\3\2\2\2\u0ce8\u0ce9\3\2\2\2\u0ce9\u0199\3\2\2\2\u0cea")
        buf.write("\u0cec\7\b\2\2\u0ceb\u0ced\5\u019c\u00cf\2\u0cec\u0ceb")
        buf.write("\3\2\2\2\u0ced\u0cee\3\2\2\2\u0cee\u0cec\3\2\2\2\u0cee")
        buf.write("\u0cef\3\2\2\2\u0cef\u0cf2\3\2\2\2\u0cf0\u0cf2\5\u019e")
        buf.write("\u00d0\2\u0cf1\u0cea\3\2\2\2\u0cf1\u0cf0\3\2\2\2\u0cf2")
        buf.write("\u0cf3\3\2\2\2\u0cf3\u0cf4\5\u0118\u008d\2\u0cf4\u019b")
        buf.write("\3\2\2\2\u0cf5\u0cf7\5\u01a4\u00d3\2\u0cf6\u0cf8\5\u01a6")
        buf.write("\u00d4\2\u0cf7\u0cf6\3\2\2\2\u0cf7\u0cf8\3\2\2\2\u0cf8")
        buf.write("\u0cfa\3\2\2\2\u0cf9\u0cfb\5\u01c0\u00e1\2\u0cfa\u0cf9")
        buf.write("\3\2\2\2\u0cfa\u0cfb\3\2\2\2\u0cfb\u019d\3\2\2\2\u0cfc")
        buf.write("\u0cfe\t&\2\2\u0cfd\u0cfc\3\2\2\2\u0cfd\u0cfe\3\2\2\2")
        buf.write("\u0cfe\u0d00\3\2\2\2\u0cff\u0d01\5\u01a0\u00d1\2\u0d00")
        buf.write("\u0cff\3\2\2\2\u0d01\u0d02\3\2\2\2\u0d02\u0d00\3\2\2\2")
        buf.write("\u0d02\u0d03\3\2\2\2\u0d03\u0d05\3\2\2\2\u0d04\u0d06\5")
        buf.write("\u01a2\u00d2\2\u0d05\u0d04\3\2\2\2\u0d05\u0d06\3\2\2\2")
        buf.write("\u0d06\u019f\3\2\2\2\u0d07\u0d08\7\u01ac\2\2\u0d08\u0d09")
        buf.write("\5\u01d4\u00eb\2\u0d09\u0d0b\7\u017f\2\2\u0d0a\u0d0c\5")
        buf.write("\u019c\u00cf\2\u0d0b\u0d0a\3\2\2\2\u0d0c\u0d0d\3\2\2\2")
        buf.write("\u0d0d\u0d0b\3\2\2\2\u0d0d\u0d0e\3\2\2\2\u0d0e\u01a1\3")
        buf.write("\2\2\2\u0d0f\u0d11\7w\2\2\u0d10\u0d12\5\u019c\u00cf\2")
        buf.write("\u0d11\u0d10\3\2\2\2\u0d12\u0d13\3\2\2\2\u0d13\u0d11\3")
        buf.write("\2\2\2\u0d13\u0d14\3\2\2\2\u0d14\u01a3\3\2\2\2\u0d15\u0d16")
        buf.write("\7\u00bb\2\2\u0d16\u0d22\5\u01bc\u00df\2\u0d17\u0d18\7")
        buf.write("\u020f\2\2\u0d18\u0d1d\5\u02b2\u015a\2\u0d19\u0d1a\7\u0215")
        buf.write("\2\2\u0d1a\u0d1c\5\u02b2\u015a\2\u0d1b\u0d19\3\2\2\2\u0d1c")
        buf.write("\u0d1f\3\2\2\2\u0d1d\u0d1b\3\2\2\2\u0d1d\u0d1e\3\2\2\2")
        buf.write("\u0d1e\u0d20\3\2\2\2\u0d1f\u0d1d\3\2\2\2\u0d20\u0d21\7")
        buf.write("\u0210\2\2\u0d21\u0d23\3\2\2\2\u0d22\u0d17\3\2\2\2\u0d22")
        buf.write("\u0d23\3\2\2\2\u0d23\u01a5\3\2\2\2\u0d24\u0d25\7\u01a1")
        buf.write("\2\2\u0d25\u0d26\5\u01d2\u00ea\2\u0d26\u01a7\3\2\2\2\u0d27")
        buf.write("\u0d28\7\u00dd\2\2\u0d28\u0d29\7\u00bb\2\2\u0d29\u0d2b")
        buf.write("\5\u02b4\u015b\2\u0d2a\u0d2c\5\u0268\u0135\2\u0d2b\u0d2a")
        buf.write("\3\2\2\2\u0d2b\u0d2c\3\2\2\2\u0d2c\u0d2d\3\2\2\2\u0d2d")
        buf.write("\u0d2e\7\u019e\2\2\u0d2e\u0d2f\5\u01b2\u00da\2\u0d2f\u0d30")
        buf.write("\7\u0108\2\2\u0d30\u0d31\7\u020f\2\2\u0d31\u0d32\5\u01d4")
        buf.write("\u00eb\2\u0d32\u0d3b\7\u0210\2\2\u0d33\u0d35\5\u01aa\u00d6")
        buf.write("\2\u0d34\u0d36\5\u01b0\u00d9\2\u0d35\u0d34\3\2\2\2\u0d35")
        buf.write("\u0d36\3\2\2\2\u0d36\u0d3c\3\2\2\2\u0d37\u0d39\5\u01b0")
        buf.write("\u00d9\2\u0d38\u0d3a\5\u01aa\u00d6\2\u0d39\u0d38\3\2\2")
        buf.write("\2\u0d39\u0d3a\3\2\2\2\u0d3a\u0d3c\3\2\2\2\u0d3b\u0d33")
        buf.write("\3\2\2\2\u0d3b\u0d37\3\2\2\2\u0d3b\u0d3c\3\2\2\2\u0d3c")
        buf.write("\u0d3e\3\2\2\2\u0d3d\u0d3f\5\u01c0\u00e1\2\u0d3e\u0d3d")
        buf.write("\3\2\2\2\u0d3e\u0d3f\3\2\2\2\u0d3f\u01a9\3\2\2\2\u0d40")
        buf.write("\u0d41\7\u01ac\2\2\u0d41\u0d42\7\u00d9\2\2\u0d42\u0d43")
        buf.write("\7\u017f\2\2\u0d43\u0d44\7\u0199\2\2\u0d44\u0d45\7\u015c")
        buf.write("\2\2\u0d45\u0d4a\5\u01ac\u00d7\2\u0d46\u0d47\7\u0215\2")
        buf.write("\2\u0d47\u0d49\5\u01ac\u00d7\2\u0d48\u0d46\3\2\2\2\u0d49")
        buf.write("\u0d4c\3\2\2\2\u0d4a\u0d48\3\2\2\2\u0d4a\u0d4b\3\2\2\2")
        buf.write("\u0d4b\u0d4e\3\2\2\2\u0d4c\u0d4a\3\2\2\2\u0d4d\u0d4f\5")
        buf.write("\u026c\u0137\2\u0d4e\u0d4d\3\2\2\2\u0d4e\u0d4f\3\2\2\2")
        buf.write("\u0d4f\u0d51\3\2\2\2\u0d50\u0d52\5\u01ae\u00d8\2\u0d51")
        buf.write("\u0d50\3\2\2\2\u0d51\u0d52\3\2\2\2\u0d52\u01ab\3\2\2\2")
        buf.write("\u0d53\u0d54\5\u02b2\u015a\2\u0d54\u0d55\7\u0226\2\2\u0d55")
        buf.write("\u0d56\5\u01d6\u00ec\2\u0d56\u01ad\3\2\2\2\u0d57\u0d58")
        buf.write("\7i\2\2\u0d58\u0d59\5\u026c\u0137\2\u0d59\u01af\3\2\2")
        buf.write("\2\u0d5a\u0d5b\7\u01ac\2\2\u0d5b\u0d5c\7\u00fc\2\2\u0d5c")
        buf.write("\u0d5d\7\u00d9\2\2\u0d5d\u0d5e\7\u017f\2\2\u0d5e\u0d6a")
        buf.write("\7\u00b4\2\2\u0d5f\u0d60\7\u020f\2\2\u0d60\u0d65\5\u02b2")
        buf.write("\u015a\2\u0d61\u0d62\7\u0215\2\2\u0d62\u0d64\5\u02b2\u015a")
        buf.write("\2\u0d63\u0d61\3\2\2\2\u0d64\u0d67\3\2\2\2\u0d65\u0d63")
        buf.write("\3\2\2\2\u0d65\u0d66\3\2\2\2\u0d66\u0d68\3\2\2\2\u0d67")
        buf.write("\u0d65\3\2\2\2\u0d68\u0d69\7\u0210\2\2\u0d69\u0d6b\3\2")
        buf.write("\2\2\u0d6a\u0d5f\3\2\2\2\u0d6a\u0d6b\3\2\2\2\u0d6b\u0d6c")
        buf.write("\3\2\2\2\u0d6c\u0d6d\7\u01a1\2\2\u0d6d\u0d6f\5\u01d2\u00ea")
        buf.write("\2\u0d6e\u0d70\5\u026c\u0137\2\u0d6f\u0d6e\3\2\2\2\u0d6f")
        buf.write("\u0d70\3\2\2\2\u0d70\u01b1\3\2\2\2\u0d71\u0d77\5\u02b4")
        buf.write("\u015b\2\u0d72\u0d73\7\u020f\2\2\u0d73\u0d74\5\u0118\u008d")
        buf.write("\2\u0d74\u0d75\7\u0210\2\2\u0d75\u0d77\3\2\2\2\u0d76\u0d71")
        buf.write("\3\2\2\2\u0d76\u0d72\3\2\2\2\u0d77\u0d79\3\2\2\2\u0d78")
        buf.write("\u0d7a\5\u0268\u0135\2\u0d79\u0d78\3\2\2\2\u0d79\u0d7a")
        buf.write("\3\2\2\2\u0d7a\u01b3\3\2\2\2\u0d7b\u0d7c\7\u00d0\2\2\u0d7c")
        buf.write("\u0d7d\7\u017d\2\2\u0d7d\u0d82\5\u01b8\u00dd\2\u0d7e\u0d7f")
        buf.write("\7\u0215\2\2\u0d7f\u0d81\5\u01b8\u00dd\2\u0d80\u0d7e\3")
        buf.write("\2\2\2\u0d81\u0d84\3\2\2\2\u0d82\u0d80\3\2\2\2\u0d82\u0d83")
        buf.write("\3\2\2\2\u0d83\u0d85\3\2\2\2\u0d84\u0d82\3\2\2\2\u0d85")
        buf.write("\u0d86\7\u00a7\2\2\u0d86\u0d87\5\u01ba\u00de\2\u0d87\u0d89")
        buf.write("\7\u00e2\2\2\u0d88\u0d8a\5\u01b6\u00dc\2\u0d89\u0d88\3")
        buf.write("\2\2\2\u0d89\u0d8a\3\2\2\2\u0d8a\u01b5\3\2\2\2\u0d8b\u0d8c")
        buf.write("\7\u01a9\2\2\u0d8c\u0d8f\5\u01d6\u00ec\2\u0d8d\u0d8f\7")
        buf.write("\u00fd\2\2\u0d8e\u0d8b\3\2\2\2\u0d8e\u0d8d\3\2\2\2\u0d8f")
        buf.write("\u01b7\3\2\2\2\u0d90\u0d92\5\u02b4\u015b\2\u0d91\u0d93")
        buf.write("\5\u0264\u0133\2\u0d92\u0d91\3\2\2\2\u0d92\u0d93\3\2\2")
        buf.write("\2\u0d93\u01b9\3\2\2\2\u0d94\u0d95\7\u0146\2\2\u0d95\u0da1")
        buf.write("\7\u015f\2\2\u0d96\u0d97\7\u0146\2\2\u0d97\u0da1\7\u0086")
        buf.write("\2\2\u0d98\u0d9a\7\u015f\2\2\u0d99\u0d9b\7\u0199\2\2\u0d9a")
        buf.write("\u0d99\3\2\2\2\u0d9a\u0d9b\3\2\2\2\u0d9b\u0da1\3\2\2\2")
        buf.write("\u0d9c\u0d9d\7\u015f\2\2\u0d9d\u0d9e\7\u0146\2\2\u0d9e")
        buf.write("\u0da1\7\u0086\2\2\u0d9f\u0da1\7\u0086\2\2\u0da0\u0d94")
        buf.write("\3\2\2\2\u0da0\u0d96\3\2\2\2\u0da0\u0d98\3\2\2\2\u0da0")
        buf.write("\u0d9c\3\2\2\2\u0da0\u0d9f\3\2\2\2\u0da1\u01bb\3\2\2\2")
        buf.write("\u0da2\u0da9\5\u01c6\u00e4\2\u0da3\u0da4\7\u0109\2\2\u0da4")
        buf.write("\u0da5\7\u020f\2\2\u0da5\u0da6\5\u01c6\u00e4\2\u0da6\u0da7")
        buf.write("\7\u0210\2\2\u0da7\u0da9\3\2\2\2\u0da8\u0da2\3\2\2\2\u0da8")
        buf.write("\u0da3\3\2\2\2\u0da9\u0dab\3\2\2\2\u0daa\u0dac\5\u0268")
        buf.write("\u0135\2\u0dab\u0daa\3\2\2\2\u0dab\u0dac\3\2\2\2\u0dac")
        buf.write("\u01bd\3\2\2\2\u0dad\u0dae\t\23\2\2\u0dae\u0db3\5\u01d6")
        buf.write("\u00ec\2\u0daf\u0db0\7\u0215\2\2\u0db0\u0db2\5\u01d6\u00ec")
        buf.write("\2\u0db1\u0daf\3\2\2\2\u0db2\u0db5\3\2\2\2\u0db3\u0db1")
        buf.write("\3\2\2\2\u0db3\u0db4\3\2\2\2\u0db4\u0db6\3\2\2\2\u0db5")
        buf.write("\u0db3\3\2\2\2\u0db6\u0db7\5\u0270\u0139\2\u0db7\u01bf")
        buf.write("\3\2\2\2\u0db8\u0db9\7\u00d2\2\2\u0db9\u0dbb\7\177\2\2")
        buf.write("\u0dba\u0dbc\5\u01c2\u00e2\2\u0dbb\u0dba\3\2\2\2\u0dbb")
        buf.write("\u0dbc\3\2\2\2\u0dbc\u0dbe\3\2\2\2\u0dbd\u0dbf\5\u01d6")
        buf.write("\u00ec\2\u0dbe\u0dbd\3\2\2\2\u0dbe\u0dbf\3\2\2\2\u0dbf")
        buf.write("\u0dc1\3\2\2\2\u0dc0\u0dc2\5\u01c4\u00e3\2\u0dc1\u0dc0")
        buf.write("\3\2\2\2\u0dc1\u0dc2\3\2\2\2\u0dc2\u01c1\3\2\2\2\u0dc3")
        buf.write("\u0dc4\7\u00bb\2\2\u0dc4\u0dc5\5\u02b4\u015b\2\u0dc5\u01c3")
        buf.write("\3\2\2\2\u0dc6\u0dc7\7\u0138\2\2\u0dc7\u0dca\7\u00ce\2")
        buf.write("\2\u0dc8\u0dcb\7\u0196\2\2\u0dc9\u0dcb\5\u01d6\u00ec\2")
        buf.write("\u0dca\u0dc8\3\2\2\2\u0dca\u0dc9\3\2\2\2\u0dcb\u01c5\3")
        buf.write("\2\2\2\u0dcc\u0dd9\5\u01c8\u00e5\2\u0dcd\u0dce\7\u020f")
        buf.write("\2\2\u0dce\u0dd0\5\u0118\u008d\2\u0dcf\u0dd1\5\u01ca\u00e6")
        buf.write("\2\u0dd0\u0dcf\3\2\2\2\u0dd0\u0dd1\3\2\2\2\u0dd1\u0dd2")
        buf.write("\3\2\2\2\u0dd2\u0dd3\7\u0210\2\2\u0dd3\u0dd9\3\2\2\2\u0dd4")
        buf.write("\u0dd6\5\u02b4\u015b\2\u0dd5\u0dd7\5\u01cc\u00e7\2\u0dd6")
        buf.write("\u0dd5\3\2\2\2\u0dd6\u0dd7\3\2\2\2\u0dd7\u0dd9\3\2\2\2")
        buf.write("\u0dd8\u0dcc\3\2\2\2\u0dd8\u0dcd\3\2\2\2\u0dd8\u0dd4\3")
        buf.write("\2\2\2\u0dd9\u01c7\3\2\2\2\u0dda\u0de7\t\'\2\2\u0ddb\u0ddc")
        buf.write("\7\u020f\2\2\u0ddc\u0ddd\5\u0122\u0092\2\u0ddd\u0dde\7")
        buf.write("\u0210\2\2\u0dde\u0de8\3\2\2\2\u0ddf\u0de0\7\u020f\2\2")
        buf.write("\u0de0\u0de1\5\u01d6\u00ec\2\u0de1\u0de5\7\u0210\2\2\u0de2")
        buf.write("\u0de3\7\u020f\2\2\u0de3\u0de4\7\u0213\2\2\u0de4\u0de6")
        buf.write("\7\u0210\2\2\u0de5\u0de2\3\2\2\2\u0de5\u0de6\3\2\2\2\u0de6")
        buf.write("\u0de8\3\2\2\2\u0de7\u0ddb\3\2\2\2\u0de7\u0ddf\3\2\2\2")
        buf.write("\u0de8\u01c9\3\2\2\2\u0de9\u0df2\7\u01b0\2\2\u0dea\u0deb")
        buf.write("\7\u0132\2\2\u0deb\u0df3\7\u0109\2\2\u0dec\u0ded\7\63")
        buf.write("\2\2\u0ded\u0df0\7\u010b\2\2\u0dee\u0def\7E\2\2\u0def")
        buf.write("\u0df1\5\u0290\u0149\2\u0df0\u0dee\3\2\2\2\u0df0\u0df1")
        buf.write("\3\2\2\2\u0df1\u0df3\3\2\2\2\u0df2\u0dea\3\2\2\2\u0df2")
        buf.write("\u0dec\3\2\2\2\u0df3\u01cb\3\2\2\2\u0df4\u0df6\7\u014a")
        buf.write("\2\2\u0df5\u0df7\7!\2\2\u0df6\u0df5\3\2\2\2\u0df6\u0df7")
        buf.write("\3\2\2\2\u0df7\u0df8\3\2\2\2\u0df8\u0df9\7\u020f\2\2\u0df9")
        buf.write("\u0dfc\5\u01d6\u00ec\2\u0dfa\u0dfb\7\u0215\2\2\u0dfb\u0dfd")
        buf.write("\5\u01d6\u00ec\2\u0dfc\u0dfa\3\2\2\2\u0dfc\u0dfd\3\2\2")
        buf.write("\2\u0dfd\u0dfe\3\2\2\2\u0dfe\u0e00\7\u0210\2\2\u0dff\u0e01")
        buf.write("\5\u01ce\u00e8\2\u0e00\u0dff\3\2\2\2\u0e00\u0e01\3\2\2")
        buf.write("\2\u0e01\u01cd\3\2\2\2\u0e02\u0e03\7\u0152\2\2\u0e03\u0e04")
        buf.write("\7\u020f\2\2\u0e04\u0e05\5\u01d6\u00ec\2\u0e05\u0e06\7")
        buf.write("\u0210\2\2\u0e06\u01cf\3\2\2\2\u0e07\u0e08\7U\2\2\u0e08")
        buf.write("\u0e09\7\u020f\2\2\u0e09\u0e0a\5\u0122\u0092\2\u0e0a\u0e0b")
        buf.write("\7\u0210\2\2\u0e0b\u01d1\3\2\2\2\u0e0c\u0e0e\7\u020f\2")
        buf.write("\2\u0e0d\u0e0f\5\u01d6\u00ec\2\u0e0e\u0e0d\3\2\2\2\u0e0e")
        buf.write("\u0e0f\3\2\2\2\u0e0f\u0e14\3\2\2\2\u0e10\u0e11\7\u0215")
        buf.write("\2\2\u0e11\u0e13\5\u01d6\u00ec\2\u0e12\u0e10\3\2\2\2\u0e13")
        buf.write("\u0e16\3\2\2\2\u0e14\u0e12\3\2\2\2\u0e14\u0e15\3\2\2\2")
        buf.write("\u0e15\u0e17\3\2\2\2\u0e16\u0e14\3\2\2\2\u0e17\u0e18\7")
        buf.write("\u0210\2\2\u0e18\u01d3\3\2\2\2\u0e19\u0e1a\5\u01d6\u00ec")
        buf.write("\2\u0e1a\u01d5\3\2\2\2\u0e1b\u0e1e\5\u01d0\u00e9\2\u0e1c")
        buf.write("\u0e1e\5\u01d8\u00ed\2\u0e1d\u0e1b\3\2\2\2\u0e1d\u0e1c")
        buf.write("\3\2\2\2\u0e1e\u01d7\3\2\2\2\u0e1f\u0e20\b\u00ed\1\2\u0e20")
        buf.write("\u0e21\5\u01da\u00ee\2\u0e21\u0e27\3\2\2\2\u0e22\u0e23")
        buf.write("\f\3\2\2\u0e23\u0e24\7\u010c\2\2\u0e24\u0e26\5\u01da\u00ee")
        buf.write("\2\u0e25\u0e22\3\2\2\2\u0e26\u0e29\3\2\2\2\u0e27\u0e25")
        buf.write("\3\2\2\2\u0e27\u0e28\3\2\2\2\u0e28\u01d9\3\2\2\2\u0e29")
        buf.write("\u0e27\3\2\2\2\u0e2a\u0e2b\b\u00ee\1\2\u0e2b\u0e2c\5\u01dc")
        buf.write("\u00ef\2\u0e2c\u0e32\3\2\2\2\u0e2d\u0e2e\f\3\2\2\u0e2e")
        buf.write("\u0e2f\7\13\2\2\u0e2f\u0e31\5\u01dc\u00ef\2\u0e30\u0e2d")
        buf.write("\3\2\2\2\u0e31\u0e34\3\2\2\2\u0e32\u0e30\3\2\2\2\u0e32")
        buf.write("\u0e33\3\2\2\2\u0e33\u01db\3\2\2\2\u0e34\u0e32\3\2\2\2")
        buf.write("\u0e35\u0e36\7\u00fc\2\2\u0e36\u0e39\5\u01dc\u00ef\2\u0e37")
        buf.write("\u0e39\5\u01de\u00f0\2\u0e38\u0e35\3\2\2\2\u0e38\u0e37")
        buf.write("\3\2\2\2\u0e39\u01dd\3\2\2\2\u0e3a\u0e5c\5\u01e0\u00f1")
        buf.write("\2\u0e3b\u0e3d\7\u00bd\2\2\u0e3c\u0e3e\7\u00fc\2\2\u0e3d")
        buf.write("\u0e3c\3\2\2\2\u0e3d\u0e3e\3\2\2\2\u0e3e\u0e58\3\2\2\2")
        buf.write("\u0e3f\u0e59\7\u00fe\2\2\u0e40\u0e59\7\u00e8\2\2\u0e41")
        buf.write("\u0e59\7\u012c\2\2\u0e42\u0e59\7\u00b0\2\2\u0e43\u0e44")
        buf.write("\7\3\2\2\u0e44\u0e59\7\u015c\2\2\u0e45\u0e59\7y\2\2\u0e46")
        buf.write("\u0e48\7\u0104\2\2\u0e47\u0e49\7\u0191\2\2\u0e48\u0e47")
        buf.write("\3\2\2\2\u0e48\u0e49\3\2\2\2\u0e49\u0e4a\3\2\2\2\u0e4a")
        buf.write("\u0e4c\7\u020f\2\2\u0e4b\u0e4d\7\u0109\2\2\u0e4c\u0e4b")
        buf.write("\3\2\2\2\u0e4c\u0e4d\3\2\2\2\u0e4d\u0e4e\3\2\2\2\u0e4e")
        buf.write("\u0e53\5\u02c8\u0165\2\u0e4f\u0e50\7\u0215\2\2\u0e50\u0e52")
        buf.write("\5\u02c8\u0165\2\u0e51\u0e4f\3\2\2\2\u0e52\u0e55\3\2\2")
        buf.write("\2\u0e53\u0e51\3\2\2\2\u0e53\u0e54\3\2\2\2\u0e54\u0e56")
        buf.write("\3\2\2\2\u0e55\u0e53\3\2\2\2\u0e56\u0e57\7\u0210\2\2\u0e57")
        buf.write("\u0e59\3\2\2\2\u0e58\u0e3f\3\2\2\2\u0e58\u0e40\3\2\2\2")
        buf.write("\u0e58\u0e41\3\2\2\2\u0e58\u0e42\3\2\2\2\u0e58\u0e43\3")
        buf.write("\2\2\2\u0e58\u0e45\3\2\2\2\u0e58\u0e46\3\2\2\2\u0e59\u0e5b")
        buf.write("\3\2\2\2\u0e5a\u0e3b\3\2\2\2\u0e5b\u0e5e\3\2\2\2\u0e5c")
        buf.write("\u0e5a\3\2\2\2\u0e5c\u0e5d\3\2\2\2\u0e5d\u01df\3\2\2\2")
        buf.write("\u0e5e\u0e5c\3\2\2\2\u0e5f\u0e66\5\u01e4\u00f3\2\u0e60")
        buf.write("\u0e62\5\u01e2\u00f2\2\u0e61\u0e63\7\u0104\2\2\u0e62\u0e61")
        buf.write("\3\2\2\2\u0e62\u0e63\3\2\2\2\u0e63\u0e64\3\2\2\2\u0e64")
        buf.write("\u0e65\5\u01f2\u00fa\2\u0e65\u0e67\3\2\2\2\u0e66\u0e60")
        buf.write("\3\2\2\2\u0e66\u0e67\3\2\2\2\u0e67\u01e1\3\2\2\2\u0e68")
        buf.write("\u0e69\t(\2\2\u0e69\u01e3\3\2\2\2\u0e6a\u0e6b\b\u00f3")
        buf.write("\1\2\u0e6b\u0e6c\5\u01e6\u00f4\2\u0e6c\u0e73\3\2\2\2\u0e6d")
        buf.write("\u0e6e\f\4\2\2\u0e6e\u0e6f\5\u01e8\u00f5\2\u0e6f\u0e70")
        buf.write("\5\u01e4\u00f3\5\u0e70\u0e72\3\2\2\2\u0e71\u0e6d\3\2\2")
        buf.write("\2\u0e72\u0e75\3\2\2\2\u0e73\u0e71\3\2\2\2\u0e73\u0e74")
        buf.write("\3\2\2\2\u0e74\u01e5\3\2\2\2\u0e75\u0e73\3\2\2\2\u0e76")
        buf.write("\u0e85\5\u01f2\u00fa\2\u0e77\u0e79\7\u00fc\2\2\u0e78\u0e77")
        buf.write("\3\2\2\2\u0e78\u0e79\3\2\2\2\u0e79\u0e83\3\2\2\2\u0e7a")
        buf.write("\u0e7b\7\u00a7\2\2\u0e7b\u0e84\5\u01ee\u00f8\2\u0e7c\u0e7d")
        buf.write("\7\33\2\2\u0e7d\u0e84\5\u01f0\u00f9\2\u0e7e\u0e7f\5\u01ea")
        buf.write("\u00f6\2\u0e7f\u0e81\5\u01f2\u00fa\2\u0e80\u0e82\5\u01ec")
        buf.write("\u00f7\2\u0e81\u0e80\3\2\2\2\u0e81\u0e82\3\2\2\2\u0e82")
        buf.write("\u0e84\3\2\2\2\u0e83\u0e7a\3\2\2\2\u0e83\u0e7c\3\2\2\2")
        buf.write("\u0e83\u0e7e\3\2\2\2\u0e84\u0e86\3\2\2\2\u0e85\u0e78\3")
        buf.write("\2\2\2\u0e85\u0e86\3\2\2\2\u0e86\u01e7\3\2\2\2\u0e87\u0e8e")
        buf.write("\7\u0226\2\2\u0e88\u0e8e\5\u02e4\u0173\2\u0e89\u0e8e\7")
        buf.write("\u021d\2\2\u0e8a\u0e8e\7\u0223\2\2\u0e8b\u0e8e\5\u02e8")
        buf.write("\u0175\2\u0e8c\u0e8e\5\u02e6\u0174\2\u0e8d\u0e87\3\2\2")
        buf.write("\2\u0e8d\u0e88\3\2\2\2\u0e8d\u0e89\3\2\2\2\u0e8d\u0e8a")
        buf.write("\3\2\2\2\u0e8d\u0e8b\3\2\2\2\u0e8d\u0e8c\3\2\2\2\u0e8e")
        buf.write("\u01e9\3\2\2\2\u0e8f\u0e90\t)\2\2\u0e90\u01eb\3\2\2\2")
        buf.write("\u0e91\u0e92\7\u0080\2\2\u0e92\u0e93\5\u01f2\u00fa\2\u0e93")
        buf.write("\u01ed\3\2\2\2\u0e94\u0e95\7\u020f\2\2\u0e95\u0e96\5\u0122")
        buf.write("\u0092\2\u0e96\u0e97\7\u0210\2\2\u0e97\u0ea7\3\2\2\2\u0e98")
        buf.write("\u0e99\7\u020f\2\2\u0e99\u0e9e\5\u01f2\u00fa\2\u0e9a\u0e9b")
        buf.write("\7\u0215\2\2\u0e9b\u0e9d\5\u01f2\u00fa\2\u0e9c\u0e9a\3")
        buf.write("\2\2\2\u0e9d\u0ea0\3\2\2\2\u0e9e\u0e9c\3\2\2\2\u0e9e\u0e9f")
        buf.write("\3\2\2\2\u0e9f\u0ea1\3\2\2\2\u0ea0\u0e9e\3\2\2\2\u0ea1")
        buf.write("\u0ea2\7\u0210\2\2\u0ea2\u0ea7\3\2\2\2\u0ea3\u0ea7\5\u02d8")
        buf.write("\u016d\2\u0ea4\u0ea7\5\u02d0\u0169\2\u0ea5\u0ea7\5\u02d2")
        buf.write("\u016a\2\u0ea6\u0e94\3\2\2\2\u0ea6\u0e98\3\2\2\2\u0ea6")
        buf.write("\u0ea3\3\2\2\2\u0ea6\u0ea4\3\2\2\2\u0ea6\u0ea5\3\2\2\2")
        buf.write("\u0ea7\u01ef\3\2\2\2\u0ea8\u0ea9\5\u01f2\u00fa\2\u0ea9")
        buf.write("\u0eaa\7\13\2\2\u0eaa\u0eab\5\u01f2\u00fa\2\u0eab\u01f1")
        buf.write("\3\2\2\2\u0eac\u0eb2\5\u01f4\u00fb\2\u0ead\u0eae\5\u02ea")
        buf.write("\u0176\2\u0eae\u0eaf\5\u01f4\u00fb\2\u0eaf\u0eb1\3\2\2")
        buf.write("\2\u0eb0\u0ead\3\2\2\2\u0eb1\u0eb4\3\2\2\2\u0eb2\u0eb0")
        buf.write("\3\2\2\2\u0eb2\u0eb3\3\2\2\2\u0eb3\u01f3\3\2\2\2\u0eb4")
        buf.write("\u0eb2\3\2\2\2\u0eb5\u0eba\5\u01f6\u00fc\2\u0eb6\u0eb7")
        buf.write("\t*\2\2\u0eb7\u0eb9\5\u01f6\u00fc\2\u0eb8\u0eb6\3\2\2")
        buf.write("\2\u0eb9\u0ebc\3\2\2\2\u0eba\u0eb8\3\2\2\2\u0eba\u0ebb")
        buf.write("\3\2\2\2\u0ebb\u01f5\3\2\2\2\u0ebc\u0eba\3\2\2\2\u0ebd")
        buf.write("\u0ec2\5\u01f8\u00fd\2\u0ebe\u0ebf\t+\2\2\u0ebf\u0ec1")
        buf.write("\5\u01f8\u00fd\2\u0ec0\u0ebe\3\2\2\2\u0ec1\u0ec4\3\2\2")
        buf.write("\2\u0ec2\u0ec0\3\2\2\2\u0ec2\u0ec3\3\2\2\2\u0ec3\u01f7")
        buf.write("\3\2\2\2\u0ec4\u0ec2\3\2\2\2\u0ec5\u0ece\5\u01fc\u00ff")
        buf.write("\2\u0ec6\u0ecb\7\21\2\2\u0ec7\u0ecc\7\u00cf\2\2\u0ec8")
        buf.write("\u0ec9\7\u0180\2\2\u0ec9\u0eca\7\u01c6\2\2\u0eca\u0ecc")
        buf.write("\5\u01f2\u00fa\2\u0ecb\u0ec7\3\2\2\2\u0ecb\u0ec8\3\2\2")
        buf.write("\2\u0ecc\u0ecf\3\2\2\2\u0ecd\u0ecf\5\u01fa\u00fe\2\u0ece")
        buf.write("\u0ec6\3\2\2\2\u0ece\u0ecd\3\2\2\2\u0ece\u0ecf\3\2\2\2")
        buf.write("\u0ecf\u01f9\3\2\2\2\u0ed0\u0ed5\7[\2\2\u0ed1\u0ed2\7")
        buf.write("\u020f\2\2\u0ed2\u0ed3\5\u01f2\u00fa\2\u0ed3\u0ed4\7\u0210")
        buf.write("\2\2\u0ed4\u0ed6\3\2\2\2\u0ed5\u0ed1\3\2\2\2\u0ed5\u0ed6")
        buf.write("\3\2\2\2\u0ed6\u0ed7\3\2\2\2\u0ed7\u0ed8\7\u0189\2\2\u0ed8")
        buf.write("\u0edd\7\u0151\2\2\u0ed9\u0eda\7\u020f\2\2\u0eda\u0edb")
        buf.write("\5\u01f2\u00fa\2\u0edb\u0edc\7\u0210\2\2\u0edc\u0ede\3")
        buf.write("\2\2\2\u0edd\u0ed9\3\2\2\2\u0edd\u0ede\3\2\2\2\u0ede\u0ee9")
        buf.write("\3\2\2\2\u0edf\u0ee4\7\u01c3\2\2\u0ee0\u0ee1\7\u020f\2")
        buf.write("\2\u0ee1\u0ee2\5\u01f2\u00fa\2\u0ee2\u0ee3\7\u0210\2\2")
        buf.write("\u0ee3\u0ee5\3\2\2\2\u0ee4\u0ee0\3\2\2\2\u0ee4\u0ee5\3")
        buf.write("\2\2\2\u0ee5\u0ee6\3\2\2\2\u0ee6\u0ee7\7\u0189\2\2\u0ee7")
        buf.write("\u0ee9\7\u00e5\2\2\u0ee8\u0ed0\3\2\2\2\u0ee8\u0edf\3\2")
        buf.write("\2\2\u0ee9\u01fb\3\2\2\2\u0eea\u0eef\5\u0208\u0105\2\u0eeb")
        buf.write("\u0eec\7\u0227\2\2\u0eec\u0eed\5\u01fe\u0100\2\u0eed\u0eee")
        buf.write("\7\u0228\2\2\u0eee\u0ef0\3\2\2\2\u0eef\u0eeb\3\2\2\2\u0eef")
        buf.write("\u0ef0\3\2\2\2\u0ef0\u01fd\3\2\2\2\u0ef1\u0ef4\7\f\2\2")
        buf.write("\u0ef2\u0ef4\5\u01d6\u00ec\2\u0ef3\u0ef1\3\2\2\2\u0ef3")
        buf.write("\u0ef2\3\2\2\2\u0ef4\u0efc\3\2\2\2\u0ef5\u0ef8\7\u0215")
        buf.write("\2\2\u0ef6\u0ef9\7\f\2\2\u0ef7\u0ef9\5\u01d6\u00ec\2\u0ef8")
        buf.write("\u0ef6\3\2\2\2\u0ef8\u0ef7\3\2\2\2\u0ef9\u0efb\3\2\2\2")
        buf.write("\u0efa\u0ef5\3\2\2\2\u0efb\u0efe\3\2\2\2\u0efc\u0efa\3")
        buf.write("\2\2\2\u0efc\u0efd\3\2\2\2\u0efd\u0f09\3\2\2\2\u0efe\u0efc")
        buf.write("\3\2\2\2\u0eff\u0f04\5\u0200\u0101\2\u0f00\u0f01\7\u0215")
        buf.write("\2\2\u0f01\u0f03\5\u0200\u0101\2\u0f02\u0f00\3\2\2\2\u0f03")
        buf.write("\u0f06\3\2\2\2\u0f04\u0f02\3\2\2\2\u0f04\u0f05\3\2\2\2")
        buf.write("\u0f05\u0f09\3\2\2\2\u0f06\u0f04\3\2\2\2\u0f07\u0f09\5")
        buf.write("\u0206\u0104\2\u0f08\u0ef3\3\2\2\2\u0f08\u0eff\3\2\2\2")
        buf.write("\u0f08\u0f07\3\2\2\2\u0f09\u01ff\3\2\2\2\u0f0a\u0f0b\7")
        buf.write("\u0096\2\2\u0f0b\u0f18\5\u02b2\u015a\2\u0f0c\u0f0d\7\u00a7")
        buf.write("\2\2\u0f0d\u0f19\5\u01d2\u00ea\2\u0f0e\u0f10\5\u0202\u0102")
        buf.write("\2\u0f0f\u0f0e\3\2\2\2\u0f0f\u0f10\3\2\2\2\u0f10\u0f11")
        buf.write("\3\2\2\2\u0f11\u0f12\7\u0099\2\2\u0f12\u0f13\5\u01d6\u00ec")
        buf.write("\2\u0f13\u0f14\7\u0189\2\2\u0f14\u0f15\5\u01d6\u00ec\2")
        buf.write("\u0f15\u0f16\5\u0204\u0103\2\u0f16\u0f17\5\u01d6\u00ec")
        buf.write("\2\u0f17\u0f19\3\2\2\2\u0f18\u0f0c\3\2\2\2\u0f18\u0f0f")
        buf.write("\3\2\2\2\u0f19\u0201\3\2\2\2\u0f1a\u0f1b\7\u00ca\2\2\u0f1b")
        buf.write("\u0f1c\5\u01d6\u00ec\2\u0f1c\u0203\3\2\2\2\u0f1d\u0f1e")
        buf.write("\t,\2\2\u0f1e\u0205\3\2\2\2\u0f1f\u0f20\7\u0096\2\2\u0f20")
        buf.write("\u0f21\7\u020f\2\2\u0f21\u0f26\5\u02b2\u015a\2\u0f22\u0f23")
        buf.write("\7\u0215\2\2\u0f23\u0f25\5\u02b2\u015a\2\u0f24\u0f22\3")
        buf.write("\2\2\2\u0f25\u0f28\3\2\2\2\u0f26\u0f24\3\2\2\2\u0f26\u0f27")
        buf.write("\3\2\2\2\u0f27\u0f29\3\2\2\2\u0f28\u0f26\3\2\2\2\u0f29")
        buf.write("\u0f2a\7\u0210\2\2\u0f2a\u0f2b\7\u00a7\2\2\u0f2b\u0f38")
        buf.write("\7\u020f\2\2\u0f2c\u0f39\5\u0122\u0092\2\u0f2d\u0f2e\7")
        buf.write("\u020f\2\2\u0f2e\u0f33\5\u01d2\u00ea\2\u0f2f\u0f30\7\u0215")
        buf.write("\2\2\u0f30\u0f32\5\u01d2\u00ea\2\u0f31\u0f2f\3\2\2\2\u0f32")
        buf.write("\u0f35\3\2\2\2\u0f33\u0f31\3\2\2\2\u0f33\u0f34\3\2\2\2")
        buf.write("\u0f34\u0f36\3\2\2\2\u0f35\u0f33\3\2\2\2\u0f36\u0f37\7")
        buf.write("\u0210\2\2\u0f37\u0f39\3\2\2\2\u0f38\u0f2c\3\2\2\2\u0f38")
        buf.write("\u0f2d\3\2\2\2\u0f39\u0f3a\3\2\2\2\u0f3a\u0f3b\7\u0210")
        buf.write("\2\2\u0f3b\u0207\3\2\2\2\u0f3c\u0f3d\t*\2\2\u0f3d\u0f4d")
        buf.write("\5\u0208\u0105\2\u0f3e\u0f3f\7\u012d\2\2\u0f3f\u0f4d\5")
        buf.write("\u0208\u0105\2\u0f40\u0f41\7C\2\2\u0f41\u0f4d\5\u0208")
        buf.write("\u0105\2\u0f42\u0f43\7\u00f0\2\2\u0f43\u0f4d\5\u0208\u0105")
        buf.write("\2\u0f44\u0f45\7p\2\2\u0f45\u0f4d\5\u0208\u0105\2\u0f46")
        buf.write("\u0f47\7\b\2\2\u0f47\u0f4d\5\u0208\u0105\2\u0f48\u0f4d")
        buf.write("\5\u020a\u0106\2\u0f49\u0f4d\5\u021c\u010f\2\u0f4a\u0f4d")
        buf.write("\5\u0220\u0111\2\u0f4b\u0f4d\5\u0216\u010c\2\u0f4c\u0f3c")
        buf.write("\3\2\2\2\u0f4c\u0f3e\3\2\2\2\u0f4c\u0f40\3\2\2\2\u0f4c")
        buf.write("\u0f42\3\2\2\2\u0f4c\u0f44\3\2\2\2\u0f4c\u0f46\3\2\2\2")
        buf.write("\u0f4c\u0f48\3\2\2\2\u0f4c\u0f49\3\2\2\2\u0f4c\u0f4a\3")
        buf.write("\2\2\2\u0f4c\u0f4b\3\2\2\2\u0f4d\u0209\3\2\2\2\u0f4e\u0f51")
        buf.write("\5\u0210\u0109\2\u0f4f\u0f51\5\u020c\u0107\2\u0f50\u0f4e")
        buf.write("\3\2\2\2\u0f50\u0f4f\3\2\2\2\u0f51\u020b\3\2\2\2\u0f52")
        buf.write("\u0f54\5\u0292\u014a\2\u0f53\u0f52\3\2\2\2\u0f53\u0f54")
        buf.write("\3\2\2\2\u0f54\u0f55\3\2\2\2\u0f55\u0f56\7.\2\2\u0f56")
        buf.write("\u0f58\5\u0216\u010c\2\u0f57\u0f59\5\u020e\u0108\2\u0f58")
        buf.write("\u0f57\3\2\2\2\u0f59\u0f5a\3\2\2\2\u0f5a\u0f58\3\2\2\2")
        buf.write("\u0f5a\u0f5b\3\2\2\2\u0f5b\u0f5d\3\2\2\2\u0f5c\u0f5e\5")
        buf.write("\u0214\u010b\2\u0f5d\u0f5c\3\2\2\2\u0f5d\u0f5e\3\2\2\2")
        buf.write("\u0f5e\u0f5f\3\2\2\2\u0f5f\u0f61\7|\2\2\u0f60\u0f62\7")
        buf.write(".\2\2\u0f61\u0f60\3\2\2\2\u0f61\u0f62\3\2\2\2\u0f62\u0f64")
        buf.write("\3\2\2\2\u0f63\u0f65\5\u0292\u014a\2\u0f64\u0f63\3\2\2")
        buf.write("\2\u0f64\u0f65\3\2\2\2\u0f65\u020d\3\2\2\2\u0f66\u0f67")
        buf.write("\7\u01ac\2\2\u0f67\u0f68\5\u01d6\u00ec\2\u0f68\u0f6b\7")
        buf.write("\u017f\2\2\u0f69\u0f6c\5\u00c4c\2\u0f6a\u0f6c\5\u01d6")
        buf.write("\u00ec\2\u0f6b\u0f69\3\2\2\2\u0f6b\u0f6a\3\2\2\2\u0f6c")
        buf.write("\u020f\3\2\2\2\u0f6d\u0f6f\5\u0292\u014a\2\u0f6e\u0f6d")
        buf.write("\3\2\2\2\u0f6e\u0f6f\3\2\2\2\u0f6f\u0f70\3\2\2\2\u0f70")
        buf.write("\u0f72\7.\2\2\u0f71\u0f73\5\u0212\u010a\2\u0f72\u0f71")
        buf.write("\3\2\2\2\u0f73\u0f74\3\2\2\2\u0f74\u0f72\3\2\2\2\u0f74")
        buf.write("\u0f75\3\2\2\2\u0f75\u0f77\3\2\2\2\u0f76\u0f78\5\u0214")
        buf.write("\u010b\2\u0f77\u0f76\3\2\2\2\u0f77\u0f78\3\2\2\2\u0f78")
        buf.write("\u0f79\3\2\2\2\u0f79\u0f7b\7|\2\2\u0f7a\u0f7c\7.\2\2\u0f7b")
        buf.write("\u0f7a\3\2\2\2\u0f7b\u0f7c\3\2\2\2\u0f7c\u0f7e\3\2\2\2")
        buf.write("\u0f7d\u0f7f\5\u0292\u014a\2\u0f7e\u0f7d\3\2\2\2\u0f7e")
        buf.write("\u0f7f\3\2\2\2\u0f7f\u0211\3\2\2\2\u0f80\u0f81\7\u01ac")
        buf.write("\2\2\u0f81\u0f82\5\u01d6\u00ec\2\u0f82\u0f85\7\u017f\2")
        buf.write("\2\u0f83\u0f86\5\u00c4c\2\u0f84\u0f86\5\u01d6\u00ec\2")
        buf.write("\u0f85\u0f83\3\2\2\2\u0f85\u0f84\3\2\2\2\u0f86\u0213\3")
        buf.write("\2\2\2\u0f87\u0f8a\7w\2\2\u0f88\u0f8b\5\u00c4c\2\u0f89")
        buf.write("\u0f8b\5\u01d6\u00ec\2\u0f8a\u0f88\3\2\2\2\u0f8a\u0f89")
        buf.write("\3\2\2\2\u0f8b\u0215\3\2\2\2\u0f8c\u0f8d\5\u02d6\u016c")
        buf.write("\2\u0f8d\u0f8e\5\u02ec\u0177\2\u0f8e\u0fa1\3\2\2\2\u0f8f")
        buf.write("\u0fa1\5\u02d0\u0169\2\u0f90\u0fa1\5\u02d8\u016d\2\u0f91")
        buf.write("\u0fa1\5\u02d2\u016a\2\u0f92\u0f9e\7\u020f\2\2\u0f93\u0f94")
        buf.write("\5\u0122\u0092\2\u0f94\u0f98\7\u0210\2\2\u0f95\u0f97\5")
        buf.write("\u0124\u0093\2\u0f96\u0f95\3\2\2\2\u0f97\u0f9a\3\2\2\2")
        buf.write("\u0f98\u0f96\3\2\2\2\u0f98\u0f99\3\2\2\2\u0f99\u0f9f\3")
        buf.write("\2\2\2\u0f9a\u0f98\3\2\2\2\u0f9b\u0f9c\5\u0218\u010d\2")
        buf.write("\u0f9c\u0f9d\7\u0210\2\2\u0f9d\u0f9f\3\2\2\2\u0f9e\u0f93")
        buf.write("\3\2\2\2\u0f9e\u0f9b\3\2\2\2\u0f9f\u0fa1\3\2\2\2\u0fa0")
        buf.write("\u0f8c\3\2\2\2\u0fa0\u0f8f\3\2\2\2\u0fa0\u0f90\3\2\2\2")
        buf.write("\u0fa0\u0f91\3\2\2\2\u0fa0\u0f92\3\2\2\2\u0fa1\u0217\3")
        buf.write("\2\2\2\u0fa2\u0fa4\5\u01d6\u00ec\2\u0fa3\u0fa5\5\u021a")
        buf.write("\u010e\2\u0fa4\u0fa3\3\2\2\2\u0fa4\u0fa5\3\2\2\2\u0fa5")
        buf.write("\u0219\3\2\2\2\u0fa6\u0fa7\7\u0215\2\2\u0fa7\u0fac\5\u01d6")
        buf.write("\u00ec\2\u0fa8\u0fa9\7\u0215\2\2\u0fa9\u0fab\5\u01d6\u00ec")
        buf.write("\2\u0faa\u0fa8\3\2\2\2\u0fab\u0fae\3\2\2\2\u0fac\u0faa")
        buf.write("\3\2\2\2\u0fac\u0fad\3\2\2\2\u0fad\u021b\3\2\2\2\u0fae")
        buf.write("\u0fac\3\2\2\2\u0faf\u0fb8\t-\2\2\u0fb0\u0fb1\7\u020f")
        buf.write("\2\2\u0fb1\u0fb2\5\u0122\u0092\2\u0fb2\u0fb3\7\u0210\2")
        buf.write("\2\u0fb3\u0fb9\3\2\2\2\u0fb4\u0fb5\7\u020f\2\2\u0fb5\u0fb6")
        buf.write("\5\u01d6\u00ec\2\u0fb6\u0fb7\7\u0210\2\2\u0fb7\u0fb9\3")
        buf.write("\2\2\2\u0fb8\u0fb0\3\2\2\2\u0fb8\u0fb4\3\2\2\2\u0fb9\u021d")
        buf.write("\3\2\2\2\u0fba\u0fbb\7\u01e3\2\2\u0fbb\u0fbc\7\u020f\2")
        buf.write("\2\u0fbc\u0fbd\5\u01d6\u00ec\2\u0fbd\u0fbe\7\u0215\2\2")
        buf.write("\u0fbe\u0fc1\5\u01d6\u00ec\2\u0fbf\u0fc0\7\u0215\2\2\u0fc0")
        buf.write("\u0fc2\5\u01d6\u00ec\2\u0fc1\u0fbf\3\2\2\2\u0fc1\u0fc2")
        buf.write("\3\2\2\2\u0fc2\u0fc3\3\2\2\2\u0fc3\u0fc4\7\u0210\2\2\u0fc4")
        buf.write("\u0ffa\3\2\2\2\u0fc5\u0fc6\7\u01e4\2\2\u0fc6\u0fc9\7\u020f")
        buf.write("\2\2\u0fc7\u0fca\5\u02d6\u016c\2\u0fc8\u0fca\5\u0220\u0111")
        buf.write("\2\u0fc9\u0fc7\3\2\2\2\u0fc9\u0fc8\3\2\2\2\u0fca\u0fcd")
        buf.write("\3\2\2\2\u0fcb\u0fcc\7\u0215\2\2\u0fcc\u0fce\5\u02de\u0170")
        buf.write("\2\u0fcd\u0fcb\3\2\2\2\u0fcd\u0fce\3\2\2\2\u0fce\u0fcf")
        buf.write("\3\2\2\2\u0fcf\u0fd0\7\u0210\2\2\u0fd0\u0ffa\3\2\2\2\u0fd1")
        buf.write("\u0fd2\7\u01d7\2\2\u0fd2\u0fd3\7\u020f\2\2\u0fd3\u0fd8")
        buf.write("\5\u01d6\u00ec\2\u0fd4\u0fd5\7\u0215\2\2\u0fd5\u0fd7\5")
        buf.write("\u01d6\u00ec\2\u0fd6\u0fd4\3\2\2\2\u0fd7\u0fda\3\2\2\2")
        buf.write("\u0fd8\u0fd6\3\2\2\2\u0fd8\u0fd9\3\2\2\2\u0fd9\u0fdb\3")
        buf.write("\2\2\2\u0fda\u0fd8\3\2\2\2\u0fdb\u0fdc\7\u0210\2\2\u0fdc")
        buf.write("\u0ffa\3\2\2\2\u0fdd\u0fde\7\64\2\2\u0fde\u0fdf\7\u020f")
        buf.write("\2\2\u0fdf\u0fe0\5\u01f2\u00fa\2\u0fe0\u0fe1\7\u019e\2")
        buf.write("\2\u0fe1\u0fe2\7\u00ed\2\2\u0fe2\u0fe3\7\u0210\2\2\u0fe3")
        buf.write("\u0ffa\3\2\2\2\u0fe4\u0fe5\7\u01de\2\2\u0fe5\u0fe6\7\u020f")
        buf.write("\2\2\u0fe6\u0fe7\5\u01d6\u00ec\2\u0fe7\u0fe8\7\u0215\2")
        buf.write("\2\u0fe8\u0fe9\5\u01d6\u00ec\2\u0fe9\u0fea\7\u0210\2\2")
        buf.write("\u0fea\u0ffa\3\2\2\2\u0feb\u0fec\7\u01e5\2\2\u0fec\u0ff4")
        buf.write("\7\u020f\2\2\u0fed\u0fef\t.\2\2\u0fee\u0fed\3\2\2\2\u0fee")
        buf.write("\u0fef\3\2\2\2\u0fef\u0ff1\3\2\2\2\u0ff0\u0ff2\5\u02de")
        buf.write("\u0170\2\u0ff1\u0ff0\3\2\2\2\u0ff1\u0ff2\3\2\2\2\u0ff2")
        buf.write("\u0ff3\3\2\2\2\u0ff3\u0ff5\7\u0099\2\2\u0ff4\u0fee\3\2")
        buf.write("\2\2\u0ff4\u0ff5\3\2\2\2\u0ff5\u0ff6\3\2\2\2\u0ff6\u0ff7")
        buf.write("\5\u01f2\u00fa\2\u0ff7\u0ff8\7\u0210\2\2\u0ff8\u0ffa\3")
        buf.write("\2\2\2\u0ff9\u0fba\3\2\2\2\u0ff9\u0fc5\3\2\2\2\u0ff9\u0fd1")
        buf.write("\3\2\2\2\u0ff9\u0fdd\3\2\2\2\u0ff9\u0fe4\3\2\2\2\u0ff9")
        buf.write("\u0feb\3\2\2\2\u0ffa\u021f\3\2\2\2\u0ffb\u0fff\5\u021e")
        buf.write("\u0110\2\u0ffc\u0fff\5\u0222\u0112\2\u0ffd\u0fff\5\u0226")
        buf.write("\u0114\2\u0ffe\u0ffb\3\2\2\2\u0ffe\u0ffc\3\2\2\2\u0ffe")
        buf.write("\u0ffd\3\2\2\2\u0fff\u0221\3\2\2\2\u1000\u1003\5\u0224")
        buf.write("\u0113\2\u1001\u1004\5\u0200\u0101\2\u1002\u1004\5\u0206")
        buf.write("\u0104\2\u1003\u1001\3\2\2\2\u1003\u1002\3\2\2\2\u1003")
        buf.write("\u1004\3\2\2\2\u1004\u0223\3\2\2\2\u1005\u1006\7\u01e6")
        buf.write("\2\2\u1006\u1008\7\u020f\2\2\u1007\u1009\t/\2\2\u1008")
        buf.write("\u1007\3\2\2\2\u1008\u1009\3\2\2\2\u1009\u100a\3\2\2\2")
        buf.write("\u100a\u100b\5\u01d6\u00ec\2\u100b\u100c\7\u0210\2\2\u100c")
        buf.write("\u1036\3\2\2\2\u100d\u100e\7O\2\2\u100e\u1016\7\u020f")
        buf.write("\2\2\u100f\u1017\7\u0212\2\2\u1010\u1012\t\32\2\2\u1011")
        buf.write("\u1010\3\2\2\2\u1011\u1012\3\2\2\2\u1012\u1013\3\2\2\2")
        buf.write("\u1013\u1015\5\u01f2\u00fa\2\u1014\u1011\3\2\2\2\u1014")
        buf.write("\u1015\3\2\2\2\u1015\u1017\3\2\2\2\u1016\u100f\3\2\2\2")
        buf.write("\u1016\u1014\3\2\2\2\u1017\u1018\3\2\2\2\u1018\u101a\7")
        buf.write("\u0210\2\2\u1019\u101b\5\u022e\u0118\2\u101a\u1019\3\2")
        buf.write("\2\2\u101a\u101b\3\2\2\2\u101b\u1036\3\2\2\2\u101c\u101d")
        buf.write("\7\u01e1\2\2\u101d\u101e\7\u020f\2\2\u101e\u1021\5\u01d6")
        buf.write("\u00ec\2\u101f\u1020\7\u0215\2\2\u1020\u1022\7\u0209\2")
        buf.write("\2\u1021\u101f\3\2\2\2\u1021\u1022\3\2\2\2\u1022\u1023")
        buf.write("\3\2\2\2\u1023\u1024\7\u0210\2\2\u1024\u1036\3\2\2\2\u1025")
        buf.write("\u1026\7\u01d4\2\2\u1026\u1028\7\u020f\2\2\u1027\u1029")
        buf.write("\t/\2\2\u1028\u1027\3\2\2\2\u1028\u1029\3\2\2\2\u1029")
        buf.write("\u102a\3\2\2\2\u102a\u102b\5\u01d6\u00ec\2\u102b\u102c")
        buf.write("\7\u0210\2\2\u102c\u1036\3\2\2\2\u102d\u102e\7\u01da\2")
        buf.write("\2\u102e\u1030\7\u020f\2\2\u102f\u1031\t/\2\2\u1030\u102f")
        buf.write("\3\2\2\2\u1030\u1031\3\2\2\2\u1031\u1032\3\2\2\2\u1032")
        buf.write("\u1033\5\u01d6\u00ec\2\u1033\u1034\7\u0210\2\2\u1034\u1036")
        buf.write("\3\2\2\2\u1035\u1005\3\2\2\2\u1035\u100d\3\2\2\2\u1035")
        buf.write("\u101c\3\2\2\2\u1035\u1025\3\2\2\2\u1035\u102d\3\2\2\2")
        buf.write("\u1036\u0225\3\2\2\2\u1037\u1038\5\u0228\u0115\2\u1038")
        buf.write("\u103a\5\u02c0\u0161\2\u1039\u103b\5\u022e\u0118\2\u103a")
        buf.write("\u1039\3\2\2\2\u103a\u103b\3\2\2\2\u103b\u117a\3\2\2\2")
        buf.write("\u103c\u103d\5\u02ee\u0178\2\u103d\u103f\5\u02c2\u0162")
        buf.write("\2\u103e\u1040\5\u0236\u011c\2\u103f\u103e\3\2\2\2\u103f")
        buf.write("\u1040\3\2\2\2\u1040\u117a\3\2\2\2\u1041\u1042\7O\2\2")
        buf.write("\u1042\u1048\7\u020f\2\2\u1043\u1049\7\u0212\2\2\u1044")
        buf.write("\u1046\t\32\2\2\u1045\u1044\3\2\2\2\u1045\u1046\3\2\2")
        buf.write("\2\u1046\u1047\3\2\2\2\u1047\u1049\5\u01f2\u00fa\2\u1048")
        buf.write("\u1043\3\2\2\2\u1048\u1045\3\2\2\2\u1049\u104a\3\2\2\2")
        buf.write("\u104a\u104c\7\u0210\2\2\u104b\u104d\5\u022e\u0118\2\u104c")
        buf.write("\u104b\3\2\2\2\u104c\u104d\3\2\2\2\u104d\u117a\3\2\2\2")
        buf.write("\u104e\u104f\t\60\2\2\u104f\u1056\7\u020f\2\2\u1050\u1051")
        buf.write("\7\u00e6\2\2\u1051\u1052\7\u020f\2\2\u1052\u1053\5\u0122")
        buf.write("\u0092\2\u1053\u1054\7\u0210\2\2\u1054\u1057\3\2\2\2\u1055")
        buf.write("\u1057\5\u01f2\u00fa\2\u1056\u1050\3\2\2\2\u1056\u1055")
        buf.write("\3\2\2\2\u1057\u1058\3\2\2\2\u1058\u1059\7\16\2\2\u1059")
        buf.write("\u105a\5\u02c8\u0165\2\u105a\u105b\7\u0210\2\2\u105b\u117a")
        buf.write("\3\2\2\2\u105c\u105d\78\2\2\u105d\u105e\7\u020f\2\2\u105e")
        buf.write("\u1064\5\u02d6\u016c\2\u105f\u1062\7\u0215\2\2\u1060\u1063")
        buf.write("\5\u02da\u016e\2\u1061\u1063\5\u02de\u0170\2\u1062\u1060")
        buf.write("\3\2\2\2\u1062\u1061\3\2\2\2\u1063\u1065\3\2\2\2\u1064")
        buf.write("\u105f\3\2\2\2\u1064\u1065\3\2\2\2\u1065\u1066\3\2\2\2")
        buf.write("\u1066\u1067\7\u0210\2\2\u1067\u117a\3\2\2\2\u1068\u1069")
        buf.write("\79\2\2\u1069\u106b\7\u020f\2\2\u106a\u106c\t\61\2\2\u106b")
        buf.write("\u106a\3\2\2\2\u106b\u106c\3\2\2\2\u106c\u106d\3\2\2\2")
        buf.write("\u106d\u106f\5\u01f2\u00fa\2\u106e\u1070\5\u023a\u011e")
        buf.write("\2\u106f\u106e\3\2\2\2\u106f\u1070\3\2\2\2\u1070\u1071")
        buf.write("\3\2\2\2\u1071\u1072\7\u0210\2\2\u1072\u117a\3\2\2\2\u1073")
        buf.write("\u1074\5\u022a\u0116\2\u1074\u1076\5\u02be\u0160\2\u1075")
        buf.write("\u1077\5\u023c\u011f\2\u1076\u1075\3\2\2\2\u1077\u1078")
        buf.write("\3\2\2\2\u1078\u1076\3\2\2\2\u1078\u1079\3\2\2\2\u1079")
        buf.write("\u117a\3\2\2\2\u107a\u107b\5\u02aa\u0156\2\u107b\u107c")
        buf.write("\t\62\2\2\u107c\u117a\3\2\2\2\u107d\u107e\7c\2\2\u107e")
        buf.write("\u107f\7\u020f\2\2\u107f\u1081\5\u01f2\u00fa\2\u1080\u1082")
        buf.write("\t\63\2\2\u1081\u1080\3\2\2\2\u1081\u1082\3\2\2\2\u1082")
        buf.write("\u1083\3\2\2\2\u1083\u1084\7\u0210\2\2\u1084\u117a\3\2")
        buf.write("\2\2\u1085\u1086\7\u008c\2\2\u1086\u1087\7\u020f\2\2\u1087")
        buf.write("\u1088\5\u02ee\u0178\2\u1088\u1089\7\u0099\2\2\u1089\u108a")
        buf.write("\5\u01f2\u00fa\2\u108a\u108b\7\u0210\2\2\u108b\u117a\3")
        buf.write("\2\2\2\u108c\u108d\t\64\2\2\u108d\u108f\5\u02c0\u0161")
        buf.write("\2\u108e\u1090\5\u02c4\u0163\2\u108f\u108e\3\2\2\2\u108f")
        buf.write("\u1090\3\2\2\2\u1090\u1091\3\2\2\2\u1091\u1092\5\u022e")
        buf.write("\u0118\2\u1092\u117a\3\2\2\2\u1093\u1094\5\u022c\u0117")
        buf.write("\2\u1094\u1095\7\u020f\2\2\u1095\u109a\5\u01d6\u00ec\2")
        buf.write("\u1096\u1097\7\u0215\2\2\u1097\u1099\5\u01d6\u00ec\2\u1098")
        buf.write("\u1096\3\2\2\2\u1099\u109c\3\2\2\2\u109a\u1098\3\2\2\2")
        buf.write("\u109a\u109b\3\2\2\2\u109b\u109e\3\2\2\2\u109c\u109a\3")
        buf.write("\2\2\2\u109d\u109f\5\u023e\u0120\2\u109e\u109d\3\2\2\2")
        buf.write("\u109e\u109f\3\2\2\2\u109f\u10a1\3\2\2\2\u10a0\u10a2\5")
        buf.write("\u0236\u011c\2\u10a1\u10a0\3\2\2\2\u10a1\u10a2\3\2\2\2")
        buf.write("\u10a2\u10a3\3\2\2\2\u10a3\u10a4\7\u0210\2\2\u10a4\u117a")
        buf.write("\3\2\2\2\u10a5\u10a6\7\u018c\2\2\u10a6\u10a7\7\u020f\2")
        buf.write("\2\u10a7\u10aa\5\u01d6\u00ec\2\u10a8\u10a9\7\u019e\2\2")
        buf.write("\u10a9\u10ab\t\65\2\2\u10aa\u10a8\3\2\2\2\u10aa\u10ab")
        buf.write("\3\2\2\2\u10ab\u10b0\3\2\2\2\u10ac\u10ad\7\u0215\2\2\u10ad")
        buf.write("\u10af\5\u01d6\u00ec\2\u10ae\u10ac\3\2\2\2\u10af\u10b2")
        buf.write("\3\2\2\2\u10b0\u10ae\3\2\2\2\u10b0\u10b1\3\2\2\2\u10b1")
        buf.write("\u10b3\3\2\2\2\u10b2\u10b0\3\2\2\2\u10b3\u10b4\7\u0210")
        buf.write("\2\2\u10b4\u117a\3\2\2\2\u10b5\u10b6\7\u018d\2\2\u10b6")
        buf.write("\u10b7\7\u020f\2\2\u10b7\u10b8\5\u01d6\u00ec\2\u10b8\u10ba")
        buf.write("\7\16\2\2\u10b9\u10bb\7\u0135\2\2\u10ba\u10b9\3\2\2\2")
        buf.write("\u10ba\u10bb\3\2\2\2\u10bb\u10bc\3\2\2\2\u10bc\u10bd\5")
        buf.write("\u02c8\u0165\2\u10bd\u10be\7\u0210\2\2\u10be\u117a\3\2")
        buf.write("\2\2\u10bf\u10c0\7\u01e5\2\2\u10c0\u10c8\7\u020f\2\2\u10c1")
        buf.write("\u10c3\t.\2\2\u10c2\u10c1\3\2\2\2\u10c2\u10c3\3\2\2\2")
        buf.write("\u10c3\u10c5\3\2\2\2\u10c4\u10c6\5\u02de\u0170\2\u10c5")
        buf.write("\u10c4\3\2\2\2\u10c5\u10c6\3\2\2\2\u10c6\u10c7\3\2\2\2")
        buf.write("\u10c7\u10c9\7\u0099\2\2\u10c8\u10c2\3\2\2\2\u10c8\u10c9")
        buf.write("\3\2\2\2\u10c9\u10ca\3\2\2\2\u10ca\u10cb\5\u01f2\u00fa")
        buf.write("\2\u10cb\u10cc\7\u0210\2\2\u10cc\u117a\3\2\2\2\u10cd\u10ce")
        buf.write("\7\u01b5\2\2\u10ce\u10cf\7\u020f\2\2\u10cf\u10d1\5\u01d6")
        buf.write("\u00ec\2\u10d0\u10d2\5\u0184\u00c3\2\u10d1\u10d0\3\2\2")
        buf.write("\2\u10d1\u10d2\3\2\2\2\u10d2\u10d3\3\2\2\2\u10d3\u10d6")
        buf.write("\7\u0210\2\2\u10d4\u10d5\7\u0208\2\2\u10d5\u10d7\5\u02d4")
        buf.write("\u016b\2\u10d6\u10d4\3\2\2\2\u10d6\u10d7\3\2\2\2\u10d7")
        buf.write("\u117a\3\2\2\2\u10d8\u10d9\t\66\2\2\u10d9\u10da\7\u020f")
        buf.write("\2\2\u10da\u10df\5\u024a\u0126\2\u10db\u10dc\7\u0215\2")
        buf.write("\2\u10dc\u10de\5\u024a\u0126\2\u10dd\u10db\3\2\2\2\u10de")
        buf.write("\u10e1\3\2\2\2\u10df\u10dd\3\2\2\2\u10df\u10e0\3\2\2\2")
        buf.write("\u10e0\u10e2\3\2\2\2\u10e1\u10df\3\2\2\2\u10e2\u10e5\7")
        buf.write("\u0210\2\2\u10e3\u10e4\7\u0208\2\2\u10e4\u10e6\5\u02d4")
        buf.write("\u016b\2\u10e5\u10e3\3\2\2\2\u10e5\u10e6\3\2\2\2\u10e6")
        buf.write("\u117a\3\2\2\2\u10e7\u10e8\7\u01b9\2\2\u10e8\u10ea\7\u020f")
        buf.write("\2\2\u10e9\u10eb\t\67\2\2\u10ea\u10e9\3\2\2\2\u10ea\u10eb")
        buf.write("\3\2\2\2\u10eb\u10ed\3\2\2\2\u10ec\u10ee\t8\2\2\u10ed")
        buf.write("\u10ec\3\2\2\2\u10ed\u10ee\3\2\2\2\u10ee\u10ef\3\2\2\2")
        buf.write("\u10ef\u10f2\5\u01d6\u00ec\2\u10f0\u10f1\7\u0215\2\2\u10f1")
        buf.write("\u10f3\5\u0242\u0122\2\u10f2\u10f0\3\2\2\2\u10f2\u10f3")
        buf.write("\3\2\2\2\u10f3\u10fb\3\2\2\2\u10f4\u10f5\7\u0215\2\2\u10f5")
        buf.write("\u10f7\5\u01d6\u00ec\2\u10f6\u10f8\5\u0266\u0134\2\u10f7")
        buf.write("\u10f6\3\2\2\2\u10f7\u10f8\3\2\2\2\u10f8\u10fa\3\2\2\2")
        buf.write("\u10f9\u10f4\3\2\2\2\u10fa\u10fd\3\2\2\2\u10fb\u10f9\3")
        buf.write("\2\2\2\u10fb\u10fc\3\2\2\2\u10fc\u10fe\3\2\2\2\u10fd\u10fb")
        buf.write("\3\2\2\2\u10fe\u1101\7\u0210\2\2\u10ff\u1100\7\u0208\2")
        buf.write("\2\u1100\u1102\5\u02d4\u016b\2\u1101\u10ff\3\2\2\2\u1101")
        buf.write("\u1102\3\2\2\2\u1102\u117a\3\2\2\2\u1103\u1104\7\u01ba")
        buf.write("\2\2\u1104\u1105\7\u020f\2\2\u1105\u1107\5\u01d6\u00ec")
        buf.write("\2\u1106\u1108\5\u0240\u0121\2\u1107\u1106\3\2\2\2\u1107")
        buf.write("\u1108\3\2\2\2\u1108\u1109\3\2\2\2\u1109\u110a\7\u0210")
        buf.write("\2\2\u110a\u117a\3\2\2\2\u110b\u110c\7\u01bd\2\2\u110c")
        buf.write("\u110d\7\u020f\2\2\u110d\u110e\t9\2\2\u110e\u1110\5\u01f2")
        buf.write("\u00fa\2\u110f\u1111\7\u01ab\2\2\u1110\u110f\3\2\2\2\u1110")
        buf.write("\u1111\3\2\2\2\u1111\u1112\3\2\2\2\u1112\u1115\7\u0210")
        buf.write("\2\2\u1113\u1114\7\u0208\2\2\u1114\u1116\5\u02d4\u016b")
        buf.write("\2\u1115\u1113\3\2\2\2\u1115\u1116\3\2\2\2\u1116\u117a")
        buf.write("\3\2\2\2\u1117\u1118\7\u01be\2\2\u1118\u111d\7\u020f\2")
        buf.write("\2\u1119\u111a\7\u00e7\2\2\u111a\u111e\5\u02e0\u0171\2")
        buf.write("\u111b\u111c\7\u0081\2\2\u111c\u111e\5\u01f2\u00fa\2\u111d")
        buf.write("\u1119\3\2\2\2\u111d\u111b\3\2\2\2\u111e\u1121\3\2\2\2")
        buf.write("\u111f\u1120\7\u0215\2\2\u1120\u1122\5\u01f2\u00fa\2\u1121")
        buf.write("\u111f\3\2\2\2\u1121\u1122\3\2\2\2\u1122\u1123\3\2\2\2")
        buf.write("\u1123\u1126\7\u0210\2\2\u1124\u1125\7\u0208\2\2\u1125")
        buf.write("\u1127\5\u02d4\u016b\2\u1126\u1124\3\2\2\2\u1126\u1127")
        buf.write("\3\2\2\2\u1127\u117a\3\2\2\2\u1128\u1129\7\u01bf\2\2\u1129")
        buf.write("\u112a\7\u020f\2\2\u112a\u112c\5\u01f2\u00fa\2\u112b\u112d")
        buf.write("\5\u0240\u0121\2\u112c\u112b\3\2\2\2\u112c\u112d\3\2\2")
        buf.write("\2\u112d\u112e\3\2\2\2\u112e\u112f\7\u013f\2\2\u112f\u1133")
        buf.write("\7H\2\2\u1130\u1131\7\u00fe\2\2\u1131\u1132\7\u0108\2")
        buf.write("\2\u1132\u1134\7y\2\2\u1133\u1130\3\2\2\2\u1133\u1134")
        buf.write("\3\2\2\2\u1134\u1135\3\2\2\2\u1135\u1138\7\u0210\2\2\u1136")
        buf.write("\u1137\7\u0208\2\2\u1137\u1139\5\u02d4\u016b\2\u1138\u1136")
        buf.write("\3\2\2\2\u1138\u1139\3\2\2\2\u1139\u117a\3\2\2\2\u113a")
        buf.write("\u113b\7\u01c0\2\2\u113b\u113c\7\u020f\2\2\u113c\u113f")
        buf.write("\5\u01f2\u00fa\2\u113d\u113e\7\u0215\2\2\u113e\u1140\5")
        buf.write("\u024c\u0127\2\u113f\u113d\3\2\2\2\u113f\u1140\3\2\2\2")
        buf.write("\u1140\u1143\3\2\2\2\u1141\u1142\7\u0215\2\2\u1142\u1144")
        buf.write("\5\u024e\u0128\2\u1143\u1141\3\2\2\2\u1143\u1144\3\2\2")
        buf.write("\2\u1144\u1145\3\2\2\2\u1145\u1148\7\u0210\2\2\u1146\u1147")
        buf.write("\7\u0208\2\2\u1147\u1149\5\u02d4\u016b\2\u1148\u1146\3")
        buf.write("\2\2\2\u1148\u1149\3\2\2\2\u1149\u117a\3\2\2\2\u114a\u114b")
        buf.write("\7\u01c1\2\2\u114b\u114c\7\u020f\2\2\u114c\u114d\t9\2")
        buf.write("\2\u114d\u1150\5\u01f2\u00fa\2\u114e\u114f\7\16\2\2\u114f")
        buf.write("\u1151\5\u02c8\u0165\2\u1150\u114e\3\2\2\2\u1150\u1151")
        buf.write("\3\2\2\2\u1151\u1153\3\2\2\2\u1152\u1154\5\u0250\u0129")
        buf.write("\2\u1153\u1152\3\2\2\2\u1153\u1154\3\2\2\2\u1154\u1156")
        buf.write("\3\2\2\2\u1155\u1157\5\u0252\u012a\2\u1156\u1155\3\2\2")
        buf.write("\2\u1156\u1157\3\2\2\2\u1157\u1159\3\2\2\2\u1158\u115a")
        buf.write("\5\u0254\u012b\2\u1159\u1158\3\2\2\2\u1159\u115a\3\2\2")
        buf.write("\2\u115a\u115d\3\2\2\2\u115b\u115c\t:\2\2\u115c\u115e")
        buf.write("\7f\2\2\u115d\u115b\3\2\2\2\u115d\u115e\3\2\2\2\u115e")
        buf.write("\u115f\3\2\2\2\u115f\u1162\7\u0210\2\2\u1160\u1161\7\u0208")
        buf.write("\2\2\u1161\u1163\5\u02d4\u016b\2\u1162\u1160\3\2\2\2\u1162")
        buf.write("\u1163\3\2\2\2\u1163\u117a\3\2\2\2\u1164\u1165\7\u01c2")
        buf.write("\2\2\u1165\u1167\7\u020f\2\2\u1166\u1168\5\u0244\u0123")
        buf.write("\2\u1167\u1166\3\2\2\2\u1167\u1168\3\2\2\2\u1168\u1169")
        buf.write("\3\2\2\2\u1169\u116b\5\u01f2\u00fa\2\u116a\u116c\5\u0240")
        buf.write("\u0121\2\u116b\u116a\3\2\2\2\u116b\u116c\3\2\2\2\u116c")
        buf.write("\u1172\3\2\2\2\u116d\u116e\7;\2\2\u116e\u116f\5\u0246")
        buf.write("\u0124\2\u116f\u1170\7\u0215\2\2\u1170\u1171\5\u0246\u0124")
        buf.write("\2\u1171\u1173\3\2\2\2\u1172\u116d\3\2\2\2\u1172\u1173")
        buf.write("\3\2\2\2\u1173\u1174\3\2\2\2\u1174\u1177\7\u0210\2\2\u1175")
        buf.write("\u1176\7\u0208\2\2\u1176\u1178\5\u02d4\u016b\2\u1177\u1175")
        buf.write("\3\2\2\2\u1177\u1178\3\2\2\2\u1178\u117a\3\2\2\2\u1179")
        buf.write("\u1037\3\2\2\2\u1179\u103c\3\2\2\2\u1179\u1041\3\2\2\2")
        buf.write("\u1179\u104e\3\2\2\2\u1179\u105c\3\2\2\2\u1179\u1068\3")
        buf.write("\2\2\2\u1179\u1073\3\2\2\2\u1179\u107a\3\2\2\2\u1179\u107d")
        buf.write("\3\2\2\2\u1179\u1085\3\2\2\2\u1179\u108c\3\2\2\2\u1179")
        buf.write("\u1093\3\2\2\2\u1179\u10a5\3\2\2\2\u1179\u10b5\3\2\2\2")
        buf.write("\u1179\u10bf\3\2\2\2\u1179\u10cd\3\2\2\2\u1179\u10d8\3")
        buf.write("\2\2\2\u1179\u10e7\3\2\2\2\u1179\u1103\3\2\2\2\u1179\u110b")
        buf.write("\3\2\2\2\u1179\u1117\3\2\2\2\u1179\u1128\3\2\2\2\u1179")
        buf.write("\u113a\3\2\2\2\u1179\u114a\3\2\2\2\u1179\u1164\3\2\2\2")
        buf.write("\u117a\u0227\3\2\2\2\u117b\u117c\t;\2\2\u117c\u0229\3")
        buf.write("\2\2\2\u117d\u117e\t<\2\2\u117e\u022b\3\2\2\2\u117f\u1180")
        buf.write("\t=\2\2\u1180\u022d\3\2\2\2\u1181\u1182\7\u0113\2\2\u1182")
        buf.write("\u1184\7\u020f\2\2\u1183\u1185\5\u0140\u00a1\2\u1184\u1183")
        buf.write("\3\2\2\2\u1184\u1185\3\2\2\2\u1185\u118a\3\2\2\2\u1186")
        buf.write("\u1188\5\u0184\u00c3\2\u1187\u1189\5\u0230\u0119\2\u1188")
        buf.write("\u1187\3\2\2\2\u1188\u1189\3\2\2\2\u1189\u118b\3\2\2\2")
        buf.write("\u118a\u1186\3\2\2\2\u118a\u118b\3\2\2\2\u118b\u118c\3")
        buf.write("\2\2\2\u118c\u118d\7\u0210\2\2\u118d\u022f\3\2\2\2\u118e")
        buf.write("\u1195\5\u0232\u011a\2\u118f\u1190\7\33\2\2\u1190\u1191")
        buf.write("\5\u0234\u011b\2\u1191\u1192\7\13\2\2\u1192\u1193\5\u0234")
        buf.write("\u011b\2\u1193\u1196\3\2\2\2\u1194\u1196\5\u0234\u011b")
        buf.write("\2\u1195\u118f\3\2\2\2\u1195\u1194\3\2\2\2\u1196\u0231")
        buf.write("\3\2\2\2\u1197\u1198\t>\2\2\u1198\u0233\3\2\2\2\u1199")
        buf.write("\u119a\7\u0192\2\2\u119a\u11a1\7\u012a\2\2\u119b\u119c")
        buf.write("\7S\2\2\u119c\u11a1\7\u0146\2\2\u119d\u119e\5\u01f2\u00fa")
        buf.write("\2\u119e\u119f\t?\2\2\u119f\u11a1\3\2\2\2\u11a0\u1199")
        buf.write("\3\2\2\2\u11a0\u119b\3\2\2\2\u11a0\u119d\3\2\2\2\u11a1")
        buf.write("\u0235\3\2\2\2\u11a2\u11ac\7\u019e\2\2\u11a3\u11ad\7\u0212")
        buf.write("\2\2\u11a4\u11a9\5\u0238\u011d\2\u11a5\u11a6\7\u0215\2")
        buf.write("\2\u11a6\u11a8\5\u0238\u011d\2\u11a7\u11a5\3\2\2\2\u11a8")
        buf.write("\u11ab\3\2\2\2\u11a9\u11a7\3\2\2\2\u11a9\u11aa\3\2\2\2")
        buf.write("\u11aa\u11ad\3\2\2\2\u11ab\u11a9\3\2\2\2\u11ac\u11a3\3")
        buf.write("\2\2\2\u11ac\u11a4\3\2\2\2\u11ad\u0237\3\2\2\2\u11ae\u11b0")
        buf.write("\7\u00a7\2\2\u11af\u11b1\7\u0111\2\2\u11b0\u11af\3\2\2")
        buf.write("\2\u11b0\u11b1\3\2\2\2\u11b1\u11b4\3\2\2\2\u11b2\u11b4")
        buf.write("\7\u0111\2\2\u11b3\u11ae\3\2\2\2\u11b3\u11b2\3\2\2\2\u11b3")
        buf.write("\u11b4\3\2\2\2\u11b4\u11b5\3\2\2\2\u11b5\u11b7\5\u012e")
        buf.write("\u0098\2\u11b6\u11b8\5\u0266\u0134\2\u11b7\u11b6\3\2\2")
        buf.write("\2\u11b7\u11b8\3\2\2\2\u11b8\u0239\3\2\2\2\u11b9\u11ba")
        buf.write("\7\u010e\2\2\u11ba\u11bb\7\'\2\2\u11bb\u11bc\5\u01f2\u00fa")
        buf.write("\2\u11bc\u023b\3\2\2\2\u11bd\u11be\7\u01b1\2\2\u11be\u11bf")
        buf.write("\7\u009e\2\2\u11bf\u11c0\7\u020f\2\2\u11c0\u11c1\5\u0184")
        buf.write("\u00c3\2\u11c1\u11c2\7\u0210\2\2\u11c2\u11c5\3\2\2\2\u11c3")
        buf.write("\u11c5\5\u022e\u0118\2\u11c4\u11bd\3\2\2\2\u11c4\u11c3")
        buf.write("\3\2\2\2\u11c5\u023d\3\2\2\2\u11c6\u11d8\7N\2\2\u11c7")
        buf.write("\u11c9\7\u00e3\2\2\u11c8\u11ca\7\25\2\2\u11c9\u11c8\3")
        buf.write("\2\2\2\u11c9\u11ca\3\2\2\2\u11ca\u11d9\3\2\2\2\u11cb\u11cc")
        buf.write("\7\u020f\2\2\u11cc\u11d1\5\u0274\u013b\2\u11cd\u11ce\7")
        buf.write("\u0215\2\2\u11ce\u11d0\5\u0274\u013b\2\u11cf\u11cd\3\2")
        buf.write("\2\2\u11d0\u11d3\3\2\2\2\u11d1\u11cf\3\2\2\2\u11d1\u11d2")
        buf.write("\3\2\2\2\u11d2\u11d4\3\2\2\2\u11d3\u11d1\3\2\2\2\u11d4")
        buf.write("\u11d5\7\u0210\2\2\u11d5\u11d6\7\u01a1\2\2\u11d6\u11d7")
        buf.write("\5\u01d2\u00ea\2\u11d7\u11d9\3\2\2\2\u11d8\u11c7\3\2\2")
        buf.write("\2\u11d8\u11cb\3\2\2\2\u11d9\u023f\3\2\2\2\u11da\u11dd")
        buf.write("\7\u011a\2\2\u11db\u11dc\7\'\2\2\u11dc\u11de\7\u01a0\2")
        buf.write("\2\u11dd\u11db\3\2\2\2\u11dd\u11de\3\2\2\2\u11de\u11df")
        buf.write("\3\2\2\2\u11df\u11e1\5\u01d6\u00ec\2\u11e0\u11e2\5\u0266")
        buf.write("\u0134\2\u11e1\u11e0\3\2\2\2\u11e1\u11e2\3\2\2\2\u11e2")
        buf.write("\u11e3\3\2\2\2\u11e3\u11e4\7\u0215\2\2\u11e4\u11e6\5\u01d6")
        buf.write("\u00ec\2\u11e5\u11e7\5\u0266\u0134\2\u11e6\u11e5\3\2\2")
        buf.write("\2\u11e6\u11e7\3\2\2\2\u11e7\u0241\3\2\2\2\u11e8\u11e9")
        buf.write("\7\u01b6\2\2\u11e9\u11eb\7\u020f\2\2\u11ea\u11ec\t\67")
        buf.write("\2\2\u11eb\u11ea\3\2\2\2\u11eb\u11ec\3\2\2\2\u11ec\u11ee")
        buf.write("\3\2\2\2\u11ed\u11ef\t@\2\2\u11ee\u11ed\3\2\2\2\u11ee")
        buf.write("\u11ef\3\2\2\2\u11ef\u11f0\3\2\2\2\u11f0\u11f5\5\u024a")
        buf.write("\u0126\2\u11f1\u11f2\7\u0215\2\2\u11f2\u11f4\5\u024a\u0126")
        buf.write("\2\u11f3\u11f1\3\2\2\2\u11f4\u11f7\3\2\2\2\u11f5\u11f3")
        buf.write("\3\2\2\2\u11f5\u11f6\3\2\2\2\u11f6\u11f8\3\2\2\2\u11f7")
        buf.write("\u11f5\3\2\2\2\u11f8\u11f9\7\u0210\2\2\u11f9\u0243\3\2")
        buf.write("\2\2\u11fa\u11fb\7\u01bc\2\2\u11fb\u11ff\7\u020f\2\2\u11fc")
        buf.write("\u11fd\5\u01f2\u00fa\2\u11fd\u11fe\5\u0266\u0134\2\u11fe")
        buf.write("\u1200\3\2\2\2\u11ff\u11fc\3\2\2\2\u11ff\u1200\3\2\2\2")
        buf.write("\u1200\u1207\3\2\2\2\u1201\u1202\7\u0215\2\2\u1202\u1203")
        buf.write("\5\u01f2\u00fa\2\u1203\u1204\5\u0266\u0134\2\u1204\u1206")
        buf.write("\3\2\2\2\u1205\u1201\3\2\2\2\u1206\u1209\3\2\2\2\u1207")
        buf.write("\u1205\3\2\2\2\u1207\u1208\3\2\2\2\u1208\u120b\3\2\2\2")
        buf.write("\u1209\u1207\3\2\2\2\u120a\u120c\5\u0248\u0125\2\u120b")
        buf.write("\u120a\3\2\2\2\u120b\u120c\3\2\2\2\u120c\u120d\3\2\2\2")
        buf.write("\u120d\u120e\7\u0210\2\2\u120e\u0245\3\2\2\2\u120f\u121a")
        buf.write("\5\u0272\u013a\2\u1210\u1211\7\u0096\2\2\u1211\u121b\7")
        buf.write("\u010f\2\2\u1212\u1215\5\u02c8\u0165\2\u1213\u1214\7\u011b")
        buf.write("\2\2\u1214\u1216\5\u01f2\u00fa\2\u1215\u1213\3\2\2\2\u1215")
        buf.write("\u1216\3\2\2\2\u1216\u1218\3\2\2\2\u1217\u1219\5\u0248")
        buf.write("\u0125\2\u1218\u1217\3\2\2\2\u1218\u1219\3\2\2\2\u1219")
        buf.write("\u121b\3\2\2\2\u121a\u1210\3\2\2\2\u121a\u1212\3\2\2\2")
        buf.write("\u121b\u0247\3\2\2\2\u121c\u121d\7e\2\2\u121d\u121e\5")
        buf.write("\u01f2\u00fa\2\u121e\u0249\3\2\2\2\u121f\u1226\5\u01d6")
        buf.write("\u00ec\2\u1220\u1224\7\16\2\2\u1221\u1225\5\u02e2\u0172")
        buf.write("\2\u1222\u1223\7\u0081\2\2\u1223\u1225\5\u01f2\u00fa\2")
        buf.write("\u1224\u1221\3\2\2\2\u1224\u1222\3\2\2\2\u1225\u1227\3")
        buf.write("\2\2\2\u1226\u1220\3\2\2\2\u1226\u1227\3\2\2\2\u1227\u024b")
        buf.write("\3\2\2\2\u1228\u122c\7\u01a7\2\2\u1229\u122a\7\u00f1\2")
        buf.write("\2\u122a\u122d\7\u01a0\2\2\u122b\u122d\5\u01d6\u00ec\2")
        buf.write("\u122c\u1229\3\2\2\2\u122c\u122b\3\2\2\2\u122d\u024d\3")
        buf.write("\2\2\2\u122e\u1234\7\u016e\2\2\u122f\u1235\7\u01c4\2\2")
        buf.write("\u1230\u1232\7\u00f1\2\2\u1231\u1233\7\u01a0\2\2\u1232")
        buf.write("\u1231\3\2\2\2\u1232\u1233\3\2\2\2\u1233\u1235\3\2\2\2")
        buf.write("\u1234\u122f\3\2\2\2\u1234\u1230\3\2\2\2\u1235\u024f\3")
        buf.write("\2\2\2\u1236\u1237\7{\2\2\u1237\u1238\5\u01f2\u00fa\2")
        buf.write("\u1238\u0251\3\2\2\2\u1239\u123a\7\u01a7\2\2\u123a\u123b")
        buf.write("\5\u01f2\u00fa\2\u123b\u0253\3\2\2\2\u123c\u123d\7\u00f1")
        buf.write("\2\2\u123d\u1245\7\u00ab\2\2\u123e\u1242\7\u00ab\2\2\u123f")
        buf.write("\u1240\7\u0166\2\2\u1240\u1241\7\u0226\2\2\u1241\u1243")
        buf.write("\5\u01f2\u00fa\2\u1242\u123f\3\2\2\2\u1242\u1243\3\2\2")
        buf.write("\2\u1243\u1245\3\2\2\2\u1244\u123c\3\2\2\2\u1244\u123e")
        buf.write("\3\2\2\2\u1245\u0255\3\2\2\2\u1246\u124e\7\u0216\2\2\u1247")
        buf.write("\u124e\5\u0258\u012d\2\u1248\u124e\5\u025c\u012f\2\u1249")
        buf.write("\u124e\5\u025e\u0130\2\u124a\u124e\5\u025a\u012e\2\u124b")
        buf.write("\u124e\5\u0260\u0131\2\u124c\u124e\5\u0262\u0132\2\u124d")
        buf.write("\u1246\3\2\2\2\u124d\u1247\3\2\2\2\u124d\u1248\3\2\2\2")
        buf.write("\u124d\u1249\3\2\2\2\u124d\u124a\3\2\2\2\u124d\u124b\3")
        buf.write("\2\2\2\u124d\u124c\3\2\2\2\u124e\u1250\3\2\2\2\u124f\u1251")
        buf.write("\7\u021b\2\2\u1250\u124f\3\2\2\2\u1250\u1251\3\2\2\2\u1251")
        buf.write("\u0257\3\2\2\2\u1252\u1253\7\u01ad\2\2\u1253\u1259\tA")
        buf.write("\2\2\u1254\u1255\7\u0089\2\2\u1255\u1256\tB\2\2\u1256")
        buf.write("\u125a\tC\2\2\u1257\u1258\7J\2\2\u1258\u125a\tD\2\2\u1259")
        buf.write("\u1254\3\2\2\2\u1259\u1257\3\2\2\2\u125a\u0259\3\2\2\2")
        buf.write("\u125b\u125c\7\u015c\2\2\u125c\u1262\5\u02ee\u0178\2\u125d")
        buf.write("\u1263\7\u020b\2\2\u125e\u1263\7\u0108\2\2\u125f\u1263")
        buf.write("\7\u0105\2\2\u1260\u1263\5\u02da\u016e\2\u1261\u1263\5")
        buf.write("\u02ee\u0178\2\u1262\u125d\3\2\2\2\u1262\u125e\3\2\2\2")
        buf.write("\u1262\u125f\3\2\2\2\u1262\u1260\3\2\2\2\u1262\u1261\3")
        buf.write("\2\2\2\u1263\u025b\3\2\2\2\u1264\u1265\7\u0089\2\2\u1265")
        buf.write("\u025d\3\2\2\2\u1266\u1267\7\u022d\2\2\u1267\u025f\3\2")
        buf.write("\2\2\u1268\u1269\7\u0160\2\2\u1269\u126d\7~\2\2\u126a")
        buf.write("\u126b\7\u0160\2\2\u126b\u126d\7\177\2\2\u126c\u1268\3")
        buf.write("\2\2\2\u126c\u126a\3\2\2\2\u126d\u0261\3\2\2\2\u126e\u126f")
        buf.write("\7\u022e\2\2\u126f\u0263\3\2\2\2\u1270\u1272\tE\2\2\u1271")
        buf.write("\u1273\7\u0096\2\2\u1272\u1271\3\2\2\2\u1272\u1273\3\2")
        buf.write("\2\2\u1273\u1274\3\2\2\2\u1274\u1275\5\u01d2\u00ea\2\u1275")
        buf.write("\u0265\3\2\2\2\u1276\u1278\7\16\2\2\u1277\u1276\3\2\2")
        buf.write("\2\u1277\u1278\3\2\2\2\u1278\u127b\3\2\2\2\u1279\u127c")
        buf.write("\5\u02e0\u0171\2\u127a\u127c\5\u026a\u0136\2\u127b\u1279")
        buf.write("\3\2\2\2\u127b\u127a\3\2\2\2\u127c\u127f\3\2\2\2\u127d")
        buf.write("\u127f\7\16\2\2\u127e\u1277\3\2\2\2\u127e\u127d\3\2\2")
        buf.write("\2\u127f\u0267\3\2\2\2\u1280\u1283\5\u02e0\u0171\2\u1281")
        buf.write("\u1283\5\u026a\u0136\2\u1282\u1280\3\2\2\2\u1282\u1281")
        buf.write("\3\2\2\2\u1283\u0269\3\2\2\2\u1284\u1285\5\u02de\u0170")
        buf.write("\2\u1285\u026b\3\2\2\2\u1286\u1289\7\u01ae\2\2\u1287\u128a")
        buf.write("\5\u026e\u0138\2\u1288\u128a\5\u01d6\u00ec\2\u1289\u1287")
        buf.write("\3\2\2\2\u1289\u1288\3\2\2\2\u128a\u026d\3\2\2\2\u128b")
        buf.write("\u128c\7S\2\2\u128c\u128d\7\u0104\2\2\u128d\u128e\5\u02aa")
        buf.write("\u0156\2\u128e\u026f\3\2\2\2\u128f\u1290\7\u00bb\2\2\u1290")
        buf.write("\u1295\5\u02a6\u0154\2\u1291\u1292\7\u0215\2\2\u1292\u1294")
        buf.write("\5\u02a6\u0154\2\u1293\u1291\3\2\2\2\u1294\u1297\3\2\2")
        buf.write("\2\u1295\u1293\3\2\2\2\u1295\u1296\3\2\2\2\u1296\u12a4")
        buf.write("\3\2\2\2\u1297\u1295\3\2\2\2\u1298\u1299\7&\2\2\u1299")
        buf.write("\u129a\79\2\2\u129a\u129b\7\u00bb\2\2\u129b\u12a0\5\u02a6")
        buf.write("\u0154\2\u129c\u129d\7\u0215\2\2\u129d\u129f\5\u02a6\u0154")
        buf.write("\2\u129e\u129c\3\2\2\2\u129f\u12a2\3\2\2\2\u12a0\u129e")
        buf.write("\3\2\2\2\u12a0\u12a1\3\2\2\2\u12a1\u12a4\3\2\2\2\u12a2")
        buf.write("\u12a0\3\2\2\2\u12a3\u128f\3\2\2\2\u12a3\u1298\3\2\2\2")
        buf.write("\u12a4\u0271\3\2\2\2\u12a5\u12a8\5\u02e0\u0171\2\u12a6")
        buf.write("\u12a8\5\u02de\u0170\2\u12a7\u12a5\3\2\2\2\u12a7\u12a6")
        buf.write("\3\2\2\2\u12a8\u0273\3\2\2\2\u12a9\u12aa\5\u02e0\u0171")
        buf.write("\2\u12aa\u0275\3\2\2\2\u12ab\u12ac\5\u02e0\u0171\2\u12ac")
        buf.write("\u0277\3\2\2\2\u12ad\u12ae\5\u02e0\u0171\2\u12ae\u0279")
        buf.write("\3\2\2\2\u12af\u12b0\5\u02e0\u0171\2\u12b0\u027b\3\2\2")
        buf.write("\2\u12b1\u12b2\5\u02e0\u0171\2\u12b2\u027d\3\2\2\2\u12b3")
        buf.write("\u12b4\5\u02e0\u0171\2\u12b4\u027f\3\2\2\2\u12b5\u12ba")
        buf.write("\5\u02e0\u0171\2\u12b6\u12b7\7\u0208\2\2\u12b7\u12b9\5")
        buf.write("\u02e2\u0172\2\u12b8\u12b6\3\2\2\2\u12b9\u12bc\3\2\2\2")
        buf.write("\u12ba\u12b8\3\2\2\2\u12ba\u12bb\3\2\2\2\u12bb\u12bf\3")
        buf.write("\2\2\2\u12bc\u12ba\3\2\2\2\u12bd\u12be\7\u0217\2\2\u12be")
        buf.write("\u12c0\5\u02b0\u0159\2\u12bf\u12bd\3\2\2\2\u12bf\u12c0")
        buf.write("\3\2\2\2\u12c0\u0281\3\2\2\2\u12c1\u12c2\5\u02e0\u0171")
        buf.write("\2\u12c2\u0283\3\2\2\2\u12c3\u12c6\5\u02e0\u0171\2\u12c4")
        buf.write("\u12c5\7\u0208\2\2\u12c5\u12c7\5\u02e2\u0172\2\u12c6\u12c4")
        buf.write("\3\2\2\2\u12c6\u12c7\3\2\2\2\u12c7\u0285\3\2\2\2\u12c8")
        buf.write("\u12c9\5\u02e0\u0171\2\u12c9\u0287\3\2\2\2\u12ca\u12cb")
        buf.write("\5\u02e0\u0171\2\u12cb\u0289\3\2\2\2\u12cc\u12cd\5\u02e0")
        buf.write("\u0171\2\u12cd\u028b\3\2\2\2\u12ce\u12d3\5\u02e0\u0171")
        buf.write("\2\u12cf\u12d0\7\u0208\2\2\u12d0\u12d2\5\u02e2\u0172\2")
        buf.write("\u12d1\u12cf\3\2\2\2\u12d2\u12d5\3\2\2\2\u12d3\u12d1\3")
        buf.write("\2\2\2\u12d3\u12d4\3\2\2\2\u12d4\u028d\3\2\2\2\u12d5\u12d3")
        buf.write("\3\2\2\2\u12d6\u12d7\5\u02e0\u0171\2\u12d7\u028f\3\2\2")
        buf.write("\2\u12d8\u12dd\5\u02e0\u0171\2\u12d9\u12da\7\u0208\2\2")
        buf.write("\u12da\u12dc\5\u02e2\u0172\2\u12db\u12d9\3\2\2\2\u12dc")
        buf.write("\u12df\3\2\2\2\u12dd\u12db\3\2\2\2\u12dd\u12de\3\2\2\2")
        buf.write("\u12de\u12e2\3\2\2\2\u12df\u12dd\3\2\2\2\u12e0\u12e1\7")
        buf.write("\u0217\2\2\u12e1\u12e3\5\u02b0\u0159\2\u12e2\u12e0\3\2")
        buf.write("\2\2\u12e2\u12e3\3\2\2\2\u12e3\u0291\3\2\2\2\u12e4\u12e5")
        buf.write("\5\u02e2\u0172\2\u12e5\u0293\3\2\2\2\u12e6\u12eb\5\u02e2")
        buf.write("\u0172\2\u12e7\u12e8\7\u0208\2\2\u12e8\u12ea\5\u02e2\u0172")
        buf.write("\2\u12e9\u12e7\3\2\2\2\u12ea\u12ed\3\2\2\2\u12eb\u12e9")
        buf.write("\3\2\2\2\u12eb\u12ec\3\2\2\2\u12ec\u0295\3\2\2\2\u12ed")
        buf.write("\u12eb\3\2\2\2\u12ee\u12f3\5\u02e2\u0172\2\u12ef\u12f0")
        buf.write("\7\u0208\2\2\u12f0\u12f2\5\u02e2\u0172\2\u12f1\u12ef\3")
        buf.write("\2\2\2\u12f2\u12f5\3\2\2\2\u12f3\u12f1\3\2\2\2\u12f3\u12f4")
        buf.write("\3\2\2\2\u12f4\u0297\3\2\2\2\u12f5\u12f3\3\2\2\2\u12f6")
        buf.write("\u12fb\5\u02e0\u0171\2\u12f7\u12f8\7\u0208\2\2\u12f8\u12fa")
        buf.write("\5\u02e2\u0172\2\u12f9\u12f7\3\2\2\2\u12fa\u12fd\3\2\2")
        buf.write("\2\u12fb\u12f9\3\2\2\2\u12fb\u12fc\3\2\2\2\u12fc\u0299")
        buf.write("\3\2\2\2\u12fd\u12fb\3\2\2\2\u12fe\u1301\5\u02e0\u0171")
        buf.write("\2\u12ff\u1300\7\u0208\2\2\u1300\u1302\5\u02e2\u0172\2")
        buf.write("\u1301\u12ff\3\2\2\2\u1301\u1302\3\2\2\2\u1302\u029b\3")
        buf.write("\2\2\2\u1303\u1306\5\u02e0\u0171\2\u1304\u1305\7\u0208")
        buf.write("\2\2\u1305\u1307\5\u02e2\u0172\2\u1306\u1304\3\2\2\2\u1306")
        buf.write("\u1307\3\2\2\2\u1307\u029d\3\2\2\2\u1308\u130b\5\u02e0")
        buf.write("\u0171\2\u1309\u130a\7\u0208\2\2\u130a\u130c\5\u02e2\u0172")
        buf.write("\2\u130b\u1309\3\2\2\2\u130b\u130c\3\2\2\2\u130c\u029f")
        buf.write("\3\2\2\2\u130d\u1310\5\u02e0\u0171\2\u130e\u130f\7\u0208")
        buf.write("\2\2\u130f\u1311\5\u02e2\u0172\2\u1310\u130e\3\2\2\2\u1310")
        buf.write("\u1311\3\2\2\2\u1311\u02a1\3\2\2\2\u1312\u1315\5\u02e0")
        buf.write("\u0171\2\u1313\u1314\7\u0208\2\2\u1314\u1316\5\u02e2\u0172")
        buf.write("\2\u1315\u1313\3\2\2\2\u1315\u1316\3\2\2\2\u1316\u02a3")
        buf.write("\3\2\2\2\u1317\u131a\5\u02e0\u0171\2\u1318\u1319\7\u0208")
        buf.write("\2\2\u1319\u131b\5\u02e2\u0172\2\u131a\u1318\3\2\2\2\u131a")
        buf.write("\u131b\3\2\2\2\u131b\u02a5\3\2\2\2\u131c\u131d\7\u0229")
        buf.write("\2\2\u131d\u131f\5\u02b6\u015c\2\u131e\u131c\3\2\2\2\u131e")
        buf.write("\u131f\3\2\2\2\u131f\u1320\3\2\2\2\u1320\u1323\5\u02e2")
        buf.write("\u0172\2\u1321\u1322\7\u0208\2\2\u1322\u1324\5\u02e2\u0172")
        buf.write("\2\u1323\u1321\3\2\2\2\u1323\u1324\3\2\2\2\u1324\u1327")
        buf.write("\3\2\2\2\u1325\u1327\5\u02d0\u0169\2\u1326\u131e\3\2\2")
        buf.write("\2\u1326\u1325\3\2\2\2\u1327\u02a7\3\2\2\2\u1328\u1329")
        buf.write("\5\u02e0\u0171\2\u1329\u02a9\3\2\2\2\u132a\u132d\5\u02e0")
        buf.write("\u0171\2\u132b\u132d\5\u02d0\u0169\2\u132c\u132a\3\2\2")
        buf.write("\2\u132c\u132b\3\2\2\2\u132d\u02ab\3\2\2\2\u132e\u1331")
        buf.write("\5\u02e0\u0171\2\u132f\u1331\5\u02d0\u0169\2\u1330\u132e")
        buf.write("\3\2\2\2\u1330\u132f\3\2\2\2\u1331\u02ad\3\2\2\2\u1332")
        buf.write("\u1335\5\u02e0\u0171\2\u1333\u1334\7\u0208\2\2\u1334\u1336")
        buf.write("\5\u02e2\u0172\2\u1335\u1333\3\2\2\2\u1335\u1336\3\2\2")
        buf.write("\2\u1336\u02af\3\2\2\2\u1337\u1338\5\u02e0\u0171\2\u1338")
        buf.write("\u02b1\3\2\2\2\u1339\u133e\5\u02e0\u0171\2\u133a\u133b")
        buf.write("\7\u0208\2\2\u133b\u133d\5\u02e2\u0172\2\u133c\u133a\3")
        buf.write("\2\2\2\u133d\u1340\3\2\2\2\u133e\u133c\3\2\2\2\u133e\u133f")
        buf.write("\3\2\2\2\u133f\u02b3\3\2\2\2\u1340\u133e\3\2\2\2\u1341")
        buf.write("\u1344\5\u02e0\u0171\2\u1342\u1343\7\u0208\2\2\u1343\u1345")
        buf.write("\5\u02e2\u0172\2\u1344\u1342\3\2\2\2\u1344\u1345\3\2\2")
        buf.write("\2\u1345\u1349\3\2\2\2\u1346\u1347\7\u0217\2\2\u1347\u134a")
        buf.write("\5\u02b0\u0159\2\u1348\u134a\5\u0264\u0133\2\u1349\u1346")
        buf.write("\3\2\2\2\u1349\u1348\3\2\2\2\u1349\u134a\3\2\2\2\u134a")
        buf.write("\u02b5\3\2\2\2\u134b\u1350\5\u02e2\u0172\2\u134c\u134d")
        buf.write("\7\u0208\2\2\u134d\u134f\5\u02e2\u0172\2\u134e\u134c\3")
        buf.write("\2\2\2\u134f\u1352\3\2\2\2\u1350\u134e\3\2\2\2\u1350\u1351")
        buf.write("\3\2\2\2\u1351\u02b7\3\2\2\2\u1352\u1350\3\2\2\2\u1353")
        buf.write("\u1354\5\u02e0\u0171\2\u1354\u02b9\3\2\2\2\u1355\u1356")
        buf.write("\5\u02e2\u0172\2\u1356\u02bb\3\2\2\2\u1357\u1358\7\u00c2")
        buf.write("\2\2\u1358\u1359\7\u020f\2\2\u1359\u135a\7\u01ce\2\2\u135a")
        buf.write("\u135b\t%\2\2\u135b\u135c\5\u0184\u00c3\2\u135c\u135e")
        buf.write("\7\u0210\2\2\u135d\u135f\5\u022e\u0118\2\u135e\u135d\3")
        buf.write("\2\2\2\u135e\u135f\3\2\2\2\u135f\u02bd\3\2\2\2\u1360\u1362")
        buf.write("\7\u020f\2\2\u1361\u1363\5\u02c6\u0164\2\u1362\u1361\3")
        buf.write("\2\2\2\u1362\u1363\3\2\2\2\u1363\u1368\3\2\2\2\u1364\u1365")
        buf.write("\7\u0215\2\2\u1365\u1367\5\u02c6\u0164\2\u1366\u1364\3")
        buf.write("\2\2\2\u1367\u136a\3\2\2\2\u1368\u1366\3\2\2\2\u1368\u1369")
        buf.write("\3\2\2\2\u1369\u136b\3\2\2\2\u136a\u1368\3\2\2\2\u136b")
        buf.write("\u136d\7\u0210\2\2\u136c\u136e\5\u02bc\u015f\2\u136d\u136c")
        buf.write("\3\2\2\2\u136d\u136e\3\2\2\2\u136e\u02bf\3\2\2\2\u136f")
        buf.write("\u1374\7\u020f\2\2\u1370\u1372\5\u02c6\u0164\2\u1371\u1373")
        buf.write("\5\u02c4\u0163\2\u1372\u1371\3\2\2\2\u1372\u1373\3\2\2")
        buf.write("\2\u1373\u1375\3\2\2\2\u1374\u1370\3\2\2\2\u1374\u1375")
        buf.write("\3\2\2\2\u1375\u137d\3\2\2\2\u1376\u1377\7\u0215\2\2\u1377")
        buf.write("\u1379\5\u02c6\u0164\2\u1378\u137a\5\u02c4\u0163\2\u1379")
        buf.write("\u1378\3\2\2\2\u1379\u137a\3\2\2\2\u137a\u137c\3\2\2\2")
        buf.write("\u137b\u1376\3\2\2\2\u137c\u137f\3\2\2\2\u137d\u137b\3")
        buf.write("\2\2\2\u137d\u137e\3\2\2\2\u137e\u1380\3\2\2\2\u137f\u137d")
        buf.write("\3\2\2\2\u1380\u1382\7\u0210\2\2\u1381\u1383\5\u02bc\u015f")
        buf.write("\2\u1382\u1381\3\2\2\2\u1382\u1383\3\2\2\2\u1383\u02c1")
        buf.write("\3\2\2\2\u1384\u1385\7\u020f\2\2\u1385\u1392\5\u02b2\u015a")
        buf.write("\2\u1386\u1389\7\u0215\2\2\u1387\u138a\5\u02da\u016e\2")
        buf.write("\u1388\u138a\7\u00fe\2\2\u1389\u1387\3\2\2\2\u1389\u1388")
        buf.write("\3\2\2\2\u138a\u1390\3\2\2\2\u138b\u138e\7\u0215\2\2\u138c")
        buf.write("\u138f\5\u02da\u016e\2\u138d\u138f\7\u00fe\2\2\u138e\u138c")
        buf.write("\3\2\2\2\u138e\u138d\3\2\2\2\u138f\u1391\3\2\2\2\u1390")
        buf.write("\u138b\3\2\2\2\u1390\u1391\3\2\2\2\u1391\u1393\3\2\2\2")
        buf.write("\u1392\u1386\3\2\2\2\u1392\u1393\3\2\2\2\u1393\u1394\3")
        buf.write("\2\2\2\u1394\u13a8\7\u019e\2\2\u1395\u1396\5\u02b4\u015b")
        buf.write("\2\u1396\u1397\7\u0208\2\2\u1397\u1398\7\u0212\2\2\u1398")
        buf.write("\u13a9\3\2\2\2\u1399\u13a9\7\u0212\2\2\u139a\u139c\5\u01d6")
        buf.write("\u00ec\2\u139b\u139d\5\u0266\u0134\2\u139c\u139b\3\2\2")
        buf.write("\2\u139c\u139d\3\2\2\2\u139d\u13a5\3\2\2\2\u139e\u139f")
        buf.write("\7\u0215\2\2\u139f\u13a1\5\u01d6\u00ec\2\u13a0\u13a2\5")
        buf.write("\u0266\u0134\2\u13a1\u13a0\3\2\2\2\u13a1\u13a2\3\2\2\2")
        buf.write("\u13a2\u13a4\3\2\2\2\u13a3\u139e\3\2\2\2\u13a4\u13a7\3")
        buf.write("\2\2\2\u13a5\u13a3\3\2\2\2\u13a5\u13a6\3\2\2\2\u13a6\u13a9")
        buf.write("\3\2\2\2\u13a7\u13a5\3\2\2\2\u13a8\u1395\3\2\2\2\u13a8")
        buf.write("\u1399\3\2\2\2\u13a8\u139a\3\2\2\2\u13a9\u13aa\3\2\2\2")
        buf.write("\u13aa\u13ac\7\u0210\2\2\u13ab\u13ad\5\u02bc\u015f\2\u13ac")
        buf.write("\u13ab\3\2\2\2\u13ac\u13ad\3\2\2\2\u13ad\u02c3\3\2\2\2")
        buf.write("\u13ae\u13af\tF\2\2\u13af\u13b0\7\u00ff\2\2\u13b0\u02c5")
        buf.write("\3\2\2\2\u13b1\u13b2\5\u02e0\u0171\2\u13b2\u13b3\7\u0226")
        buf.write("\2\2\u13b3\u13b4\7\u0223\2\2\u13b4\u13b6\3\2\2\2\u13b5")
        buf.write("\u13b1\3\2\2\2\u13b5\u13b6\3\2\2\2\u13b6\u13b7\3\2\2\2")
        buf.write("\u13b7\u13b8\5\u01d6\u00ec\2\u13b8\u02c7\3\2\2\2\u13b9")
        buf.write("\u13c2\5\u02ca\u0166\2\u13ba\u13bc\7\u0135\2\2\u13bb\u13ba")
        buf.write("\3\2\2\2\u13bb\u13bc\3\2\2\2\u13bc\u13bd\3\2\2\2\u13bd")
        buf.write("\u13bf\5\u0294\u014b\2\u13be\u13c0\tG\2\2\u13bf\u13be")
        buf.write("\3\2\2\2\u13bf\u13c0\3\2\2\2\u13c0\u13c2\3\2\2\2\u13c1")
        buf.write("\u13b9\3\2\2\2\u13c1\u13bb\3\2\2\2\u13c2\u02c9\3\2\2\2")
        buf.write("\u13c3\u13c5\5\u02ce\u0168\2\u13c4\u13c6\5\u02cc\u0167")
        buf.write("\2\u13c5\u13c4\3\2\2\2\u13c5\u13c6\3\2\2\2\u13c6\u13d2")
        buf.write("\3\2\2\2\u13c7\u13c9\7\u01b0\2\2\u13c8\u13ca\7\u00cf\2")
        buf.write("\2\u13c9\u13c8\3\2\2\2\u13c9\u13ca\3\2\2\2\u13ca\u13cb")
        buf.write("\3\2\2\2\u13cb\u13cc\7\u0180\2\2\u13cc\u13d3\7\u01c6\2")
        buf.write("\2\u13cd\u13ce\7\62\2\2\u13ce\u13cf\7\u015c\2\2\u13cf")
        buf.write("\u13d3\5\u02b6\u015c\2\u13d0\u13d1\7e\2\2\u13d1\u13d3")
        buf.write("\7\u0215\2\2\u13d2\u13c7\3\2\2\2\u13d2\u13cd\3\2\2\2\u13d2")
        buf.write("\u13d0\3\2\2\2\u13d2\u13d3\3\2\2\2\u13d3\u13e5\3\2\2\2")
        buf.write("\u13d4\u13d5\7\u00ba\2\2\u13d5\u13da\tH\2\2\u13d6\u13d7")
        buf.write("\7\u020f\2\2\u13d7\u13d8\5\u01d6\u00ec\2\u13d8\u13d9\7")
        buf.write("\u0210\2\2\u13d9\u13db\3\2\2\2\u13da\u13d6\3\2\2\2\u13da")
        buf.write("\u13db\3\2\2\2\u13db\u13dc\3\2\2\2\u13dc\u13dd\7\u0189")
        buf.write("\2\2\u13dd\u13e2\tI\2\2\u13de\u13df\7\u020f\2\2\u13df")
        buf.write("\u13e0\5\u01d6\u00ec\2\u13e0\u13e1\7\u0210\2\2\u13e1\u13e3")
        buf.write("\3\2\2\2\u13e2\u13de\3\2\2\2\u13e2\u13e3\3\2\2\2\u13e3")
        buf.write("\u13e5\3\2\2\2\u13e4\u13c3\3\2\2\2\u13e4\u13d4\3\2\2\2")
        buf.write("\u13e5\u02cb\3\2\2\2\u13e6\u13e7\7\u020f\2\2\u13e7\u13ea")
        buf.write("\5\u02da\u016e\2\u13e8\u13e9\7\u0215\2\2\u13e9\u13eb\5")
        buf.write("\u02da\u016e\2\u13ea\u13e8\3\2\2\2\u13ea\u13eb\3\2\2\2")
        buf.write("\u13eb\u13ed\3\2\2\2\u13ec\u13ee\tJ\2\2\u13ed\u13ec\3")
        buf.write("\2\2\2\u13ed\u13ee\3\2\2\2\u13ee\u13ef\3\2\2\2\u13ef\u13f0")
        buf.write("\7\u0210\2\2\u13f0\u02cd\3\2\2\2\u13f1\u141a\7\37\2\2")
        buf.write("\u13f2\u141a\7\u0126\2\2\u13f3\u141a\7\u0163\2\2\u13f4")
        buf.write("\u141a\7\u0164\2\2\u13f5\u141a\7\u0102\2\2\u13f6\u141a")
        buf.write("\7`\2\2\u13f7\u141a\7\u00b8\2\2\u13f8\u141a\7\u00b7\2")
        buf.write("\2\u13f9\u141a\7\u0101\2\2\u13fa\u141a\7\u0168\2\2\u13fb")
        buf.write("\u141a\7\u0100\2\2\u13fc\u141a\7a\2\2\u13fd\u13ff\7r\2")
        buf.write("\2\u13fe\u1400\7\u012b\2\2\u13ff\u13fe\3\2\2\2\u13ff\u1400")
        buf.write("\3\2\2\2\u1400\u141a\3\2\2\2\u1401\u141a\7\u0093\2\2\u1402")
        buf.write("\u141a\7\u0133\2\2\u1403\u141a\7\u00ec\2\2\u1404\u1406")
        buf.write("\7\u00d5\2\2\u1405\u1407\7\u0131\2\2\u1406\u1405\3\2\2")
        buf.write("\2\u1406\u1407\3\2\2\2\u1407\u141a\3\2\2\2\u1408\u141a")
        buf.write("\7\60\2\2\u1409\u141a\7\62\2\2\u140a\u141a\7\u01a3\2\2")
        buf.write("\u140b\u141a\7\u01a2\2\2\u140c\u141a\7\u0175\2\2\u140d")
        buf.write("\u141a\7\u0131\2\2\u140e\u141a\7#\2\2\u140f\u141a\7Z\2")
        buf.write("\2\u1410\u141a\7\u0147\2\2\u1411\u141a\7\u01c3\2\2\u1412")
        buf.write("\u141a\7\u00e5\2\2\u1413\u141a\7[\2\2\u1414\u141a\7\u00a3")
        buf.write("\2\2\u1415\u141a\7\u00df\2\2\u1416\u141a\7\u0181\2\2\u1417")
        buf.write("\u141a\7 \2\2\u1418\u141a\7\65\2\2\u1419\u13f1\3\2\2\2")
        buf.write("\u1419\u13f2\3\2\2\2\u1419\u13f3\3\2\2\2\u1419\u13f4\3")
        buf.write("\2\2\2\u1419\u13f5\3\2\2\2\u1419\u13f6\3\2\2\2\u1419\u13f7")
        buf.write("\3\2\2\2\u1419\u13f8\3\2\2\2\u1419\u13f9\3\2\2\2\u1419")
        buf.write("\u13fa\3\2\2\2\u1419\u13fb\3\2\2\2\u1419\u13fc\3\2\2\2")
        buf.write("\u1419\u13fd\3\2\2\2\u1419\u1401\3\2\2\2\u1419\u1402\3")
        buf.write("\2\2\2\u1419\u1403\3\2\2\2\u1419\u1404\3\2\2\2\u1419\u1408")
        buf.write("\3\2\2\2\u1419\u1409\3\2\2\2\u1419\u140a\3\2\2\2\u1419")
        buf.write("\u140b\3\2\2\2\u1419\u140c\3\2\2\2\u1419\u140d\3\2\2\2")
        buf.write("\u1419\u140e\3\2\2\2\u1419\u140f\3\2\2\2\u1419\u1410\3")
        buf.write("\2\2\2\u1419\u1411\3\2\2\2\u1419\u1412\3\2\2\2\u1419\u1413")
        buf.write("\3\2\2\2\u1419\u1414\3\2\2\2\u1419\u1415\3\2\2\2\u1419")
        buf.write("\u1416\3\2\2\2\u1419\u1417\3\2\2\2\u1419\u1418\3\2\2\2")
        buf.write("\u141a\u02cf\3\2\2\2\u141b\u141f\7\u0219\2\2\u141c\u141d")
        buf.write("\7\u021a\2\2\u141d\u141f\7\u0209\2\2\u141e\u141b\3\2\2")
        buf.write("\2\u141e\u141c\3\2\2\2\u141f\u1428\3\2\2\2\u1420\u1422")
        buf.write("\7\u00ae\2\2\u1421\u1420\3\2\2\2\u1421\u1422\3\2\2\2\u1422")
        buf.write("\u1426\3\2\2\2\u1423\u1427\7\u0219\2\2\u1424\u1425\7\u021a")
        buf.write("\2\2\u1425\u1427\7\u0209\2\2\u1426\u1423\3\2\2\2\u1426")
        buf.write("\u1424\3\2\2\2\u1427\u1429\3\2\2\2\u1428\u1421\3\2\2\2")
        buf.write("\u1428\u1429\3\2\2\2\u1429\u142e\3\2\2\2\u142a\u142b\7")
        buf.write("\u0208\2\2\u142b\u142d\5\u02d4\u016b\2\u142c\u142a\3\2")
        buf.write("\2\2\u142d\u1430\3\2\2\2\u142e\u142c\3\2\2\2\u142e\u142f")
        buf.write("\3\2\2\2\u142f\u02d1\3\2\2\2\u1430\u142e\3\2\2\2\u1431")
        buf.write("\u1436\5\u02d4\u016b\2\u1432\u1433\7\u0208\2\2\u1433\u1435")
        buf.write("\5\u02d4\u016b\2\u1434\u1432\3\2\2\2\u1435\u1438\3\2\2")
        buf.write("\2\u1436\u1434\3\2\2\2\u1436\u1437\3\2\2\2\u1437\u02d3")
        buf.write("\3\2\2\2\u1438\u1436\3\2\2\2\u1439\u143a\7\u0229\2\2\u143a")
        buf.write("\u143c\5\u02b6\u015c\2\u143b\u1439\3\2\2\2\u143b\u143c")
        buf.write("\3\2\2\2\u143c\u143d\3\2\2\2\u143d\u1442\5\u02e2\u0172")
        buf.write("\2\u143e\u143f\7\u0208\2\2\u143f\u1441\5\u02e2\u0172\2")
        buf.write("\u1440\u143e\3\2\2\2\u1441\u1444\3\2\2\2\u1442\u1440\3")
        buf.write("\2\2\2\u1442\u1443\3\2\2\2\u1443\u1446\3\2\2\2\u1444\u1442")
        buf.write("\3\2\2\2\u1445\u1447\5\u02be\u0160\2\u1446\u1445\3\2\2")
        buf.write("\2\u1446\u1447\3\2\2\2\u1447\u02d5\3\2\2\2\u1448\u1449")
        buf.write("\7\u0229\2\2\u1449\u144b\5\u02b6\u015c\2\u144a\u1448\3")
        buf.write("\2\2\2\u144a\u144b\3\2\2\2\u144b\u144c\3\2\2\2\u144c\u1451")
        buf.write("\5\u02e2\u0172\2\u144d\u144e\7\u0208\2\2\u144e\u1450\5")
        buf.write("\u02e2\u0172\2\u144f\u144d\3\2\2\2\u1450\u1453\3\2\2\2")
        buf.write("\u1451\u144f\3\2\2\2\u1451\u1452\3\2\2\2\u1452\u02d7\3")
        buf.write("\2\2\2\u1453\u1451\3\2\2\2\u1454\u1457\7\u0181\2\2\u1455")
        buf.write("\u1458\5\u02de\u0170\2\u1456\u1458\5\u02d0\u0169\2\u1457")
        buf.write("\u1455\3\2\2\2\u1457\u1456\3\2\2\2\u1458\u145d\3\2\2\2")
        buf.write("\u1459\u145a\7\21\2\2\u145a\u145b\7\u0180\2\2\u145b\u145c")
        buf.write("\7\u01c6\2\2\u145c\u145e\5\u02de\u0170\2\u145d\u1459\3")
        buf.write("\2\2\2\u145d\u145e\3\2\2\2\u145e\u1493\3\2\2\2\u145f\u1463")
        buf.write("\7\u00ba\2\2\u1460\u1464\5\u02de\u0170\2\u1461\u1464\5")
        buf.write("\u02d0\u0169\2\u1462\u1464\5\u02d4\u016b\2\u1463\u1460")
        buf.write("\3\2\2\2\u1463\u1461\3\2\2\2\u1463\u1462\3\2\2\2\u1464")
        buf.write("\u1465\3\2\2\2\u1465\u1473\tK\2\2\u1466\u1469\7\u020f")
        buf.write("\2\2\u1467\u146a\7\u0209\2\2\u1468\u146a\5\u02d0\u0169")
        buf.write("\2\u1469\u1467\3\2\2\2\u1469\u1468\3\2\2\2\u146a\u1470")
        buf.write("\3\2\2\2\u146b\u146e\7\u0215\2\2\u146c\u146f\7\u0209\2")
        buf.write("\2\u146d\u146f\5\u02d0\u0169\2\u146e\u146c\3\2\2\2\u146e")
        buf.write("\u146d\3\2\2\2\u146f\u1471\3\2\2\2\u1470\u146b\3\2\2\2")
        buf.write("\u1470\u1471\3\2\2\2\u1471\u1472\3\2\2\2\u1472\u1474\7")
        buf.write("\u0210\2\2\u1473\u1466\3\2\2\2\u1473\u1474\3\2\2\2\u1474")
        buf.write("\u1484\3\2\2\2\u1475\u1482\7\u0189\2\2\u1476\u1483\7[")
        buf.write("\2\2\u1477\u1483\7\u00a3\2\2\u1478\u1483\7\u00df\2\2\u1479")
        buf.write("\u1480\7\u0151\2\2\u147a\u147d\7\u020f\2\2\u147b\u147e")
        buf.write("\7\u0209\2\2\u147c\u147e\5\u02d0\u0169\2\u147d\u147b\3")
        buf.write("\2\2\2\u147d\u147c\3\2\2\2\u147e\u147f\3\2\2\2\u147f\u1481")
        buf.write("\7\u0210\2\2\u1480\u147a\3\2\2\2\u1480\u1481\3\2\2\2\u1481")
        buf.write("\u1483\3\2\2\2\u1482\u1476\3\2\2\2\u1482\u1477\3\2\2\2")
        buf.write("\u1482\u1478\3\2\2\2\u1482\u1479\3\2\2\2\u1483\u1485\3")
        buf.write("\2\2\2\u1484\u1475\3\2\2\2\u1484\u1485\3\2\2\2\u1485\u1493")
        buf.write("\3\2\2\2\u1486\u1493\5\u02da\u016e\2\u1487\u1488\7Z\2")
        buf.write("\2\u1488\u1493\5\u02de\u0170\2\u1489\u1493\5\u02de\u0170")
        buf.write("\2\u148a\u1493\7\u00fe\2\2\u148b\u1493\7\u018f\2\2\u148c")
        buf.write("\u1493\7\u008e\2\2\u148d\u1493\7]\2\2\u148e\u1493\7\u015b")
        buf.write("\2\2\u148f\u1493\7\u00e0\2\2\u1490\u1493\7\u00da\2\2\u1491")
        buf.write("\u1493\7e\2\2\u1492\u1454\3\2\2\2\u1492\u145f\3\2\2\2")
        buf.write("\u1492\u1486\3\2\2\2\u1492\u1487\3\2\2\2\u1492\u1489\3")
        buf.write("\2\2\2\u1492\u148a\3\2\2\2\u1492\u148b\3\2\2\2\u1492\u148c")
        buf.write("\3\2\2\2\u1492\u148d\3\2\2\2\u1492\u148e\3\2\2\2\u1492")
        buf.write("\u148f\3\2\2\2\u1492\u1490\3\2\2\2\u1492\u1491\3\2\2\2")
        buf.write("\u1493\u02d9\3\2\2\2\u1494\u1495\tL\2\2\u1495\u02db\3")
        buf.write("\2\2\2\u1496\u1497\7\u0214\2\2\u1497\u1498\5\u02da\u016e")
        buf.write("\2\u1498\u02dd\3\2\2\2\u1499\u149a\tM\2\2\u149a\u02df")
        buf.write("\3\2\2\2\u149b\u149c\7\u0229\2\2\u149c\u149e\5\u02b6\u015c")
        buf.write("\2\u149d\u149b\3\2\2\2\u149d\u149e\3\2\2\2\u149e\u149f")
        buf.write("\3\2\2\2\u149f\u14a0\5\u02e2\u0172\2\u14a0\u02e1\3\2\2")
        buf.write("\2\u14a1\u14a4\5\u02ee\u0178\2\u14a2\u14a4\7\u020c\2\2")
        buf.write("\u14a3\u14a1\3\2\2\2\u14a3\u14a2\3\2\2\2\u14a4\u02e3\3")
        buf.write("\2\2\2\u14a5\u14ad\7\u021f\2\2\u14a6\u14a7\7\u021d\2\2")
        buf.write("\u14a7\u14ad\7\u0223\2\2\u14a8\u14a9\7\u0222\2\2\u14a9")
        buf.write("\u14ad\7\u0226\2\2\u14aa\u14ab\7\u0220\2\2\u14ab\u14ad")
        buf.write("\7\u0226\2\2\u14ac\u14a5\3\2\2\2\u14ac\u14a6\3\2\2\2\u14ac")
        buf.write("\u14a8\3\2\2\2\u14ac\u14aa\3\2\2\2\u14ad\u02e5\3\2\2\2")
        buf.write("\u14ae\u14b2\7\u021e\2\2\u14af\u14b0\7\u0223\2\2\u14b0")
        buf.write("\u14b2\7\u0226\2\2\u14b1\u14ae\3\2\2\2\u14b1\u14af\3\2")
        buf.write("\2\2\u14b2\u02e7\3\2\2\2\u14b3\u14b7\7\u021c\2\2\u14b4")
        buf.write("\u14b5\7\u021d\2\2\u14b5\u14b7\7\u0226\2\2\u14b6\u14b3")
        buf.write("\3\2\2\2\u14b6\u14b4\3\2\2\2\u14b7\u02e9\3\2\2\2\u14b8")
        buf.write("\u14bc\7\u0224\2\2\u14b9\u14ba\7\u0225\2\2\u14ba\u14bc")
        buf.write("\7\u0225\2\2\u14bb\u14b8\3\2\2\2\u14bb\u14b9\3\2\2\2\u14bc")
        buf.write("\u02eb\3\2\2\2\u14bd\u14be\7\u020f\2\2\u14be\u14bf\7\u0213")
        buf.write("\2\2\u14bf\u14c0\7\u0210\2\2\u14c0\u02ed\3\2\2\2\u14c1")
        buf.write("\u14c2\tN\2\2\u14c2\u02ef\3\2\2\2\u14c3\u14c4\tO\2\2\u14c4")
        buf.write("\u02f1\3\2\2\2\u14c5\u14c6\tP\2\2\u14c6\u02f3\3\2\2\2")
        buf.write("\u14c7\u14c8\tQ\2\2\u14c8\u02f5\3\2\2\2\u02be\u02f9\u02fe")
        buf.write("\u0305\u0308\u030c\u0321\u032a\u0334\u0339\u0340\u0342")
        buf.write("\u0347\u034c\u0351\u0356\u0359\u035d\u036b\u0370\u0373")
        buf.write("\u0380\u038a\u038f\u0395\u039a\u03a1\u03aa\u03b1\u03b3")
        buf.write("\u03bf\u03c9\u03ce\u03da\u03df\u03e4\u03f1\u03fb\u0400")
        buf.write("\u0407\u0409\u040d\u0411\u0416\u041b\u0420\u042c\u0431")
        buf.write("\u0435\u043a\u0440\u0447\u0451\u0456\u0459\u045d\u0462")
        buf.write("\u0468\u046f\u0476\u0479\u047c\u047f\u048a\u0496\u049a")
        buf.write("\u049d\u04a6\u04ae\u04b6\u04b9\u04c0\u04c4\u04cb\u04d1")
        buf.write("\u04fa\u0516\u051d\u0522\u052d\u0530\u053b\u0543\u0548")
        buf.write("\u054f\u0552\u0555\u0559\u055c\u0564\u0569\u056e\u0575")
        buf.write("\u057f\u058f\u0595\u059f\u05a9\u05b0\u05b5\u05bb\u05c5")
        buf.write("\u05ca\u05d1\u05d6\u05dc\u05df\u05e2\u05f3\u05f8\u0601")
        buf.write("\u0606\u060c\u0613\u061a\u061d\u0624\u0629\u062d\u0632")
        buf.write("\u0637\u0641\u0647\u0651\u0656\u065d\u0663\u0667\u066a")
        buf.write("\u066d\u067e\u0683\u068b\u0699\u06a0\u06aa\u06ac\u06c1")
        buf.write("\u06d3\u06e5\u06ee\u06f3\u06f8\u06fe\u0705\u070a\u070c")
        buf.write("\u0724\u072d\u0732\u0736\u0739\u0743\u074f\u0755\u075d")
        buf.write("\u0761\u0764\u0773\u0777\u077c\u077f\u0784\u078f\u0793")
        buf.write("\u079f\u07a4\u07a8\u07ac\u07b2\u07b5\u07b8\u07d3\u07d9")
        buf.write("\u07dd\u07e8\u07ef\u07f3\u07f6\u07fc\u0805\u080d\u0811")
        buf.write("\u0815\u081d\u0826\u082c\u082e\u083c\u0850\u0854\u085b")
        buf.write("\u085f\u0863\u0867\u0873\u0877\u0885\u088b\u0892\u0898")
        buf.write("\u08aa\u08b0\u08b2\u08bb\u08c5\u08ca\u08d9\u08dd\u08e0")
        buf.write("\u08e4\u08ec\u08ee\u08f2\u08fa\u0901\u0906\u0908\u090d")
        buf.write("\u0912\u091a\u0921\u0925\u0928\u0931\u0937\u093f\u0949")
        buf.write("\u0954\u0957\u095e\u0961\u0968\u0973\u0979\u097d\u0987")
        buf.write("\u098a\u0990\u099b\u099d\u099f\u09a2\u09a6\u09a9\u09ad")
        buf.write("\u09b1\u09b6\u09c1\u09c5\u09cd\u09d0\u09d5\u09d7\u09e0")
        buf.write("\u09ea\u09ef\u09f5\u09f9\u09fc\u0a04\u0a07\u0a0b\u0a0f")
        buf.write("\u0a14\u0a17\u0a1b\u0a1f\u0a23\u0a2f\u0a3d\u0a42\u0a46")
        buf.write("\u0a4f\u0a53\u0a5b\u0a5e\u0a61\u0a65\u0a68\u0a6b\u0a6e")
        buf.write("\u0a72\u0a7c\u0a83\u0a8a\u0a8f\u0a95\u0a99\u0a9e\u0aa5")
        buf.write("\u0aab\u0ab2\u0ab5\u0ab8\u0abc\u0ac1\u0ac5\u0ac7\u0ad4")
        buf.write("\u0adb\u0ae9\u0aec\u0af6\u0afa\u0b02\u0b0e\u0b18\u0b1d")
        buf.write("\u0b27\u0b2f\u0b32\u0b38\u0b3c\u0b41\u0b4b\u0b50\u0b5d")
        buf.write("\u0b69\u0b6e\u0b78\u0b7d\u0b7f\u0b84\u0b88\u0b8e\u0b92")
        buf.write("\u0b9f\u0ba3\u0bad\u0bb0\u0bb2\u0bb7\u0bc0\u0bcd\u0bd5")
        buf.write("\u0bde\u0be2\u0be7\u0bf2\u0bf4\u0c04\u0c09\u0c0f\u0c15")
        buf.write("\u0c27\u0c2e\u0c31\u0c34\u0c3c\u0c3f\u0c47\u0c49\u0c4d")
        buf.write("\u0c50\u0c55\u0c57\u0c5b\u0c67\u0c70\u0c78\u0c7d\u0c81")
        buf.write("\u0c86\u0c89\u0c91\u0c99\u0c9f\u0ca2\u0ca5\u0cad\u0cb7")
        buf.write("\u0cc3\u0cca\u0cce\u0cd2\u0cd5\u0cd8\u0cdd\u0ce2\u0ce5")
        buf.write("\u0ce8\u0cee\u0cf1\u0cf7\u0cfa\u0cfd\u0d02\u0d05\u0d0d")
        buf.write("\u0d13\u0d1d\u0d22\u0d2b\u0d35\u0d39\u0d3b\u0d3e\u0d4a")
        buf.write("\u0d4e\u0d51\u0d65\u0d6a\u0d6f\u0d76\u0d79\u0d82\u0d89")
        buf.write("\u0d8e\u0d92\u0d9a\u0da0\u0da8\u0dab\u0db3\u0dbb\u0dbe")
        buf.write("\u0dc1\u0dca\u0dd0\u0dd6\u0dd8\u0de5\u0de7\u0df0\u0df2")
        buf.write("\u0df6\u0dfc\u0e00\u0e0e\u0e14\u0e1d\u0e27\u0e32\u0e38")
        buf.write("\u0e3d\u0e48\u0e4c\u0e53\u0e58\u0e5c\u0e62\u0e66\u0e73")
        buf.write("\u0e78\u0e81\u0e83\u0e85\u0e8d\u0e9e\u0ea6\u0eb2\u0eba")
        buf.write("\u0ec2\u0ecb\u0ece\u0ed5\u0edd\u0ee4\u0ee8\u0eef\u0ef3")
        buf.write("\u0ef8\u0efc\u0f04\u0f08\u0f0f\u0f18\u0f26\u0f33\u0f38")
        buf.write("\u0f4c\u0f50\u0f53\u0f5a\u0f5d\u0f61\u0f64\u0f6b\u0f6e")
        buf.write("\u0f74\u0f77\u0f7b\u0f7e\u0f85\u0f8a\u0f98\u0f9e\u0fa0")
        buf.write("\u0fa4\u0fac\u0fb8\u0fc1\u0fc9\u0fcd\u0fd8\u0fee\u0ff1")
        buf.write("\u0ff4\u0ff9\u0ffe\u1003\u1008\u1011\u1014\u1016\u101a")
        buf.write("\u1021\u1028\u1030\u1035\u103a\u103f\u1045\u1048\u104c")
        buf.write("\u1056\u1062\u1064\u106b\u106f\u1078\u1081\u108f\u109a")
        buf.write("\u109e\u10a1\u10aa\u10b0\u10ba\u10c2\u10c5\u10c8\u10d1")
        buf.write("\u10d6\u10df\u10e5\u10ea\u10ed\u10f2\u10f7\u10fb\u1101")
        buf.write("\u1107\u1110\u1115\u111d\u1121\u1126\u112c\u1133\u1138")
        buf.write("\u113f\u1143\u1148\u1150\u1153\u1156\u1159\u115d\u1162")
        buf.write("\u1167\u116b\u1172\u1177\u1179\u1184\u1188\u118a\u1195")
        buf.write("\u11a0\u11a9\u11ac\u11b0\u11b3\u11b7\u11c4\u11c9\u11d1")
        buf.write("\u11d8\u11dd\u11e1\u11e6\u11eb\u11ee\u11f5\u11ff\u1207")
        buf.write("\u120b\u1215\u1218\u121a\u1224\u1226\u122c\u1232\u1234")
        buf.write("\u1242\u1244\u124d\u1250\u1259\u1262\u126c\u1272\u1277")
        buf.write("\u127b\u127e\u1282\u1289\u1295\u12a0\u12a3\u12a7\u12ba")
        buf.write("\u12bf\u12c6\u12d3\u12dd\u12e2\u12eb\u12f3\u12fb\u1301")
        buf.write("\u1306\u130b\u1310\u1315\u131a\u131e\u1323\u1326\u132c")
        buf.write("\u1330\u1335\u133e\u1344\u1349\u1350\u135e\u1362\u1368")
        buf.write("\u136d\u1372\u1374\u1379\u137d\u1382\u1389\u138e\u1390")
        buf.write("\u1392\u139c\u13a1\u13a5\u13a8\u13ac\u13b5\u13bb\u13bf")
        buf.write("\u13c1\u13c5\u13c9\u13d2\u13da\u13e2\u13e4\u13ea\u13ed")
        buf.write("\u13ff\u1406\u1419\u141e\u1421\u1426\u1428\u142e\u1436")
        buf.write("\u143b\u1442\u1446\u144a\u1451\u1457\u145d\u1463\u1469")
        buf.write("\u146e\u1470\u1473\u147d\u1480\u1482\u1484\u1492\u149d")
        buf.write("\u14a3\u14ac\u14b1\u14b6\u14bb")
        return buf.getvalue()


class ora2epasParser ( Parser ):

    grammarFileName = "ora2epas.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'A'", "'ADD'", "'AFTER'", "'AGENT'", 
                     "'AGGREGATE'", "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", 
                     "'ANY'", "'ARRAY'", "'AS'", "'ASC'", "'ASSOCIATE'", 
                     "'AT'", "'ATTRIBUTE'", "'AUDIT'", "'AUTHID'", "'AUTO'", 
                     "'AUTOMATIC'", "'AUTONOMOUS_TRANSACTION'", "'BATCH'", 
                     "'BEFORE'", "'BEGIN'", "'BETWEEN'", "'BFILE'", "'BINARY_DOUBLE'", 
                     "'BINARY_FLOAT'", "'BINARY_INTEGER'", "'BLOB'", "'BLOCK'", 
                     "'BODY'", "'BOOLEAN'", "'BOTH'", "'BREADTH'", "'BULK'", 
                     "'BY'", "'BYTE'", "'C'", "'CACHE'", "'CALL'", "'CANONICAL'", 
                     "'CASCADE'", "'CASE'", "'CAST'", "'CHAR'", "'CHAR_CS'", 
                     "'CHARACTER'", "'CHECK'", "'CHR'", "'CLOB'", "'CLOSE'", 
                     "'CLUSTER'", "'COALESCE'", "'COLLECT'", "'COLUMN'", 
                     "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMMITTED'", 
                     "'COMPATIBILITY'", "'COMPILE'", "'COMPOUND'", "'CONNECT'", 
                     "'CONNECT_BY_ROOT'", "'CONSTANT'", "'CONSTRAINT'", 
                     "'CONSTRAINTS'", "'CONSTRUCTOR'", "'CONTENT'", "'CONTEXT'", 
                     "'CONTINUE'", "'CONVERT'", "'CORRUPT_XID'", "'CORRUPT_XID_ALL'", 
                     "'COST'", "'COUNT'", "'CREATE'", "'CROSS'", "'CUBE'", 
                     "'CURRENT'", "'CURRENT_USER'", "'CURSOR'", "'CUSTOMDATUM'", 
                     "'CYCLE'", "'DATA'", "'DATABASE'", "'DATE'", "'DAY'", 
                     "'DB_ROLE_CHANGE'", "'DBTIMEZONE'", "'DDL'", "'DEBUG'", 
                     "'DEC'", "'DECIMAL'", "'DECLARE'", "'DECOMPOSE'", "'DECREMENT'", 
                     "'DEFAULT'", "'DEFAULTS'", "'DEFERRED'", "'DEFINER'", 
                     "'DELETE'", "'DEPTH'", "'DESC'", "'DETERMINISTIC'", 
                     "'DIMENSION'", "'DISABLE'", "'DISASSOCIATE'", "'DISTINCT'", 
                     "'DOCUMENT'", "'DOUBLE'", "'DROP'", "'DSINTERVAL_UNCONSTRAINED'", 
                     "'EACH'", "'ELEMENT'", "'ELSE'", "'ELSIF'", "'EMPTY'", 
                     "'ENABLE'", "'ENCODING'", "'END'", "'ENTITYESCAPING'", 
                     "'ERR'", "'ERRORS'", "'ESCAPE'", "'EVALNAME'", "'EXCEPTION'", 
                     "'EXCEPTION_INIT'", "'EXCEPTIONS'", "'EXCLUDE'", "'EXCLUSIVE'", 
                     "'EXECUTE'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'EXTERNAL'", 
                     "'EXTRACT'", "'FAILURE'", "'FALSE'", "'FETCH'", "'FINAL'", 
                     "'FIRST'", "'FIRST_VALUE'", "'FLOAT'", "'FOLLOWING'", 
                     "'FOLLOWS'", "'FOR'", "'FORALL'", "'FORCE'", "'FROM'", 
                     "'FULL'", "'FUNCTION'", "'GOTO'", "'GRANT'", "'GROUP'", 
                     "'GROUPING'", "'HASH'", "'HAVING'", "'HIDE'", "'HOUR'", 
                     "'IF'", "'IGNORE'", "'IMMEDIATE'", "'IN'", "'INCLUDE'", 
                     "'INCLUDING'", "'INCREMENT'", "'INDENT'", "'INDEX'", 
                     "'INDEXED'", "'INDICATOR'", "'INDICES'", "'INFINITE'", 
                     "'INLINE'", "'INNER'", "'INOUT'", "'INSERT'", "'INSTANTIABLE'", 
                     "'INSTEAD'", "'INT'", "'INTEGER'", "'INTERSECT'", "'INTERVAL'", 
                     "'INTO'", "'INVALIDATE'", "'IS'", "'ISOLATION'", "'ITERATE'", 
                     "'JAVA'", "'JOIN'", "'KEEP'", "'LANGUAGE'", "'LAST'", 
                     "'LAST_VALUE'", "'LEADING'", "'LEFT'", "'LEVEL'", "'LIBRARY'", 
                     "'LIKE'", "'LIKE2'", "'LIKE4'", "'LIKEC'", "'LIMIT'", 
                     "'LOCAL'", "'LOCK'", "'LOCKED'", "'LOG'", "'LOGOFF'", 
                     "'LOGON'", "'LONG'", "'LOOP'", "'MAIN'", "'MAP'", "'MATCHED'", 
                     "'MAXVALUE'", "'MEASURES'", "'MEMBER'", "'MERGE'", 
                     "'MINUS'", "'MINUTE'", "'MINVALUE'", "'MLSLABEL'", 
                     "'MODE'", "'MODEL'", "'MODIFY'", "'MONTH'", "'MULTISET'", 
                     "'NAME'", "'NAN'", "'NATURAL'", "'NATURALN'", "'NAV'", 
                     "'NCHAR'", "'NCHAR_CS'", "'NCLOB'", "'NESTED'", "'NEW'", 
                     "'NO'", "'NOAUDIT'", "'NOCACHE'", "'NOCOPY'", "'NOCYCLE'", 
                     "'NOENTITYESCAPING'", "'NOMAXVALUE'", "'NOMINVALUE'", 
                     "'NONE'", "'NOORDER'", "'NOSCHEMACHECK'", "'NOT'", 
                     "'NOWAIT'", "'NULL'", "'NULLS'", "'NUMBER'", "'NUMERIC'", 
                     "'NVARCHAR2'", "'OBJECT'", "'OF'", "'OFF'", "'OID'", 
                     "'OLD'", "'ON'", "'ONLY'", "'OPEN'", "'OPTION'", "'OR'", 
                     "'ORADATA'", "'ORDER'", "'ORDINALITY'", "'OSERROR'", 
                     "'OUT'", "'OUTER'", "'OVER'", "'OVERRIDING'", "'PACKAGE'", 
                     "'PARALLEL_ENABLE'", "'PARAMETERS'", "'PARENT'", "'PARTITION'", 
                     "'PASSING'", "'PATH'", "'%ISOPEN'", "'%FOUND'", "'%NOTFOUND'", 
                     "'%ROWCOUNT'", "'%ROWTYPE'", "'%TYPE'", "'PIPELINED'", 
                     "'PIVOT'", "'PLAN'", "'PUBLIC'", "'PLS_INTEGER'", "'POSITIVE'", 
                     "'POSITIVEN'", "'PRAGMA'", "'PRECEDING'", "'PRECISION'", 
                     "'PRESENT'", "'PRIOR'", "'PROCEDURE'", "'RAISE'", "'RANGE'", 
                     "'RAW'", "'READ'", "'REAL'", "'RECORD'", "'REF'", "'REFERENCE'", 
                     "'REFERENCING'", "'REJECT'", "'RENAME'", "'REPLACE'", 
                     "'RESPECT'", "'RESTRICT_REFERENCES'", "'RESULT'", "'RETURN'", 
                     "'RETURNING'", "'REUSE'", "'REVERSE'", "'REVOKE'", 
                     "'RIGHT'", "'ROLLBACK'", "'ROLLUP'", "'ROW'", "'ROWID'", 
                     "'ROWS'", "'RULES'", "'SAMPLE'", "'SAVE'", "'SAVEPOINT'", 
                     "'SCHEMA'", "'SCHEMACHECK'", "'SCN'", "'SEARCH'", "'SECOND'", 
                     "'SEED'", "'SEGMENT'", "'SELECT'", "'SELF'", "'SEQUENCE'", 
                     "'SEQUENTIAL'", "'SERIALIZABLE'", "'SERIALLY_REUSABLE'", 
                     "'SERVERERROR'", "'SESSIONTIMEZONE'", "'SET'", "'SETS'", 
                     "'SETTINGS'", "'SHARE'", "'SHOW'", "'SHUTDOWN'", "'SIBLINGS'", 
                     "'SIGNTYPE'", "'SIMPLE_INTEGER'", "'SINGLE'", "'SIZE'", 
                     "'SKIP'", "'SMALLINT'", "'SNAPSHOT'", "'SOME'", "'SPECIFICATION'", 
                     "'SQLDATA'", "'SQLERROR'", "'STANDALONE'", "'START'", 
                     "'STARTUP'", "'STATEMENT'", "'STATEMENT_ID'", "'STATIC'", 
                     "'STATISTICS'", "'STRING'", "'SUBMULTISET'", "'SUBPARTITION'", 
                     "'SUBSTITUTABLE'", "'SUBTYPE'", "'SUCCESS'", "'SUSPEND'", 
                     "'SYNONYM'", "'TABLE'", "'THE'", "'THEN'", "'TIME'", 
                     "'TIMESTAMP'", "'TIMESTAMP_LTZ_UNCONSTRAINED'", "'TIMESTAMP_TZ_UNCONSTRAINED'", 
                     "'TIMESTAMP_UNCONSTRAINED'", "'TIMEZONE_ABBR'", "'TIMEZONE_HOUR'", 
                     "'TIMEZONE_MINUTE'", "'TIMEZONE_REGION'", "'TO'", "'TRAILING'", 
                     "'TRANSACTION'", "'TRANSLATE'", "'TREAT'", "'TRIGGER'", 
                     "'TRUE'", "'TRUNCATE'", "'TYPE'", "'UNBOUNDED'", "'UNDER'", 
                     "'UNION'", "'UNIQUE'", "'UNLIMITED'", "'UNPIVOT'", 
                     "'UNTIL'", "'UPDATE'", "'UPDATED'", "'UPSERT'", "'UROWID'", 
                     "'USE'", "'USING'", "'VALIDATE'", "'VALUE'", "'VALUES'", 
                     "'VARCHAR'", "<INVALID>", "'VARIABLE'", "'VARRAY'", 
                     "'VARYING'", "'VERSION'", "'VERSIONS'", "'WAIT'", "'WARNING'", 
                     "'WELLFORMED'", "'WHEN'", "'WHENEVER'", "'WHERE'", 
                     "'WHILE'", "'WITH'", "'WITHIN'", "'WORK'", "'WRITE'", 
                     "'XML'", "'XMLAGG'", "'XMLATTRIBUTES'", "'XMLCAST'", 
                     "'XMLCOLATTVAL'", "'XMLELEMENT'", "'XMLEXISTS'", "'XMLFOREST'", 
                     "'XMLNAMESPACES'", "'XMLPARSE'", "'XMLPI'", "'XMLQUERY'", 
                     "'XMLROOT'", "'XMLSERIALIZE'", "'XMLTABLE'", "'YEAR'", 
                     "'YES'", "'YMINTERVAL_UNCONSTRAINED'", "'ZONE'", "'PREDICTION'", 
                     "'PREDICTION_BOUNDS'", "'PREDICTION_COST'", "'PREDICTION_DETAILS'", 
                     "'PREDICTION_PROBABILITY'", "'PREDICTION_SET'", "'CUME_DIST'", 
                     "'DENSE_RANK'", "'LISTAGG'", "'PERCENT_RANK'", "'PERCENTILE_CONT'", 
                     "'PERCENTILE_DISC'", "'RANK'", "'AVG'", "'CORR'", "'COVAR_'", 
                     "'DECODE'", "'LAG'", "'LEAD'", "'MAX'", "'MEDIAN'", 
                     "'MIN'", "'NTILE'", "'NVL'", "'RATIO_TO_REPORT'", "'REGR_'", 
                     "'ROUND'", "'ROW_NUMBER'", "'SUBSTR'", "'TO_CHAR'", 
                     "'TRIM'", "'SUM'", "'STDDEV'", "'VAR_'", "'VARIANCE'", 
                     "'DBMS_ALERT'", "'DBMS_AQADM'", "'DBMS_AQ'", "'DBMS_CRYPTO'", 
                     "'DBMS_JOB'", "'DBMS_LOB'", "'DBMS_LOCK'", "'DBMS_MVIEW'", 
                     "'DBMS_OUTPUT'", "'DBMS_PIPE'", "'DBMS_PROFILER'", 
                     "'DBMS_RANDOM'", "'DBMS_RLS'", "'DBMS_SCHEDULER'", 
                     "'DBMS_SESSION'", "'DBMS_SQL'", "'DBMS_UTILITY'", "'EMP_ADMIN'", 
                     "'UTL_ENCODE'", "'UTL_FILE'", "'UTL_HTTP'", "'UTL_MAIL'", 
                     "'UTL_RAW'", "'UTL_SMTP'", "'UTL_TCP'", "'UTL_URL'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'..'", "'.'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'%'", "'&'", "'('", "')'", "'**'", "'*'", "'+'", "'-'", 
                     "','", "'/'", "'@'", "':='", "<INVALID>", "':'", "';'", 
                     "'<='", "'<'", "'>='", "<INVALID>", "'^'", "'~'", "'!'", 
                     "'>'", "'||'", "'|'", "'='", "'['", "']'", "'_'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'@!'" ]

    symbolicNames = [ "<INVALID>", "A_LETTER", "ADD", "AFTER", "AGENT", 
                      "AGGREGATE", "ALL", "ALTER", "ANALYZE", "AND", "ANY", 
                      "ARRAY", "AS", "ASC", "ASSOCIATE", "AT", "ATTRIBUTE", 
                      "AUDIT", "AUTHID", "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", 
                      "BATCH", "BEFORE", "BEGIN", "BETWEEN", "BFILE", "BINARY_DOUBLE", 
                      "BINARY_FLOAT", "BINARY_INTEGER", "BLOB", "BLOCK", 
                      "BODY", "BOOLEAN", "BOTH", "BREADTH", "BULK", "BY", 
                      "BYTE", "C_LETTER", "CACHE", "CALL", "CANONICAL", 
                      "CASCADE", "CASE", "CAST", "CHAR", "CHAR_CS", "CHARACTER", 
                      "CHECK", "CHR", "CLOB", "CLOSE", "CLUSTER", "COALESCE", 
                      "COLLECT", "COLUMN", "COLUMNS", "COMMENT", "COMMIT", 
                      "COMMITTED", "COMPATIBILITY", "COMPILE", "COMPOUND", 
                      "CONNECT", "CONNECT_BY_ROOT", "CONSTANT", "CONSTRAINT", 
                      "CONSTRAINTS", "CONSTRUCTOR", "CONTENT", "CONTEXT", 
                      "CONTINUE", "CONVERT", "CORRUPT_XID", "CORRUPT_XID_ALL", 
                      "COST", "COUNT", "CREATE", "CROSS", "CUBE", "CURRENT", 
                      "CURRENT_USER", "CURSOR", "CUSTOMDATUM", "CYCLE", 
                      "DATA", "DATABASE", "DATE", "DAY", "DB_ROLE_CHANGE", 
                      "DBTIMEZONE", "DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", 
                      "DECOMPOSE", "DECREMENT", "DEFAULT", "DEFAULTS", "DEFERRED", 
                      "DEFINER", "DELETE", "DEPTH", "DESC", "DETERMINISTIC", 
                      "DIMENSION", "DISABLE", "DISASSOCIATE", "DISTINCT", 
                      "DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", 
                      "EACH", "ELEMENT", "ELSE", "ELSIF", "EMPTY", "ENABLE", 
                      "ENCODING", "END", "ENTITYESCAPING", "ERR", "ERRORS", 
                      "ESCAPE", "EVALNAME", "EXCEPTION", "EXCEPTION_INIT", 
                      "EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", 
                      "EXIT", "EXPLAIN", "EXTERNAL", "EXTRACT", "FAILURE", 
                      "FALSE", "FETCH", "FINAL", "FIRST", "FIRST_VALUE", 
                      "FLOAT", "FOLLOWING", "FOLLOWS", "FOR", "FORALL", 
                      "FORCE", "FROM", "FULL", "FUNCTION", "GOTO", "GRANT", 
                      "GROUP", "GROUPING", "HASH", "HAVING", "HIDE", "HOUR", 
                      "IF", "IGNORE", "IMMEDIATE", "IN", "INCLUDE", "INCLUDING", 
                      "INCREMENT", "INDENT", "INDEX", "INDEXED", "INDICATOR", 
                      "INDICES", "INFINITE", "INLINE", "INNER", "INOUT", 
                      "INSERT", "INSTANTIABLE", "INSTEAD", "INT", "INTEGER", 
                      "INTERSECT", "INTERVAL", "INTO", "INVALIDATE", "IS", 
                      "ISOLATION", "ITERATE", "JAVA", "JOIN", "KEEP", "LANGUAGE", 
                      "LAST", "LAST_VALUE", "LEADING", "LEFT", "LEVEL", 
                      "LIBRARY", "LIKE", "LIKE2", "LIKE4", "LIKEC", "LIMIT", 
                      "LOCAL", "LOCK", "LOCKED", "LOG", "LOGOFF", "LOGON", 
                      "LONG", "LOOP", "MAIN", "MAP", "MATCHED", "MAXVALUE", 
                      "MEASURES", "MEMBER", "MERGE", "MINUS", "MINUTE", 
                      "MINVALUE", "MLSLABEL", "MODE", "MODEL", "MODIFY", 
                      "MONTH", "MULTISET", "NAME", "NAN", "NATURAL", "NATURALN", 
                      "NAV", "NCHAR", "NCHAR_CS", "NCLOB", "NESTED", "NEW", 
                      "NO", "NOAUDIT", "NOCACHE", "NOCOPY", "NOCYCLE", "NOENTITYESCAPING", 
                      "NOMAXVALUE", "NOMINVALUE", "NONE", "NOORDER", "NOSCHEMACHECK", 
                      "NOT", "NOWAIT", "NULL", "NULLS", "NUMBER", "NUMERIC", 
                      "NVARCHAR2", "OBJECT", "OF", "OFF", "OID", "OLD", 
                      "ON", "ONLY", "OPEN", "OPTION", "OR", "ORADATA", "ORDER", 
                      "ORDINALITY", "OSERROR", "OUT", "OUTER", "OVER", "OVERRIDING", 
                      "PACKAGE", "PARALLEL_ENABLE", "PARAMETERS", "PARENT", 
                      "PARTITION", "PASSING", "PATH", "PERCENT_ISOPEN", 
                      "PERCENT_FOUND", "PERCENT_NOTFOUND", "PERCENT_ROWCOUNT", 
                      "PERCENT_ROWTYPE", "PERCENT_TYPE", "PIPELINED", "PIVOT", 
                      "PLAN", "PUBLIC", "PLS_INTEGER", "POSITIVE", "POSITIVEN", 
                      "PRAGMA", "PRECEDING", "PRECISION", "PRESENT", "PRIOR", 
                      "PROCEDURE", "RAISE", "RANGE", "RAW", "READ", "REAL", 
                      "RECORD", "REF", "REFERENCE", "REFERENCING", "REJECT", 
                      "RENAME", "REPLACE", "RESPECT", "RESTRICT_REFERENCES", 
                      "RESULT", "RETURN", "RETURNING", "REUSE", "REVERSE", 
                      "REVOKE", "RIGHT", "ROLLBACK", "ROLLUP", "ROW", "ROWID", 
                      "ROWS", "RULES", "SAMPLE", "SAVE", "SAVEPOINT", "SCHEMA", 
                      "SCHEMACHECK", "SCN", "SEARCH", "SECOND", "SEED", 
                      "SEGMENT", "SELECT", "SELF", "SEQUENCE", "SEQUENTIAL", 
                      "SERIALIZABLE", "SERIALLY_REUSABLE", "SERVERERROR", 
                      "SESSIONTIMEZONE", "SET", "SETS", "SETTINGS", "SHARE", 
                      "SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", 
                      "SINGLE", "SIZE", "SKIP_", "SMALLINT", "SNAPSHOT", 
                      "SOME", "SPECIFICATION", "SQLDATA", "SQLERROR", "STANDALONE", 
                      "START", "STARTUP", "STATEMENT", "STATEMENT_ID", "STATIC", 
                      "STATISTICS", "STRING", "SUBMULTISET", "SUBPARTITION", 
                      "SUBSTITUTABLE", "SUBTYPE", "SUCCESS", "SUSPEND", 
                      "SYNONYM", "TABLE", "THE", "THEN", "TIME", "TIMESTAMP", 
                      "TIMESTAMP_LTZ_UNCONSTRAINED", "TIMESTAMP_TZ_UNCONSTRAINED", 
                      "TIMESTAMP_UNCONSTRAINED", "TIMEZONE_ABBR", "TIMEZONE_HOUR", 
                      "TIMEZONE_MINUTE", "TIMEZONE_REGION", "TO", "TRAILING", 
                      "TRANSACTION", "TRANSLATE", "TREAT", "TRIGGER", "TRUE", 
                      "TRUNCATE", "TYPE", "UNBOUNDED", "UNDER", "UNION", 
                      "UNIQUE", "UNLIMITED", "UNPIVOT", "UNTIL", "UPDATE", 
                      "UPDATED", "UPSERT", "UROWID", "USE", "USING", "VALIDATE", 
                      "VALUE", "VALUES", "VARCHAR", "VARCHAR2", "VARIABLE", 
                      "VARRAY", "VARYING", "VERSION", "VERSIONS", "WAIT", 
                      "WARNING", "WELLFORMED", "WHEN", "WHENEVER", "WHERE", 
                      "WHILE", "WITH", "WITHIN", "WORK", "WRITE", "XML", 
                      "XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL", 
                      "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", 
                      "XMLPARSE", "XMLPI", "XMLQUERY", "XMLROOT", "XMLSERIALIZE", 
                      "XMLTABLE", "YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", 
                      "ZONE", "PREDICTION", "PREDICTION_BOUNDS", "PREDICTION_COST", 
                      "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", "PREDICTION_SET", 
                      "CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", 
                      "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", "AVG", 
                      "CORR", "COVAR_", "DECODE", "LAG", "LEAD", "MAX", 
                      "MEDIAN", "MIN", "NTILE", "NVL", "RATIO_TO_REPORT", 
                      "REGR_", "ROUND", "ROW_NUMBER", "SUBSTR", "TO_CHAR", 
                      "TRIM", "SUM", "STDDEV", "VAR_", "VARIANCE", "DBMS_ALERT", 
                      "DBMS_AQADM", "DBMS_AQ", "DBMS_CRYPTO", "DBMS_JOB", 
                      "DBMS_LOB", "DBMS_LOCK", "DBMS_MVIEW", "DBMS_OUTPUT", 
                      "DBMS_PIPE", "DBMS_PROFILER", "DBMS_RANDOM", "DBMS_RLS", 
                      "DBMS_SCHEDULER", "DBMS_SESSION", "DBMS_SQL", "DBMS_UTILITY", 
                      "EMP_ADMIN", "UTL_ENCODE", "UTL_FILE", "UTL_HTTP", 
                      "UTL_MAIL", "UTL_RAW", "UTL_SMTP", "UTL_TCP", "UTL_URL", 
                      "NATIONAL_CHAR_STRING_LIT", "BIT_STRING_LIT", "HEX_STRING_LIT", 
                      "DOUBLE_PERIOD", "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
                      "CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", 
                      "LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", 
                      "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", 
                      "ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", "LESS_THAN_OR_EQUALS_OP", 
                      "LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "NOT_EQUAL_OP", 
                      "CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", 
                      "GREATER_THAN_OP", "CONCATENATION_OP", "VERTICAL_BAR", 
                      "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", "INTRODUCER", 
                      "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
                      "PROMPT", "START_CMD", "REGULAR_ID", "ZV" ]

    RULE_swallow_to_semi = 0
    RULE_compilation_unit = 1
    RULE_sql_script = 2
    RULE_unit_statement = 3
    RULE_create_cluster_table = 4
    RULE_create_database_links = 5
    RULE_create_function_body = 6
    RULE_parallel_enable_clause = 7
    RULE_partition_by_clause = 8
    RULE_streaming_clause = 9
    RULE_create_index = 10
    RULE_create_package = 11
    RULE_create_package_body = 12
    RULE_package_obj_spec = 13
    RULE_procedure_spec = 14
    RULE_function_spec = 15
    RULE_package_obj_body = 16
    RULE_function_body = 17
    RULE_procedure_body = 18
    RULE_create_procedure_body = 19
    RULE_create_trigger = 20
    RULE_trigger_follows_clause = 21
    RULE_trigger_when_clause = 22
    RULE_simple_dml_trigger = 23
    RULE_for_each_row = 24
    RULE_compound_dml_trigger = 25
    RULE_non_dml_trigger = 26
    RULE_trigger_body = 27
    RULE_routine_clause = 28
    RULE_compound_trigger_block = 29
    RULE_timing_point_section = 30
    RULE_non_dml_event = 31
    RULE_dml_event_clause = 32
    RULE_dml_event_element = 33
    RULE_dml_event_nested_clause = 34
    RULE_referencing_clause = 35
    RULE_referencing_element = 36
    RULE_create_type = 37
    RULE_type_definition = 38
    RULE_object_type_def = 39
    RULE_object_as_part = 40
    RULE_object_under_part = 41
    RULE_nested_table_type_def = 42
    RULE_sqlj_object_type = 43
    RULE_type_body = 44
    RULE_type_body_elements = 45
    RULE_map_order_func_declaration = 46
    RULE_subprog_decl_in_type = 47
    RULE_proc_decl_in_type = 48
    RULE_func_decl_in_type = 49
    RULE_constructor_declaration = 50
    RULE_create_view = 51
    RULE_create_materialized_view = 52
    RULE_modifier_clause = 53
    RULE_object_member_spec = 54
    RULE_sqlj_object_type_attr = 55
    RULE_element_spec = 56
    RULE_element_spec_options = 57
    RULE_subprogram_spec = 58
    RULE_type_procedure_spec = 59
    RULE_type_function_spec = 60
    RULE_constructor_spec = 61
    RULE_map_order_function_spec = 62
    RULE_pragma_clause = 63
    RULE_pragma_elements = 64
    RULE_type_elements_parameter = 65
    RULE_create_sequence = 66
    RULE_sequence_spec = 67
    RULE_sequence_start_clause = 68
    RULE_create_table = 69
    RULE_comment_on_column = 70
    RULE_create_synonym = 71
    RULE_comment_on_table = 72
    RULE_anonymous_block = 73
    RULE_invoker_rights_clause = 74
    RULE_compiler_parameters_clause = 75
    RULE_call_spec = 76
    RULE_java_spec = 77
    RULE_c_spec = 78
    RULE_c_agent_in_clause = 79
    RULE_c_parameters_clause = 80
    RULE_parameter = 81
    RULE_default_value_part = 82
    RULE_declare_spec = 83
    RULE_variable_declaration = 84
    RULE_subtype_declaration = 85
    RULE_cursor_declaration = 86
    RULE_parameter_spec = 87
    RULE_exception_declaration = 88
    RULE_pragma_declaration = 89
    RULE_record_type_def = 90
    RULE_field_spec = 91
    RULE_ref_cursor_type_def = 92
    RULE_type_declaration = 93
    RULE_table_type_def = 94
    RULE_table_indexed_by_part = 95
    RULE_varray_type_def = 96
    RULE_seq_of_statements = 97
    RULE_label_declaration = 98
    RULE_statement = 99
    RULE_assignment_statement = 100
    RULE_continue_statement = 101
    RULE_exit_statement = 102
    RULE_goto_statement = 103
    RULE_if_statement = 104
    RULE_elsif_part = 105
    RULE_else_part = 106
    RULE_loop_statement = 107
    RULE_cursor_loop_param = 108
    RULE_forall_statement = 109
    RULE_bounds_clause = 110
    RULE_between_bound = 111
    RULE_lower_bound = 112
    RULE_upper_bound = 113
    RULE_null_statement = 114
    RULE_raise_statement = 115
    RULE_return_statement = 116
    RULE_function_call = 117
    RULE_body = 118
    RULE_exception_handler = 119
    RULE_trigger_block = 120
    RULE_block = 121
    RULE_sql_statement = 122
    RULE_execute_immediate = 123
    RULE_dynamic_returning_clause = 124
    RULE_sql_statements = 125
    RULE_cursor_manipulation_statements = 126
    RULE_close_statement = 127
    RULE_open_statement = 128
    RULE_fetch_statement = 129
    RULE_open_for_statement = 130
    RULE_transaction_control_statements = 131
    RULE_set_transaction_command = 132
    RULE_set_constraint_command = 133
    RULE_commit_statement = 134
    RULE_write_clause = 135
    RULE_rollback_statement = 136
    RULE_savepoint_statement = 137
    RULE_explain_statement = 138
    RULE_select_statement = 139
    RULE_subquery_factoring_clause = 140
    RULE_factoring_element = 141
    RULE_search_clause = 142
    RULE_cycle_clause = 143
    RULE_subquery = 144
    RULE_subquery_operation_part = 145
    RULE_subquery_basic_elements = 146
    RULE_query_block = 147
    RULE_selected_element = 148
    RULE_from_clause = 149
    RULE_select_list_elements = 150
    RULE_table_ref_list = 151
    RULE_table_ref = 152
    RULE_table_ref_aux = 153
    RULE_table_ref_aux_internal = 154
    RULE_join_clause = 155
    RULE_join_on_part = 156
    RULE_join_using_part = 157
    RULE_outer_join_type = 158
    RULE_query_partition_clause = 159
    RULE_flashback_query_clause = 160
    RULE_pivot_clause = 161
    RULE_pivot_element = 162
    RULE_pivot_for_clause = 163
    RULE_pivot_in_clause = 164
    RULE_pivot_in_clause_element = 165
    RULE_pivot_in_clause_elements = 166
    RULE_unpivot_clause = 167
    RULE_unpivot_in_clause = 168
    RULE_unpivot_in_elements = 169
    RULE_hierarchical_query_clause = 170
    RULE_start_part = 171
    RULE_group_by_clause = 172
    RULE_group_by_elements = 173
    RULE_rollup_cube_clause = 174
    RULE_grouping_sets_clause = 175
    RULE_grouping_sets_elements = 176
    RULE_having_clause = 177
    RULE_model_clause = 178
    RULE_cell_reference_options = 179
    RULE_return_rows_clause = 180
    RULE_reference_model = 181
    RULE_main_model = 182
    RULE_model_column_clauses = 183
    RULE_model_column_partition_part = 184
    RULE_model_column_list = 185
    RULE_model_column = 186
    RULE_model_rules_clause = 187
    RULE_model_rules_part = 188
    RULE_model_rules_element = 189
    RULE_cell_assignment = 190
    RULE_model_iterate_clause = 191
    RULE_until_part = 192
    RULE_order_by_clause = 193
    RULE_order_by_elements = 194
    RULE_for_update_clause = 195
    RULE_for_update_of_part = 196
    RULE_for_update_options = 197
    RULE_update_statement = 198
    RULE_update_set_clause = 199
    RULE_column_based_update_set_clause = 200
    RULE_delete_statement = 201
    RULE_insert_statement = 202
    RULE_single_table_insert = 203
    RULE_multi_table_insert = 204
    RULE_multi_table_element = 205
    RULE_conditional_insert_clause = 206
    RULE_conditional_insert_when_part = 207
    RULE_conditional_insert_else_part = 208
    RULE_insert_into_clause = 209
    RULE_values_clause = 210
    RULE_merge_statement = 211
    RULE_merge_update_clause = 212
    RULE_merge_element = 213
    RULE_merge_update_delete_part = 214
    RULE_merge_insert_clause = 215
    RULE_selected_tableview = 216
    RULE_lock_table_statement = 217
    RULE_wait_nowait_part = 218
    RULE_lock_table_element = 219
    RULE_lock_mode = 220
    RULE_general_table_ref = 221
    RULE_static_returning_clause = 222
    RULE_error_logging_clause = 223
    RULE_error_logging_into_part = 224
    RULE_error_logging_reject_part = 225
    RULE_dml_table_expression_clause = 226
    RULE_table_collection_expression = 227
    RULE_subquery_restriction_clause = 228
    RULE_sample_clause = 229
    RULE_seed_part = 230
    RULE_cursor_expression = 231
    RULE_expression_list = 232
    RULE_condition = 233
    RULE_expression = 234
    RULE_logical_or_expression = 235
    RULE_logical_and_expression = 236
    RULE_negated_expression = 237
    RULE_equality_expression = 238
    RULE_multiset_expression = 239
    RULE_multiset_type = 240
    RULE_relational_expression = 241
    RULE_compound_expression = 242
    RULE_relational_operator = 243
    RULE_like_type = 244
    RULE_like_escape_part = 245
    RULE_in_elements = 246
    RULE_between_elements = 247
    RULE_concatenation = 248
    RULE_additive_expression = 249
    RULE_multiply_expression = 250
    RULE_datetime_expression = 251
    RULE_interval_expression = 252
    RULE_model_expression = 253
    RULE_model_expression_element = 254
    RULE_single_column_for_loop = 255
    RULE_for_like_part = 256
    RULE_for_increment_decrement_type = 257
    RULE_multi_column_for_loop = 258
    RULE_unary_expression = 259
    RULE_case_statement = 260
    RULE_simple_case_statement = 261
    RULE_simple_case_when_part = 262
    RULE_searched_case_statement = 263
    RULE_searched_case_when_part = 264
    RULE_case_else_part = 265
    RULE_atom = 266
    RULE_expression_or_vector = 267
    RULE_vector_expr = 268
    RULE_quantified_expression = 269
    RULE_string_function = 270
    RULE_standard_function = 271
    RULE_numeric_function_wrapper = 272
    RULE_numeric_function = 273
    RULE_other_function = 274
    RULE_over_clause_keyword = 275
    RULE_within_or_over_clause_keyword = 276
    RULE_standard_prediction_function_keyword = 277
    RULE_over_clause = 278
    RULE_windowing_clause = 279
    RULE_windowing_type = 280
    RULE_windowing_elements = 281
    RULE_using_clause = 282
    RULE_using_element = 283
    RULE_collect_order_by_part = 284
    RULE_within_or_over_part = 285
    RULE_cost_matrix_clause = 286
    RULE_xml_passing_clause = 287
    RULE_xml_attributes_clause = 288
    RULE_xml_namespaces_clause = 289
    RULE_xml_table_column = 290
    RULE_xml_general_default_part = 291
    RULE_xml_multiuse_expression_element = 292
    RULE_xmlroot_param_version_part = 293
    RULE_xmlroot_param_standalone_part = 294
    RULE_xmlserialize_param_enconding_part = 295
    RULE_xmlserialize_param_version_part = 296
    RULE_xmlserialize_param_ident_part = 297
    RULE_sql_plus_command = 298
    RULE_whenever_command = 299
    RULE_set_command = 300
    RULE_exit_command = 301
    RULE_prompt_command = 302
    RULE_show_errors_command = 303
    RULE_start_command = 304
    RULE_partition_extension_clause = 305
    RULE_column_alias = 306
    RULE_table_alias = 307
    RULE_alias_quoted_string = 308
    RULE_where_clause = 309
    RULE_current_of_clause = 310
    RULE_into_clause = 311
    RULE_xml_column_name = 312
    RULE_cost_class_name = 313
    RULE_attribute_name = 314
    RULE_savepoint_name = 315
    RULE_rollback_segment_name = 316
    RULE_table_var_name = 317
    RULE_schema_name = 318
    RULE_routine_name = 319
    RULE_package_name = 320
    RULE_implementation_type_name = 321
    RULE_parameter_name = 322
    RULE_reference_model_name = 323
    RULE_main_model_name = 324
    RULE_aggregate_function_name = 325
    RULE_query_name = 326
    RULE_constraint_name = 327
    RULE_label_name = 328
    RULE_type_name = 329
    RULE_sequence_name = 330
    RULE_exception_name = 331
    RULE_view_name = 332
    RULE_mview_name = 333
    RULE_dblink_name = 334
    RULE_function_name = 335
    RULE_procedure_name = 336
    RULE_trigger_name = 337
    RULE_variable_name = 338
    RULE_index_name = 339
    RULE_cursor_name = 340
    RULE_record_name = 341
    RULE_collection_name = 342
    RULE_link_name = 343
    RULE_column_name = 344
    RULE_tableview_name = 345
    RULE_char_set_name = 346
    RULE_synonym_name = 347
    RULE_schema_object_name = 348
    RULE_keep_clause = 349
    RULE_function_argument = 350
    RULE_function_argument_analytic = 351
    RULE_function_argument_modeling = 352
    RULE_respect_or_ignore_nulls = 353
    RULE_argument = 354
    RULE_type_spec = 355
    RULE_datatype = 356
    RULE_precision_part = 357
    RULE_native_datatype_element = 358
    RULE_bind_variable = 359
    RULE_general_element = 360
    RULE_general_element_part = 361
    RULE_table_element = 362
    RULE_constant = 363
    RULE_numeric = 364
    RULE_numeric_negative = 365
    RULE_quoted_string = 366
    RULE_identifier = 367
    RULE_id_expression = 368
    RULE_not_equal_op = 369
    RULE_greater_than_or_equals_op = 370
    RULE_less_than_or_equals_op = 371
    RULE_concatenation_op = 372
    RULE_outer_join_sign = 373
    RULE_regular_id = 374
    RULE_string_function_name = 375
    RULE_numeric_function_name = 376
    RULE_supported_packages = 377

    ruleNames =  [ "swallow_to_semi", "compilation_unit", "sql_script", 
                   "unit_statement", "create_cluster_table", "create_database_links", 
                   "create_function_body", "parallel_enable_clause", "partition_by_clause", 
                   "streaming_clause", "create_index", "create_package", 
                   "create_package_body", "package_obj_spec", "procedure_spec", 
                   "function_spec", "package_obj_body", "function_body", 
                   "procedure_body", "create_procedure_body", "create_trigger", 
                   "trigger_follows_clause", "trigger_when_clause", "simple_dml_trigger", 
                   "for_each_row", "compound_dml_trigger", "non_dml_trigger", 
                   "trigger_body", "routine_clause", "compound_trigger_block", 
                   "timing_point_section", "non_dml_event", "dml_event_clause", 
                   "dml_event_element", "dml_event_nested_clause", "referencing_clause", 
                   "referencing_element", "create_type", "type_definition", 
                   "object_type_def", "object_as_part", "object_under_part", 
                   "nested_table_type_def", "sqlj_object_type", "type_body", 
                   "type_body_elements", "map_order_func_declaration", "subprog_decl_in_type", 
                   "proc_decl_in_type", "func_decl_in_type", "constructor_declaration", 
                   "create_view", "create_materialized_view", "modifier_clause", 
                   "object_member_spec", "sqlj_object_type_attr", "element_spec", 
                   "element_spec_options", "subprogram_spec", "type_procedure_spec", 
                   "type_function_spec", "constructor_spec", "map_order_function_spec", 
                   "pragma_clause", "pragma_elements", "type_elements_parameter", 
                   "create_sequence", "sequence_spec", "sequence_start_clause", 
                   "create_table", "comment_on_column", "create_synonym", 
                   "comment_on_table", "anonymous_block", "invoker_rights_clause", 
                   "compiler_parameters_clause", "call_spec", "java_spec", 
                   "c_spec", "c_agent_in_clause", "c_parameters_clause", 
                   "parameter", "default_value_part", "declare_spec", "variable_declaration", 
                   "subtype_declaration", "cursor_declaration", "parameter_spec", 
                   "exception_declaration", "pragma_declaration", "record_type_def", 
                   "field_spec", "ref_cursor_type_def", "type_declaration", 
                   "table_type_def", "table_indexed_by_part", "varray_type_def", 
                   "seq_of_statements", "label_declaration", "statement", 
                   "assignment_statement", "continue_statement", "exit_statement", 
                   "goto_statement", "if_statement", "elsif_part", "else_part", 
                   "loop_statement", "cursor_loop_param", "forall_statement", 
                   "bounds_clause", "between_bound", "lower_bound", "upper_bound", 
                   "null_statement", "raise_statement", "return_statement", 
                   "function_call", "body", "exception_handler", "trigger_block", 
                   "block", "sql_statement", "execute_immediate", "dynamic_returning_clause", 
                   "sql_statements", "cursor_manipulation_statements", "close_statement", 
                   "open_statement", "fetch_statement", "open_for_statement", 
                   "transaction_control_statements", "set_transaction_command", 
                   "set_constraint_command", "commit_statement", "write_clause", 
                   "rollback_statement", "savepoint_statement", "explain_statement", 
                   "select_statement", "subquery_factoring_clause", "factoring_element", 
                   "search_clause", "cycle_clause", "subquery", "subquery_operation_part", 
                   "subquery_basic_elements", "query_block", "selected_element", 
                   "from_clause", "select_list_elements", "table_ref_list", 
                   "table_ref", "table_ref_aux", "table_ref_aux_internal", 
                   "join_clause", "join_on_part", "join_using_part", "outer_join_type", 
                   "query_partition_clause", "flashback_query_clause", "pivot_clause", 
                   "pivot_element", "pivot_for_clause", "pivot_in_clause", 
                   "pivot_in_clause_element", "pivot_in_clause_elements", 
                   "unpivot_clause", "unpivot_in_clause", "unpivot_in_elements", 
                   "hierarchical_query_clause", "start_part", "group_by_clause", 
                   "group_by_elements", "rollup_cube_clause", "grouping_sets_clause", 
                   "grouping_sets_elements", "having_clause", "model_clause", 
                   "cell_reference_options", "return_rows_clause", "reference_model", 
                   "main_model", "model_column_clauses", "model_column_partition_part", 
                   "model_column_list", "model_column", "model_rules_clause", 
                   "model_rules_part", "model_rules_element", "cell_assignment", 
                   "model_iterate_clause", "until_part", "order_by_clause", 
                   "order_by_elements", "for_update_clause", "for_update_of_part", 
                   "for_update_options", "update_statement", "update_set_clause", 
                   "column_based_update_set_clause", "delete_statement", 
                   "insert_statement", "single_table_insert", "multi_table_insert", 
                   "multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
                   "conditional_insert_else_part", "insert_into_clause", 
                   "values_clause", "merge_statement", "merge_update_clause", 
                   "merge_element", "merge_update_delete_part", "merge_insert_clause", 
                   "selected_tableview", "lock_table_statement", "wait_nowait_part", 
                   "lock_table_element", "lock_mode", "general_table_ref", 
                   "static_returning_clause", "error_logging_clause", "error_logging_into_part", 
                   "error_logging_reject_part", "dml_table_expression_clause", 
                   "table_collection_expression", "subquery_restriction_clause", 
                   "sample_clause", "seed_part", "cursor_expression", "expression_list", 
                   "condition", "expression", "logical_or_expression", "logical_and_expression", 
                   "negated_expression", "equality_expression", "multiset_expression", 
                   "multiset_type", "relational_expression", "compound_expression", 
                   "relational_operator", "like_type", "like_escape_part", 
                   "in_elements", "between_elements", "concatenation", "additive_expression", 
                   "multiply_expression", "datetime_expression", "interval_expression", 
                   "model_expression", "model_expression_element", "single_column_for_loop", 
                   "for_like_part", "for_increment_decrement_type", "multi_column_for_loop", 
                   "unary_expression", "case_statement", "simple_case_statement", 
                   "simple_case_when_part", "searched_case_statement", "searched_case_when_part", 
                   "case_else_part", "atom", "expression_or_vector", "vector_expr", 
                   "quantified_expression", "string_function", "standard_function", 
                   "numeric_function_wrapper", "numeric_function", "other_function", 
                   "over_clause_keyword", "within_or_over_clause_keyword", 
                   "standard_prediction_function_keyword", "over_clause", 
                   "windowing_clause", "windowing_type", "windowing_elements", 
                   "using_clause", "using_element", "collect_order_by_part", 
                   "within_or_over_part", "cost_matrix_clause", "xml_passing_clause", 
                   "xml_attributes_clause", "xml_namespaces_clause", "xml_table_column", 
                   "xml_general_default_part", "xml_multiuse_expression_element", 
                   "xmlroot_param_version_part", "xmlroot_param_standalone_part", 
                   "xmlserialize_param_enconding_part", "xmlserialize_param_version_part", 
                   "xmlserialize_param_ident_part", "sql_plus_command", 
                   "whenever_command", "set_command", "exit_command", "prompt_command", 
                   "show_errors_command", "start_command", "partition_extension_clause", 
                   "column_alias", "table_alias", "alias_quoted_string", 
                   "where_clause", "current_of_clause", "into_clause", "xml_column_name", 
                   "cost_class_name", "attribute_name", "savepoint_name", 
                   "rollback_segment_name", "table_var_name", "schema_name", 
                   "routine_name", "package_name", "implementation_type_name", 
                   "parameter_name", "reference_model_name", "main_model_name", 
                   "aggregate_function_name", "query_name", "constraint_name", 
                   "label_name", "type_name", "sequence_name", "exception_name", 
                   "view_name", "mview_name", "dblink_name", "function_name", 
                   "procedure_name", "trigger_name", "variable_name", "index_name", 
                   "cursor_name", "record_name", "collection_name", "link_name", 
                   "column_name", "tableview_name", "char_set_name", "synonym_name", 
                   "schema_object_name", "keep_clause", "function_argument", 
                   "function_argument_analytic", "function_argument_modeling", 
                   "respect_or_ignore_nulls", "argument", "type_spec", "datatype", 
                   "precision_part", "native_datatype_element", "bind_variable", 
                   "general_element", "general_element_part", "table_element", 
                   "constant", "numeric", "numeric_negative", "quoted_string", 
                   "identifier", "id_expression", "not_equal_op", "greater_than_or_equals_op", 
                   "less_than_or_equals_op", "concatenation_op", "outer_join_sign", 
                   "regular_id", "string_function_name", "numeric_function_name", 
                   "supported_packages" ]

    EOF = Token.EOF
    A_LETTER=1
    ADD=2
    AFTER=3
    AGENT=4
    AGGREGATE=5
    ALL=6
    ALTER=7
    ANALYZE=8
    AND=9
    ANY=10
    ARRAY=11
    AS=12
    ASC=13
    ASSOCIATE=14
    AT=15
    ATTRIBUTE=16
    AUDIT=17
    AUTHID=18
    AUTO=19
    AUTOMATIC=20
    AUTONOMOUS_TRANSACTION=21
    BATCH=22
    BEFORE=23
    BEGIN=24
    BETWEEN=25
    BFILE=26
    BINARY_DOUBLE=27
    BINARY_FLOAT=28
    BINARY_INTEGER=29
    BLOB=30
    BLOCK=31
    BODY=32
    BOOLEAN=33
    BOTH=34
    BREADTH=35
    BULK=36
    BY=37
    BYTE=38
    C_LETTER=39
    CACHE=40
    CALL=41
    CANONICAL=42
    CASCADE=43
    CASE=44
    CAST=45
    CHAR=46
    CHAR_CS=47
    CHARACTER=48
    CHECK=49
    CHR=50
    CLOB=51
    CLOSE=52
    CLUSTER=53
    COALESCE=54
    COLLECT=55
    COLUMN=56
    COLUMNS=57
    COMMENT=58
    COMMIT=59
    COMMITTED=60
    COMPATIBILITY=61
    COMPILE=62
    COMPOUND=63
    CONNECT=64
    CONNECT_BY_ROOT=65
    CONSTANT=66
    CONSTRAINT=67
    CONSTRAINTS=68
    CONSTRUCTOR=69
    CONTENT=70
    CONTEXT=71
    CONTINUE=72
    CONVERT=73
    CORRUPT_XID=74
    CORRUPT_XID_ALL=75
    COST=76
    COUNT=77
    CREATE=78
    CROSS=79
    CUBE=80
    CURRENT=81
    CURRENT_USER=82
    CURSOR=83
    CUSTOMDATUM=84
    CYCLE=85
    DATA=86
    DATABASE=87
    DATE=88
    DAY=89
    DB_ROLE_CHANGE=90
    DBTIMEZONE=91
    DDL=92
    DEBUG=93
    DEC=94
    DECIMAL=95
    DECLARE=96
    DECOMPOSE=97
    DECREMENT=98
    DEFAULT=99
    DEFAULTS=100
    DEFERRED=101
    DEFINER=102
    DELETE=103
    DEPTH=104
    DESC=105
    DETERMINISTIC=106
    DIMENSION=107
    DISABLE=108
    DISASSOCIATE=109
    DISTINCT=110
    DOCUMENT=111
    DOUBLE=112
    DROP=113
    DSINTERVAL_UNCONSTRAINED=114
    EACH=115
    ELEMENT=116
    ELSE=117
    ELSIF=118
    EMPTY=119
    ENABLE=120
    ENCODING=121
    END=122
    ENTITYESCAPING=123
    ERR=124
    ERRORS=125
    ESCAPE=126
    EVALNAME=127
    EXCEPTION=128
    EXCEPTION_INIT=129
    EXCEPTIONS=130
    EXCLUDE=131
    EXCLUSIVE=132
    EXECUTE=133
    EXISTS=134
    EXIT=135
    EXPLAIN=136
    EXTERNAL=137
    EXTRACT=138
    FAILURE=139
    FALSE=140
    FETCH=141
    FINAL=142
    FIRST=143
    FIRST_VALUE=144
    FLOAT=145
    FOLLOWING=146
    FOLLOWS=147
    FOR=148
    FORALL=149
    FORCE=150
    FROM=151
    FULL=152
    FUNCTION=153
    GOTO=154
    GRANT=155
    GROUP=156
    GROUPING=157
    HASH=158
    HAVING=159
    HIDE=160
    HOUR=161
    IF=162
    IGNORE=163
    IMMEDIATE=164
    IN=165
    INCLUDE=166
    INCLUDING=167
    INCREMENT=168
    INDENT=169
    INDEX=170
    INDEXED=171
    INDICATOR=172
    INDICES=173
    INFINITE=174
    INLINE=175
    INNER=176
    INOUT=177
    INSERT=178
    INSTANTIABLE=179
    INSTEAD=180
    INT=181
    INTEGER=182
    INTERSECT=183
    INTERVAL=184
    INTO=185
    INVALIDATE=186
    IS=187
    ISOLATION=188
    ITERATE=189
    JAVA=190
    JOIN=191
    KEEP=192
    LANGUAGE=193
    LAST=194
    LAST_VALUE=195
    LEADING=196
    LEFT=197
    LEVEL=198
    LIBRARY=199
    LIKE=200
    LIKE2=201
    LIKE4=202
    LIKEC=203
    LIMIT=204
    LOCAL=205
    LOCK=206
    LOCKED=207
    LOG=208
    LOGOFF=209
    LOGON=210
    LONG=211
    LOOP=212
    MAIN=213
    MAP=214
    MATCHED=215
    MAXVALUE=216
    MEASURES=217
    MEMBER=218
    MERGE=219
    MINUS=220
    MINUTE=221
    MINVALUE=222
    MLSLABEL=223
    MODE=224
    MODEL=225
    MODIFY=226
    MONTH=227
    MULTISET=228
    NAME=229
    NAN=230
    NATURAL=231
    NATURALN=232
    NAV=233
    NCHAR=234
    NCHAR_CS=235
    NCLOB=236
    NESTED=237
    NEW=238
    NO=239
    NOAUDIT=240
    NOCACHE=241
    NOCOPY=242
    NOCYCLE=243
    NOENTITYESCAPING=244
    NOMAXVALUE=245
    NOMINVALUE=246
    NONE=247
    NOORDER=248
    NOSCHEMACHECK=249
    NOT=250
    NOWAIT=251
    NULL=252
    NULLS=253
    NUMBER=254
    NUMERIC=255
    NVARCHAR2=256
    OBJECT=257
    OF=258
    OFF=259
    OID=260
    OLD=261
    ON=262
    ONLY=263
    OPEN=264
    OPTION=265
    OR=266
    ORADATA=267
    ORDER=268
    ORDINALITY=269
    OSERROR=270
    OUT=271
    OUTER=272
    OVER=273
    OVERRIDING=274
    PACKAGE=275
    PARALLEL_ENABLE=276
    PARAMETERS=277
    PARENT=278
    PARTITION=279
    PASSING=280
    PATH=281
    PERCENT_ISOPEN=282
    PERCENT_FOUND=283
    PERCENT_NOTFOUND=284
    PERCENT_ROWCOUNT=285
    PERCENT_ROWTYPE=286
    PERCENT_TYPE=287
    PIPELINED=288
    PIVOT=289
    PLAN=290
    PUBLIC=291
    PLS_INTEGER=292
    POSITIVE=293
    POSITIVEN=294
    PRAGMA=295
    PRECEDING=296
    PRECISION=297
    PRESENT=298
    PRIOR=299
    PROCEDURE=300
    RAISE=301
    RANGE=302
    RAW=303
    READ=304
    REAL=305
    RECORD=306
    REF=307
    REFERENCE=308
    REFERENCING=309
    REJECT=310
    RENAME=311
    REPLACE=312
    RESPECT=313
    RESTRICT_REFERENCES=314
    RESULT=315
    RETURN=316
    RETURNING=317
    REUSE=318
    REVERSE=319
    REVOKE=320
    RIGHT=321
    ROLLBACK=322
    ROLLUP=323
    ROW=324
    ROWID=325
    ROWS=326
    RULES=327
    SAMPLE=328
    SAVE=329
    SAVEPOINT=330
    SCHEMA=331
    SCHEMACHECK=332
    SCN=333
    SEARCH=334
    SECOND=335
    SEED=336
    SEGMENT=337
    SELECT=338
    SELF=339
    SEQUENCE=340
    SEQUENTIAL=341
    SERIALIZABLE=342
    SERIALLY_REUSABLE=343
    SERVERERROR=344
    SESSIONTIMEZONE=345
    SET=346
    SETS=347
    SETTINGS=348
    SHARE=349
    SHOW=350
    SHUTDOWN=351
    SIBLINGS=352
    SIGNTYPE=353
    SIMPLE_INTEGER=354
    SINGLE=355
    SIZE=356
    SKIP_=357
    SMALLINT=358
    SNAPSHOT=359
    SOME=360
    SPECIFICATION=361
    SQLDATA=362
    SQLERROR=363
    STANDALONE=364
    START=365
    STARTUP=366
    STATEMENT=367
    STATEMENT_ID=368
    STATIC=369
    STATISTICS=370
    STRING=371
    SUBMULTISET=372
    SUBPARTITION=373
    SUBSTITUTABLE=374
    SUBTYPE=375
    SUCCESS=376
    SUSPEND=377
    SYNONYM=378
    TABLE=379
    THE=380
    THEN=381
    TIME=382
    TIMESTAMP=383
    TIMESTAMP_LTZ_UNCONSTRAINED=384
    TIMESTAMP_TZ_UNCONSTRAINED=385
    TIMESTAMP_UNCONSTRAINED=386
    TIMEZONE_ABBR=387
    TIMEZONE_HOUR=388
    TIMEZONE_MINUTE=389
    TIMEZONE_REGION=390
    TO=391
    TRAILING=392
    TRANSACTION=393
    TRANSLATE=394
    TREAT=395
    TRIGGER=396
    TRUE=397
    TRUNCATE=398
    TYPE=399
    UNBOUNDED=400
    UNDER=401
    UNION=402
    UNIQUE=403
    UNLIMITED=404
    UNPIVOT=405
    UNTIL=406
    UPDATE=407
    UPDATED=408
    UPSERT=409
    UROWID=410
    USE=411
    USING=412
    VALIDATE=413
    VALUE=414
    VALUES=415
    VARCHAR=416
    VARCHAR2=417
    VARIABLE=418
    VARRAY=419
    VARYING=420
    VERSION=421
    VERSIONS=422
    WAIT=423
    WARNING=424
    WELLFORMED=425
    WHEN=426
    WHENEVER=427
    WHERE=428
    WHILE=429
    WITH=430
    WITHIN=431
    WORK=432
    WRITE=433
    XML=434
    XMLAGG=435
    XMLATTRIBUTES=436
    XMLCAST=437
    XMLCOLATTVAL=438
    XMLELEMENT=439
    XMLEXISTS=440
    XMLFOREST=441
    XMLNAMESPACES=442
    XMLPARSE=443
    XMLPI=444
    XMLQUERY=445
    XMLROOT=446
    XMLSERIALIZE=447
    XMLTABLE=448
    YEAR=449
    YES=450
    YMINTERVAL_UNCONSTRAINED=451
    ZONE=452
    PREDICTION=453
    PREDICTION_BOUNDS=454
    PREDICTION_COST=455
    PREDICTION_DETAILS=456
    PREDICTION_PROBABILITY=457
    PREDICTION_SET=458
    CUME_DIST=459
    DENSE_RANK=460
    LISTAGG=461
    PERCENT_RANK=462
    PERCENTILE_CONT=463
    PERCENTILE_DISC=464
    RANK=465
    AVG=466
    CORR=467
    COVAR_=468
    DECODE=469
    LAG=470
    LEAD=471
    MAX=472
    MEDIAN=473
    MIN=474
    NTILE=475
    NVL=476
    RATIO_TO_REPORT=477
    REGR_=478
    ROUND=479
    ROW_NUMBER=480
    SUBSTR=481
    TO_CHAR=482
    TRIM=483
    SUM=484
    STDDEV=485
    VAR_=486
    VARIANCE=487
    DBMS_ALERT=488
    DBMS_AQADM=489
    DBMS_AQ=490
    DBMS_CRYPTO=491
    DBMS_JOB=492
    DBMS_LOB=493
    DBMS_LOCK=494
    DBMS_MVIEW=495
    DBMS_OUTPUT=496
    DBMS_PIPE=497
    DBMS_PROFILER=498
    DBMS_RANDOM=499
    DBMS_RLS=500
    DBMS_SCHEDULER=501
    DBMS_SESSION=502
    DBMS_SQL=503
    DBMS_UTILITY=504
    EMP_ADMIN=505
    UTL_ENCODE=506
    UTL_FILE=507
    UTL_HTTP=508
    UTL_MAIL=509
    UTL_RAW=510
    UTL_SMTP=511
    UTL_TCP=512
    UTL_URL=513
    NATIONAL_CHAR_STRING_LIT=514
    BIT_STRING_LIT=515
    HEX_STRING_LIT=516
    DOUBLE_PERIOD=517
    PERIOD=518
    UNSIGNED_INTEGER=519
    APPROXIMATE_NUM_LIT=520
    CHAR_STRING=521
    DELIMITED_ID=522
    PERCENT=523
    AMPERSAND=524
    LEFT_PAREN=525
    RIGHT_PAREN=526
    DOUBLE_ASTERISK=527
    ASTERISK=528
    PLUS_SIGN=529
    MINUS_SIGN=530
    COMMA=531
    SOLIDUS=532
    AT_SIGN=533
    ASSIGN_OP=534
    BINDVAR=535
    COLON=536
    SEMICOLON=537
    LESS_THAN_OR_EQUALS_OP=538
    LESS_THAN_OP=539
    GREATER_THAN_OR_EQUALS_OP=540
    NOT_EQUAL_OP=541
    CARRET_OPERATOR_PART=542
    TILDE_OPERATOR_PART=543
    EXCLAMATION_OPERATOR_PART=544
    GREATER_THAN_OP=545
    CONCATENATION_OP=546
    VERTICAL_BAR=547
    EQUALS_OP=548
    LEFT_BRACKET=549
    RIGHT_BRACKET=550
    INTRODUCER=551
    SPACES=552
    SINGLE_LINE_COMMENT=553
    MULTI_LINE_COMMENT=554
    PROMPT=555
    START_CMD=556
    REGULAR_ID=557
    ZV=558

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Swallow_to_semiContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ora2epasParser.RULE_swallow_to_semi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwallow_to_semi" ):
                listener.enterSwallow_to_semi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwallow_to_semi" ):
                listener.exitSwallow_to_semi(self)




    def swallow_to_semi(self):

        localctx = ora2epasParser.Swallow_to_semiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_swallow_to_semi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 756
                _la = self._input.LA(1)
                if _la <= 0 or _la==ora2epasParser.SEMICOLON:
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 759 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ALL) | (1 << ora2epasParser.ALTER) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.AND) | (1 << ora2epasParser.ANY) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.AS) | (1 << ora2epasParser.ASC) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BEGIN) | (1 << ora2epasParser.BETWEEN) | (1 << ora2epasParser.BFILE) | (1 << ora2epasParser.BINARY_DOUBLE) | (1 << ora2epasParser.BINARY_FLOAT) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BREADTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BY) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CACHE) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CASE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHECK) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COALESCE) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMN) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ora2epasParser.CONNECT - 64)) | (1 << (ora2epasParser.CONNECT_BY_ROOT - 64)) | (1 << (ora2epasParser.CONSTANT - 64)) | (1 << (ora2epasParser.CONSTRAINT - 64)) | (1 << (ora2epasParser.CONSTRAINTS - 64)) | (1 << (ora2epasParser.CONSTRUCTOR - 64)) | (1 << (ora2epasParser.CONTENT - 64)) | (1 << (ora2epasParser.CONTEXT - 64)) | (1 << (ora2epasParser.CONTINUE - 64)) | (1 << (ora2epasParser.CONVERT - 64)) | (1 << (ora2epasParser.CORRUPT_XID - 64)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 64)) | (1 << (ora2epasParser.COST - 64)) | (1 << (ora2epasParser.COUNT - 64)) | (1 << (ora2epasParser.CREATE - 64)) | (1 << (ora2epasParser.CROSS - 64)) | (1 << (ora2epasParser.CUBE - 64)) | (1 << (ora2epasParser.CURRENT - 64)) | (1 << (ora2epasParser.CURRENT_USER - 64)) | (1 << (ora2epasParser.CURSOR - 64)) | (1 << (ora2epasParser.CUSTOMDATUM - 64)) | (1 << (ora2epasParser.CYCLE - 64)) | (1 << (ora2epasParser.DATA - 64)) | (1 << (ora2epasParser.DATABASE - 64)) | (1 << (ora2epasParser.DATE - 64)) | (1 << (ora2epasParser.DAY - 64)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 64)) | (1 << (ora2epasParser.DBTIMEZONE - 64)) | (1 << (ora2epasParser.DDL - 64)) | (1 << (ora2epasParser.DEBUG - 64)) | (1 << (ora2epasParser.DEC - 64)) | (1 << (ora2epasParser.DECIMAL - 64)) | (1 << (ora2epasParser.DECLARE - 64)) | (1 << (ora2epasParser.DECOMPOSE - 64)) | (1 << (ora2epasParser.DECREMENT - 64)) | (1 << (ora2epasParser.DEFAULT - 64)) | (1 << (ora2epasParser.DEFAULTS - 64)) | (1 << (ora2epasParser.DEFERRED - 64)) | (1 << (ora2epasParser.DEFINER - 64)) | (1 << (ora2epasParser.DELETE - 64)) | (1 << (ora2epasParser.DEPTH - 64)) | (1 << (ora2epasParser.DESC - 64)) | (1 << (ora2epasParser.DETERMINISTIC - 64)) | (1 << (ora2epasParser.DIMENSION - 64)) | (1 << (ora2epasParser.DISABLE - 64)) | (1 << (ora2epasParser.DISASSOCIATE - 64)) | (1 << (ora2epasParser.DISTINCT - 64)) | (1 << (ora2epasParser.DOCUMENT - 64)) | (1 << (ora2epasParser.DOUBLE - 64)) | (1 << (ora2epasParser.DROP - 64)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (ora2epasParser.EACH - 64)) | (1 << (ora2epasParser.ELEMENT - 64)) | (1 << (ora2epasParser.ELSE - 64)) | (1 << (ora2epasParser.ELSIF - 64)) | (1 << (ora2epasParser.EMPTY - 64)) | (1 << (ora2epasParser.ENABLE - 64)) | (1 << (ora2epasParser.ENCODING - 64)) | (1 << (ora2epasParser.END - 64)) | (1 << (ora2epasParser.ENTITYESCAPING - 64)) | (1 << (ora2epasParser.ERR - 64)) | (1 << (ora2epasParser.ERRORS - 64)) | (1 << (ora2epasParser.ESCAPE - 64)) | (1 << (ora2epasParser.EVALNAME - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ora2epasParser.EXCEPTION - 128)) | (1 << (ora2epasParser.EXCEPTION_INIT - 128)) | (1 << (ora2epasParser.EXCEPTIONS - 128)) | (1 << (ora2epasParser.EXCLUDE - 128)) | (1 << (ora2epasParser.EXCLUSIVE - 128)) | (1 << (ora2epasParser.EXECUTE - 128)) | (1 << (ora2epasParser.EXISTS - 128)) | (1 << (ora2epasParser.EXIT - 128)) | (1 << (ora2epasParser.EXPLAIN - 128)) | (1 << (ora2epasParser.EXTERNAL - 128)) | (1 << (ora2epasParser.EXTRACT - 128)) | (1 << (ora2epasParser.FAILURE - 128)) | (1 << (ora2epasParser.FALSE - 128)) | (1 << (ora2epasParser.FETCH - 128)) | (1 << (ora2epasParser.FINAL - 128)) | (1 << (ora2epasParser.FIRST - 128)) | (1 << (ora2epasParser.FIRST_VALUE - 128)) | (1 << (ora2epasParser.FLOAT - 128)) | (1 << (ora2epasParser.FOLLOWING - 128)) | (1 << (ora2epasParser.FOLLOWS - 128)) | (1 << (ora2epasParser.FOR - 128)) | (1 << (ora2epasParser.FORALL - 128)) | (1 << (ora2epasParser.FORCE - 128)) | (1 << (ora2epasParser.FROM - 128)) | (1 << (ora2epasParser.FULL - 128)) | (1 << (ora2epasParser.FUNCTION - 128)) | (1 << (ora2epasParser.GOTO - 128)) | (1 << (ora2epasParser.GRANT - 128)) | (1 << (ora2epasParser.GROUP - 128)) | (1 << (ora2epasParser.GROUPING - 128)) | (1 << (ora2epasParser.HASH - 128)) | (1 << (ora2epasParser.HAVING - 128)) | (1 << (ora2epasParser.HIDE - 128)) | (1 << (ora2epasParser.HOUR - 128)) | (1 << (ora2epasParser.IF - 128)) | (1 << (ora2epasParser.IGNORE - 128)) | (1 << (ora2epasParser.IMMEDIATE - 128)) | (1 << (ora2epasParser.IN - 128)) | (1 << (ora2epasParser.INCLUDE - 128)) | (1 << (ora2epasParser.INCLUDING - 128)) | (1 << (ora2epasParser.INCREMENT - 128)) | (1 << (ora2epasParser.INDENT - 128)) | (1 << (ora2epasParser.INDEX - 128)) | (1 << (ora2epasParser.INDEXED - 128)) | (1 << (ora2epasParser.INDICATOR - 128)) | (1 << (ora2epasParser.INDICES - 128)) | (1 << (ora2epasParser.INFINITE - 128)) | (1 << (ora2epasParser.INLINE - 128)) | (1 << (ora2epasParser.INNER - 128)) | (1 << (ora2epasParser.INOUT - 128)) | (1 << (ora2epasParser.INSERT - 128)) | (1 << (ora2epasParser.INSTANTIABLE - 128)) | (1 << (ora2epasParser.INSTEAD - 128)) | (1 << (ora2epasParser.INT - 128)) | (1 << (ora2epasParser.INTEGER - 128)) | (1 << (ora2epasParser.INTERSECT - 128)) | (1 << (ora2epasParser.INTERVAL - 128)) | (1 << (ora2epasParser.INTO - 128)) | (1 << (ora2epasParser.INVALIDATE - 128)) | (1 << (ora2epasParser.IS - 128)) | (1 << (ora2epasParser.ISOLATION - 128)) | (1 << (ora2epasParser.ITERATE - 128)) | (1 << (ora2epasParser.JAVA - 128)) | (1 << (ora2epasParser.JOIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (ora2epasParser.KEEP - 192)) | (1 << (ora2epasParser.LANGUAGE - 192)) | (1 << (ora2epasParser.LAST - 192)) | (1 << (ora2epasParser.LAST_VALUE - 192)) | (1 << (ora2epasParser.LEADING - 192)) | (1 << (ora2epasParser.LEFT - 192)) | (1 << (ora2epasParser.LEVEL - 192)) | (1 << (ora2epasParser.LIBRARY - 192)) | (1 << (ora2epasParser.LIKE - 192)) | (1 << (ora2epasParser.LIKE2 - 192)) | (1 << (ora2epasParser.LIKE4 - 192)) | (1 << (ora2epasParser.LIKEC - 192)) | (1 << (ora2epasParser.LIMIT - 192)) | (1 << (ora2epasParser.LOCAL - 192)) | (1 << (ora2epasParser.LOCK - 192)) | (1 << (ora2epasParser.LOCKED - 192)) | (1 << (ora2epasParser.LOG - 192)) | (1 << (ora2epasParser.LOGOFF - 192)) | (1 << (ora2epasParser.LOGON - 192)) | (1 << (ora2epasParser.LONG - 192)) | (1 << (ora2epasParser.LOOP - 192)) | (1 << (ora2epasParser.MAIN - 192)) | (1 << (ora2epasParser.MAP - 192)) | (1 << (ora2epasParser.MATCHED - 192)) | (1 << (ora2epasParser.MAXVALUE - 192)) | (1 << (ora2epasParser.MEASURES - 192)) | (1 << (ora2epasParser.MEMBER - 192)) | (1 << (ora2epasParser.MERGE - 192)) | (1 << (ora2epasParser.MINUS - 192)) | (1 << (ora2epasParser.MINUTE - 192)) | (1 << (ora2epasParser.MINVALUE - 192)) | (1 << (ora2epasParser.MLSLABEL - 192)) | (1 << (ora2epasParser.MODE - 192)) | (1 << (ora2epasParser.MODEL - 192)) | (1 << (ora2epasParser.MODIFY - 192)) | (1 << (ora2epasParser.MONTH - 192)) | (1 << (ora2epasParser.MULTISET - 192)) | (1 << (ora2epasParser.NAME - 192)) | (1 << (ora2epasParser.NAN - 192)) | (1 << (ora2epasParser.NATURAL - 192)) | (1 << (ora2epasParser.NATURALN - 192)) | (1 << (ora2epasParser.NAV - 192)) | (1 << (ora2epasParser.NCHAR - 192)) | (1 << (ora2epasParser.NCHAR_CS - 192)) | (1 << (ora2epasParser.NCLOB - 192)) | (1 << (ora2epasParser.NESTED - 192)) | (1 << (ora2epasParser.NEW - 192)) | (1 << (ora2epasParser.NO - 192)) | (1 << (ora2epasParser.NOAUDIT - 192)) | (1 << (ora2epasParser.NOCACHE - 192)) | (1 << (ora2epasParser.NOCOPY - 192)) | (1 << (ora2epasParser.NOCYCLE - 192)) | (1 << (ora2epasParser.NOENTITYESCAPING - 192)) | (1 << (ora2epasParser.NOMAXVALUE - 192)) | (1 << (ora2epasParser.NOMINVALUE - 192)) | (1 << (ora2epasParser.NONE - 192)) | (1 << (ora2epasParser.NOORDER - 192)) | (1 << (ora2epasParser.NOSCHEMACHECK - 192)) | (1 << (ora2epasParser.NOT - 192)) | (1 << (ora2epasParser.NOWAIT - 192)) | (1 << (ora2epasParser.NULL - 192)) | (1 << (ora2epasParser.NULLS - 192)) | (1 << (ora2epasParser.NUMBER - 192)) | (1 << (ora2epasParser.NUMERIC - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (ora2epasParser.NVARCHAR2 - 256)) | (1 << (ora2epasParser.OBJECT - 256)) | (1 << (ora2epasParser.OF - 256)) | (1 << (ora2epasParser.OFF - 256)) | (1 << (ora2epasParser.OID - 256)) | (1 << (ora2epasParser.OLD - 256)) | (1 << (ora2epasParser.ON - 256)) | (1 << (ora2epasParser.ONLY - 256)) | (1 << (ora2epasParser.OPEN - 256)) | (1 << (ora2epasParser.OPTION - 256)) | (1 << (ora2epasParser.OR - 256)) | (1 << (ora2epasParser.ORADATA - 256)) | (1 << (ora2epasParser.ORDER - 256)) | (1 << (ora2epasParser.ORDINALITY - 256)) | (1 << (ora2epasParser.OSERROR - 256)) | (1 << (ora2epasParser.OUT - 256)) | (1 << (ora2epasParser.OUTER - 256)) | (1 << (ora2epasParser.OVER - 256)) | (1 << (ora2epasParser.OVERRIDING - 256)) | (1 << (ora2epasParser.PACKAGE - 256)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 256)) | (1 << (ora2epasParser.PARAMETERS - 256)) | (1 << (ora2epasParser.PARENT - 256)) | (1 << (ora2epasParser.PARTITION - 256)) | (1 << (ora2epasParser.PASSING - 256)) | (1 << (ora2epasParser.PATH - 256)) | (1 << (ora2epasParser.PERCENT_ISOPEN - 256)) | (1 << (ora2epasParser.PERCENT_FOUND - 256)) | (1 << (ora2epasParser.PERCENT_NOTFOUND - 256)) | (1 << (ora2epasParser.PERCENT_ROWCOUNT - 256)) | (1 << (ora2epasParser.PERCENT_ROWTYPE - 256)) | (1 << (ora2epasParser.PERCENT_TYPE - 256)) | (1 << (ora2epasParser.PIPELINED - 256)) | (1 << (ora2epasParser.PIVOT - 256)) | (1 << (ora2epasParser.PLAN - 256)) | (1 << (ora2epasParser.PUBLIC - 256)) | (1 << (ora2epasParser.PLS_INTEGER - 256)) | (1 << (ora2epasParser.POSITIVE - 256)) | (1 << (ora2epasParser.POSITIVEN - 256)) | (1 << (ora2epasParser.PRAGMA - 256)) | (1 << (ora2epasParser.PRECEDING - 256)) | (1 << (ora2epasParser.PRECISION - 256)) | (1 << (ora2epasParser.PRESENT - 256)) | (1 << (ora2epasParser.PRIOR - 256)) | (1 << (ora2epasParser.PROCEDURE - 256)) | (1 << (ora2epasParser.RAISE - 256)) | (1 << (ora2epasParser.RANGE - 256)) | (1 << (ora2epasParser.RAW - 256)) | (1 << (ora2epasParser.READ - 256)) | (1 << (ora2epasParser.REAL - 256)) | (1 << (ora2epasParser.RECORD - 256)) | (1 << (ora2epasParser.REF - 256)) | (1 << (ora2epasParser.REFERENCE - 256)) | (1 << (ora2epasParser.REFERENCING - 256)) | (1 << (ora2epasParser.REJECT - 256)) | (1 << (ora2epasParser.RENAME - 256)) | (1 << (ora2epasParser.REPLACE - 256)) | (1 << (ora2epasParser.RESPECT - 256)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 256)) | (1 << (ora2epasParser.RESULT - 256)) | (1 << (ora2epasParser.RETURN - 256)) | (1 << (ora2epasParser.RETURNING - 256)) | (1 << (ora2epasParser.REUSE - 256)) | (1 << (ora2epasParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (ora2epasParser.REVOKE - 320)) | (1 << (ora2epasParser.RIGHT - 320)) | (1 << (ora2epasParser.ROLLBACK - 320)) | (1 << (ora2epasParser.ROLLUP - 320)) | (1 << (ora2epasParser.ROW - 320)) | (1 << (ora2epasParser.ROWID - 320)) | (1 << (ora2epasParser.ROWS - 320)) | (1 << (ora2epasParser.RULES - 320)) | (1 << (ora2epasParser.SAMPLE - 320)) | (1 << (ora2epasParser.SAVE - 320)) | (1 << (ora2epasParser.SAVEPOINT - 320)) | (1 << (ora2epasParser.SCHEMA - 320)) | (1 << (ora2epasParser.SCHEMACHECK - 320)) | (1 << (ora2epasParser.SCN - 320)) | (1 << (ora2epasParser.SEARCH - 320)) | (1 << (ora2epasParser.SECOND - 320)) | (1 << (ora2epasParser.SEED - 320)) | (1 << (ora2epasParser.SEGMENT - 320)) | (1 << (ora2epasParser.SELECT - 320)) | (1 << (ora2epasParser.SELF - 320)) | (1 << (ora2epasParser.SEQUENCE - 320)) | (1 << (ora2epasParser.SEQUENTIAL - 320)) | (1 << (ora2epasParser.SERIALIZABLE - 320)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 320)) | (1 << (ora2epasParser.SERVERERROR - 320)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 320)) | (1 << (ora2epasParser.SET - 320)) | (1 << (ora2epasParser.SETS - 320)) | (1 << (ora2epasParser.SETTINGS - 320)) | (1 << (ora2epasParser.SHARE - 320)) | (1 << (ora2epasParser.SHOW - 320)) | (1 << (ora2epasParser.SHUTDOWN - 320)) | (1 << (ora2epasParser.SIBLINGS - 320)) | (1 << (ora2epasParser.SIGNTYPE - 320)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 320)) | (1 << (ora2epasParser.SINGLE - 320)) | (1 << (ora2epasParser.SIZE - 320)) | (1 << (ora2epasParser.SKIP_ - 320)) | (1 << (ora2epasParser.SMALLINT - 320)) | (1 << (ora2epasParser.SNAPSHOT - 320)) | (1 << (ora2epasParser.SOME - 320)) | (1 << (ora2epasParser.SPECIFICATION - 320)) | (1 << (ora2epasParser.SQLDATA - 320)) | (1 << (ora2epasParser.SQLERROR - 320)) | (1 << (ora2epasParser.STANDALONE - 320)) | (1 << (ora2epasParser.START - 320)) | (1 << (ora2epasParser.STARTUP - 320)) | (1 << (ora2epasParser.STATEMENT - 320)) | (1 << (ora2epasParser.STATEMENT_ID - 320)) | (1 << (ora2epasParser.STATIC - 320)) | (1 << (ora2epasParser.STATISTICS - 320)) | (1 << (ora2epasParser.STRING - 320)) | (1 << (ora2epasParser.SUBMULTISET - 320)) | (1 << (ora2epasParser.SUBPARTITION - 320)) | (1 << (ora2epasParser.SUBSTITUTABLE - 320)) | (1 << (ora2epasParser.SUBTYPE - 320)) | (1 << (ora2epasParser.SUCCESS - 320)) | (1 << (ora2epasParser.SUSPEND - 320)) | (1 << (ora2epasParser.SYNONYM - 320)) | (1 << (ora2epasParser.TABLE - 320)) | (1 << (ora2epasParser.THE - 320)) | (1 << (ora2epasParser.THEN - 320)) | (1 << (ora2epasParser.TIME - 320)) | (1 << (ora2epasParser.TIMESTAMP - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (ora2epasParser.TIMEZONE_ABBR - 384)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 384)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 384)) | (1 << (ora2epasParser.TIMEZONE_REGION - 384)) | (1 << (ora2epasParser.TO - 384)) | (1 << (ora2epasParser.TRAILING - 384)) | (1 << (ora2epasParser.TRANSACTION - 384)) | (1 << (ora2epasParser.TRANSLATE - 384)) | (1 << (ora2epasParser.TREAT - 384)) | (1 << (ora2epasParser.TRIGGER - 384)) | (1 << (ora2epasParser.TRUE - 384)) | (1 << (ora2epasParser.TRUNCATE - 384)) | (1 << (ora2epasParser.TYPE - 384)) | (1 << (ora2epasParser.UNBOUNDED - 384)) | (1 << (ora2epasParser.UNDER - 384)) | (1 << (ora2epasParser.UNION - 384)) | (1 << (ora2epasParser.UNIQUE - 384)) | (1 << (ora2epasParser.UNLIMITED - 384)) | (1 << (ora2epasParser.UNPIVOT - 384)) | (1 << (ora2epasParser.UNTIL - 384)) | (1 << (ora2epasParser.UPDATE - 384)) | (1 << (ora2epasParser.UPDATED - 384)) | (1 << (ora2epasParser.UPSERT - 384)) | (1 << (ora2epasParser.UROWID - 384)) | (1 << (ora2epasParser.USE - 384)) | (1 << (ora2epasParser.USING - 384)) | (1 << (ora2epasParser.VALIDATE - 384)) | (1 << (ora2epasParser.VALUE - 384)) | (1 << (ora2epasParser.VALUES - 384)) | (1 << (ora2epasParser.VARCHAR - 384)) | (1 << (ora2epasParser.VARCHAR2 - 384)) | (1 << (ora2epasParser.VARIABLE - 384)) | (1 << (ora2epasParser.VARRAY - 384)) | (1 << (ora2epasParser.VARYING - 384)) | (1 << (ora2epasParser.VERSION - 384)) | (1 << (ora2epasParser.VERSIONS - 384)) | (1 << (ora2epasParser.WAIT - 384)) | (1 << (ora2epasParser.WARNING - 384)) | (1 << (ora2epasParser.WELLFORMED - 384)) | (1 << (ora2epasParser.WHEN - 384)) | (1 << (ora2epasParser.WHENEVER - 384)) | (1 << (ora2epasParser.WHERE - 384)) | (1 << (ora2epasParser.WHILE - 384)) | (1 << (ora2epasParser.WITH - 384)) | (1 << (ora2epasParser.WITHIN - 384)) | (1 << (ora2epasParser.WORK - 384)) | (1 << (ora2epasParser.WRITE - 384)) | (1 << (ora2epasParser.XML - 384)) | (1 << (ora2epasParser.XMLAGG - 384)) | (1 << (ora2epasParser.XMLATTRIBUTES - 384)) | (1 << (ora2epasParser.XMLCAST - 384)) | (1 << (ora2epasParser.XMLCOLATTVAL - 384)) | (1 << (ora2epasParser.XMLELEMENT - 384)) | (1 << (ora2epasParser.XMLEXISTS - 384)) | (1 << (ora2epasParser.XMLFOREST - 384)) | (1 << (ora2epasParser.XMLNAMESPACES - 384)) | (1 << (ora2epasParser.XMLPARSE - 384)) | (1 << (ora2epasParser.XMLPI - 384)) | (1 << (ora2epasParser.XMLQUERY - 384)) | (1 << (ora2epasParser.XMLROOT - 384)) | (1 << (ora2epasParser.XMLSERIALIZE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (ora2epasParser.XMLTABLE - 448)) | (1 << (ora2epasParser.YEAR - 448)) | (1 << (ora2epasParser.YES - 448)) | (1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (ora2epasParser.ZONE - 448)) | (1 << (ora2epasParser.PREDICTION - 448)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 448)) | (1 << (ora2epasParser.PREDICTION_COST - 448)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 448)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 448)) | (1 << (ora2epasParser.PREDICTION_SET - 448)) | (1 << (ora2epasParser.CUME_DIST - 448)) | (1 << (ora2epasParser.DENSE_RANK - 448)) | (1 << (ora2epasParser.LISTAGG - 448)) | (1 << (ora2epasParser.PERCENT_RANK - 448)) | (1 << (ora2epasParser.PERCENTILE_CONT - 448)) | (1 << (ora2epasParser.PERCENTILE_DISC - 448)) | (1 << (ora2epasParser.RANK - 448)) | (1 << (ora2epasParser.AVG - 448)) | (1 << (ora2epasParser.CORR - 448)) | (1 << (ora2epasParser.COVAR_ - 448)) | (1 << (ora2epasParser.DECODE - 448)) | (1 << (ora2epasParser.LAG - 448)) | (1 << (ora2epasParser.LEAD - 448)) | (1 << (ora2epasParser.MAX - 448)) | (1 << (ora2epasParser.MEDIAN - 448)) | (1 << (ora2epasParser.MIN - 448)) | (1 << (ora2epasParser.NTILE - 448)) | (1 << (ora2epasParser.NVL - 448)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 448)) | (1 << (ora2epasParser.REGR_ - 448)) | (1 << (ora2epasParser.ROUND - 448)) | (1 << (ora2epasParser.ROW_NUMBER - 448)) | (1 << (ora2epasParser.SUBSTR - 448)) | (1 << (ora2epasParser.TO_CHAR - 448)) | (1 << (ora2epasParser.TRIM - 448)) | (1 << (ora2epasParser.SUM - 448)) | (1 << (ora2epasParser.STDDEV - 448)) | (1 << (ora2epasParser.VAR_ - 448)) | (1 << (ora2epasParser.VARIANCE - 448)) | (1 << (ora2epasParser.DBMS_ALERT - 448)) | (1 << (ora2epasParser.DBMS_AQADM - 448)) | (1 << (ora2epasParser.DBMS_AQ - 448)) | (1 << (ora2epasParser.DBMS_CRYPTO - 448)) | (1 << (ora2epasParser.DBMS_JOB - 448)) | (1 << (ora2epasParser.DBMS_LOB - 448)) | (1 << (ora2epasParser.DBMS_LOCK - 448)) | (1 << (ora2epasParser.DBMS_MVIEW - 448)) | (1 << (ora2epasParser.DBMS_OUTPUT - 448)) | (1 << (ora2epasParser.DBMS_PIPE - 448)) | (1 << (ora2epasParser.DBMS_PROFILER - 448)) | (1 << (ora2epasParser.DBMS_RANDOM - 448)) | (1 << (ora2epasParser.DBMS_RLS - 448)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 448)) | (1 << (ora2epasParser.DBMS_SESSION - 448)) | (1 << (ora2epasParser.DBMS_SQL - 448)) | (1 << (ora2epasParser.DBMS_UTILITY - 448)) | (1 << (ora2epasParser.EMP_ADMIN - 448)) | (1 << (ora2epasParser.UTL_ENCODE - 448)) | (1 << (ora2epasParser.UTL_FILE - 448)) | (1 << (ora2epasParser.UTL_HTTP - 448)) | (1 << (ora2epasParser.UTL_MAIL - 448)) | (1 << (ora2epasParser.UTL_RAW - 448)) | (1 << (ora2epasParser.UTL_SMTP - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (ora2epasParser.UTL_TCP - 512)) | (1 << (ora2epasParser.UTL_URL - 512)) | (1 << (ora2epasParser.NATIONAL_CHAR_STRING_LIT - 512)) | (1 << (ora2epasParser.BIT_STRING_LIT - 512)) | (1 << (ora2epasParser.HEX_STRING_LIT - 512)) | (1 << (ora2epasParser.DOUBLE_PERIOD - 512)) | (1 << (ora2epasParser.PERIOD - 512)) | (1 << (ora2epasParser.UNSIGNED_INTEGER - 512)) | (1 << (ora2epasParser.APPROXIMATE_NUM_LIT - 512)) | (1 << (ora2epasParser.CHAR_STRING - 512)) | (1 << (ora2epasParser.DELIMITED_ID - 512)) | (1 << (ora2epasParser.PERCENT - 512)) | (1 << (ora2epasParser.AMPERSAND - 512)) | (1 << (ora2epasParser.LEFT_PAREN - 512)) | (1 << (ora2epasParser.RIGHT_PAREN - 512)) | (1 << (ora2epasParser.DOUBLE_ASTERISK - 512)) | (1 << (ora2epasParser.ASTERISK - 512)) | (1 << (ora2epasParser.PLUS_SIGN - 512)) | (1 << (ora2epasParser.MINUS_SIGN - 512)) | (1 << (ora2epasParser.COMMA - 512)) | (1 << (ora2epasParser.SOLIDUS - 512)) | (1 << (ora2epasParser.AT_SIGN - 512)) | (1 << (ora2epasParser.ASSIGN_OP - 512)) | (1 << (ora2epasParser.BINDVAR - 512)) | (1 << (ora2epasParser.COLON - 512)) | (1 << (ora2epasParser.LESS_THAN_OR_EQUALS_OP - 512)) | (1 << (ora2epasParser.LESS_THAN_OP - 512)) | (1 << (ora2epasParser.GREATER_THAN_OR_EQUALS_OP - 512)) | (1 << (ora2epasParser.NOT_EQUAL_OP - 512)) | (1 << (ora2epasParser.CARRET_OPERATOR_PART - 512)) | (1 << (ora2epasParser.TILDE_OPERATOR_PART - 512)) | (1 << (ora2epasParser.EXCLAMATION_OPERATOR_PART - 512)) | (1 << (ora2epasParser.GREATER_THAN_OP - 512)) | (1 << (ora2epasParser.CONCATENATION_OP - 512)) | (1 << (ora2epasParser.VERTICAL_BAR - 512)) | (1 << (ora2epasParser.EQUALS_OP - 512)) | (1 << (ora2epasParser.LEFT_BRACKET - 512)) | (1 << (ora2epasParser.RIGHT_BRACKET - 512)) | (1 << (ora2epasParser.INTRODUCER - 512)) | (1 << (ora2epasParser.SPACES - 512)) | (1 << (ora2epasParser.SINGLE_LINE_COMMENT - 512)) | (1 << (ora2epasParser.MULTI_LINE_COMMENT - 512)) | (1 << (ora2epasParser.PROMPT - 512)) | (1 << (ora2epasParser.START_CMD - 512)) | (1 << (ora2epasParser.REGULAR_ID - 512)) | (1 << (ora2epasParser.ZV - 512)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compilation_unitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(ora2epasParser.EOF, 0)

        def unit_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Unit_statementContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Unit_statementContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_compilation_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilation_unit" ):
                listener.enterCompilation_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilation_unit" ):
                listener.exitCompilation_unit(self)




    def compilation_unit(self):

        localctx = ora2epasParser.Compilation_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_compilation_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ALL) | (1 << ora2epasParser.ALTER) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.AND) | (1 << ora2epasParser.ANY) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.AS) | (1 << ora2epasParser.ASC) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BEGIN) | (1 << ora2epasParser.BETWEEN) | (1 << ora2epasParser.BFILE) | (1 << ora2epasParser.BINARY_DOUBLE) | (1 << ora2epasParser.BINARY_FLOAT) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BREADTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BY) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CACHE) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CASE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHECK) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COALESCE) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMN) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ora2epasParser.CONNECT - 64)) | (1 << (ora2epasParser.CONNECT_BY_ROOT - 64)) | (1 << (ora2epasParser.CONSTANT - 64)) | (1 << (ora2epasParser.CONSTRAINT - 64)) | (1 << (ora2epasParser.CONSTRAINTS - 64)) | (1 << (ora2epasParser.CONSTRUCTOR - 64)) | (1 << (ora2epasParser.CONTENT - 64)) | (1 << (ora2epasParser.CONTEXT - 64)) | (1 << (ora2epasParser.CONTINUE - 64)) | (1 << (ora2epasParser.CONVERT - 64)) | (1 << (ora2epasParser.CORRUPT_XID - 64)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 64)) | (1 << (ora2epasParser.COST - 64)) | (1 << (ora2epasParser.COUNT - 64)) | (1 << (ora2epasParser.CREATE - 64)) | (1 << (ora2epasParser.CROSS - 64)) | (1 << (ora2epasParser.CUBE - 64)) | (1 << (ora2epasParser.CURRENT - 64)) | (1 << (ora2epasParser.CURRENT_USER - 64)) | (1 << (ora2epasParser.CURSOR - 64)) | (1 << (ora2epasParser.CUSTOMDATUM - 64)) | (1 << (ora2epasParser.CYCLE - 64)) | (1 << (ora2epasParser.DATA - 64)) | (1 << (ora2epasParser.DATABASE - 64)) | (1 << (ora2epasParser.DATE - 64)) | (1 << (ora2epasParser.DAY - 64)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 64)) | (1 << (ora2epasParser.DBTIMEZONE - 64)) | (1 << (ora2epasParser.DDL - 64)) | (1 << (ora2epasParser.DEBUG - 64)) | (1 << (ora2epasParser.DEC - 64)) | (1 << (ora2epasParser.DECIMAL - 64)) | (1 << (ora2epasParser.DECLARE - 64)) | (1 << (ora2epasParser.DECOMPOSE - 64)) | (1 << (ora2epasParser.DECREMENT - 64)) | (1 << (ora2epasParser.DEFAULT - 64)) | (1 << (ora2epasParser.DEFAULTS - 64)) | (1 << (ora2epasParser.DEFERRED - 64)) | (1 << (ora2epasParser.DEFINER - 64)) | (1 << (ora2epasParser.DELETE - 64)) | (1 << (ora2epasParser.DEPTH - 64)) | (1 << (ora2epasParser.DESC - 64)) | (1 << (ora2epasParser.DETERMINISTIC - 64)) | (1 << (ora2epasParser.DIMENSION - 64)) | (1 << (ora2epasParser.DISABLE - 64)) | (1 << (ora2epasParser.DISASSOCIATE - 64)) | (1 << (ora2epasParser.DISTINCT - 64)) | (1 << (ora2epasParser.DOCUMENT - 64)) | (1 << (ora2epasParser.DOUBLE - 64)) | (1 << (ora2epasParser.DROP - 64)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (ora2epasParser.EACH - 64)) | (1 << (ora2epasParser.ELEMENT - 64)) | (1 << (ora2epasParser.ELSE - 64)) | (1 << (ora2epasParser.ELSIF - 64)) | (1 << (ora2epasParser.EMPTY - 64)) | (1 << (ora2epasParser.ENABLE - 64)) | (1 << (ora2epasParser.ENCODING - 64)) | (1 << (ora2epasParser.END - 64)) | (1 << (ora2epasParser.ENTITYESCAPING - 64)) | (1 << (ora2epasParser.ERR - 64)) | (1 << (ora2epasParser.ERRORS - 64)) | (1 << (ora2epasParser.ESCAPE - 64)) | (1 << (ora2epasParser.EVALNAME - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ora2epasParser.EXCEPTION - 128)) | (1 << (ora2epasParser.EXCEPTION_INIT - 128)) | (1 << (ora2epasParser.EXCEPTIONS - 128)) | (1 << (ora2epasParser.EXCLUDE - 128)) | (1 << (ora2epasParser.EXCLUSIVE - 128)) | (1 << (ora2epasParser.EXECUTE - 128)) | (1 << (ora2epasParser.EXISTS - 128)) | (1 << (ora2epasParser.EXIT - 128)) | (1 << (ora2epasParser.EXPLAIN - 128)) | (1 << (ora2epasParser.EXTERNAL - 128)) | (1 << (ora2epasParser.EXTRACT - 128)) | (1 << (ora2epasParser.FAILURE - 128)) | (1 << (ora2epasParser.FALSE - 128)) | (1 << (ora2epasParser.FETCH - 128)) | (1 << (ora2epasParser.FINAL - 128)) | (1 << (ora2epasParser.FIRST - 128)) | (1 << (ora2epasParser.FIRST_VALUE - 128)) | (1 << (ora2epasParser.FLOAT - 128)) | (1 << (ora2epasParser.FOLLOWING - 128)) | (1 << (ora2epasParser.FOLLOWS - 128)) | (1 << (ora2epasParser.FOR - 128)) | (1 << (ora2epasParser.FORALL - 128)) | (1 << (ora2epasParser.FORCE - 128)) | (1 << (ora2epasParser.FROM - 128)) | (1 << (ora2epasParser.FULL - 128)) | (1 << (ora2epasParser.FUNCTION - 128)) | (1 << (ora2epasParser.GOTO - 128)) | (1 << (ora2epasParser.GRANT - 128)) | (1 << (ora2epasParser.GROUP - 128)) | (1 << (ora2epasParser.GROUPING - 128)) | (1 << (ora2epasParser.HASH - 128)) | (1 << (ora2epasParser.HAVING - 128)) | (1 << (ora2epasParser.HIDE - 128)) | (1 << (ora2epasParser.HOUR - 128)) | (1 << (ora2epasParser.IF - 128)) | (1 << (ora2epasParser.IGNORE - 128)) | (1 << (ora2epasParser.IMMEDIATE - 128)) | (1 << (ora2epasParser.IN - 128)) | (1 << (ora2epasParser.INCLUDE - 128)) | (1 << (ora2epasParser.INCLUDING - 128)) | (1 << (ora2epasParser.INCREMENT - 128)) | (1 << (ora2epasParser.INDENT - 128)) | (1 << (ora2epasParser.INDEX - 128)) | (1 << (ora2epasParser.INDEXED - 128)) | (1 << (ora2epasParser.INDICATOR - 128)) | (1 << (ora2epasParser.INDICES - 128)) | (1 << (ora2epasParser.INFINITE - 128)) | (1 << (ora2epasParser.INLINE - 128)) | (1 << (ora2epasParser.INNER - 128)) | (1 << (ora2epasParser.INOUT - 128)) | (1 << (ora2epasParser.INSERT - 128)) | (1 << (ora2epasParser.INSTANTIABLE - 128)) | (1 << (ora2epasParser.INSTEAD - 128)) | (1 << (ora2epasParser.INT - 128)) | (1 << (ora2epasParser.INTEGER - 128)) | (1 << (ora2epasParser.INTERSECT - 128)) | (1 << (ora2epasParser.INTERVAL - 128)) | (1 << (ora2epasParser.INTO - 128)) | (1 << (ora2epasParser.INVALIDATE - 128)) | (1 << (ora2epasParser.IS - 128)) | (1 << (ora2epasParser.ISOLATION - 128)) | (1 << (ora2epasParser.ITERATE - 128)) | (1 << (ora2epasParser.JAVA - 128)) | (1 << (ora2epasParser.JOIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (ora2epasParser.KEEP - 192)) | (1 << (ora2epasParser.LANGUAGE - 192)) | (1 << (ora2epasParser.LAST - 192)) | (1 << (ora2epasParser.LAST_VALUE - 192)) | (1 << (ora2epasParser.LEADING - 192)) | (1 << (ora2epasParser.LEFT - 192)) | (1 << (ora2epasParser.LEVEL - 192)) | (1 << (ora2epasParser.LIBRARY - 192)) | (1 << (ora2epasParser.LIKE - 192)) | (1 << (ora2epasParser.LIKE2 - 192)) | (1 << (ora2epasParser.LIKE4 - 192)) | (1 << (ora2epasParser.LIKEC - 192)) | (1 << (ora2epasParser.LIMIT - 192)) | (1 << (ora2epasParser.LOCAL - 192)) | (1 << (ora2epasParser.LOCK - 192)) | (1 << (ora2epasParser.LOCKED - 192)) | (1 << (ora2epasParser.LOG - 192)) | (1 << (ora2epasParser.LOGOFF - 192)) | (1 << (ora2epasParser.LOGON - 192)) | (1 << (ora2epasParser.LONG - 192)) | (1 << (ora2epasParser.LOOP - 192)) | (1 << (ora2epasParser.MAIN - 192)) | (1 << (ora2epasParser.MAP - 192)) | (1 << (ora2epasParser.MATCHED - 192)) | (1 << (ora2epasParser.MAXVALUE - 192)) | (1 << (ora2epasParser.MEASURES - 192)) | (1 << (ora2epasParser.MEMBER - 192)) | (1 << (ora2epasParser.MERGE - 192)) | (1 << (ora2epasParser.MINUS - 192)) | (1 << (ora2epasParser.MINUTE - 192)) | (1 << (ora2epasParser.MINVALUE - 192)) | (1 << (ora2epasParser.MLSLABEL - 192)) | (1 << (ora2epasParser.MODE - 192)) | (1 << (ora2epasParser.MODEL - 192)) | (1 << (ora2epasParser.MODIFY - 192)) | (1 << (ora2epasParser.MONTH - 192)) | (1 << (ora2epasParser.MULTISET - 192)) | (1 << (ora2epasParser.NAME - 192)) | (1 << (ora2epasParser.NAN - 192)) | (1 << (ora2epasParser.NATURAL - 192)) | (1 << (ora2epasParser.NATURALN - 192)) | (1 << (ora2epasParser.NAV - 192)) | (1 << (ora2epasParser.NCHAR - 192)) | (1 << (ora2epasParser.NCHAR_CS - 192)) | (1 << (ora2epasParser.NCLOB - 192)) | (1 << (ora2epasParser.NESTED - 192)) | (1 << (ora2epasParser.NEW - 192)) | (1 << (ora2epasParser.NO - 192)) | (1 << (ora2epasParser.NOAUDIT - 192)) | (1 << (ora2epasParser.NOCACHE - 192)) | (1 << (ora2epasParser.NOCOPY - 192)) | (1 << (ora2epasParser.NOCYCLE - 192)) | (1 << (ora2epasParser.NOENTITYESCAPING - 192)) | (1 << (ora2epasParser.NOMAXVALUE - 192)) | (1 << (ora2epasParser.NOMINVALUE - 192)) | (1 << (ora2epasParser.NONE - 192)) | (1 << (ora2epasParser.NOORDER - 192)) | (1 << (ora2epasParser.NOSCHEMACHECK - 192)) | (1 << (ora2epasParser.NOT - 192)) | (1 << (ora2epasParser.NOWAIT - 192)) | (1 << (ora2epasParser.NULL - 192)) | (1 << (ora2epasParser.NULLS - 192)) | (1 << (ora2epasParser.NUMBER - 192)) | (1 << (ora2epasParser.NUMERIC - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (ora2epasParser.NVARCHAR2 - 256)) | (1 << (ora2epasParser.OBJECT - 256)) | (1 << (ora2epasParser.OF - 256)) | (1 << (ora2epasParser.OFF - 256)) | (1 << (ora2epasParser.OID - 256)) | (1 << (ora2epasParser.OLD - 256)) | (1 << (ora2epasParser.ON - 256)) | (1 << (ora2epasParser.ONLY - 256)) | (1 << (ora2epasParser.OPEN - 256)) | (1 << (ora2epasParser.OPTION - 256)) | (1 << (ora2epasParser.OR - 256)) | (1 << (ora2epasParser.ORADATA - 256)) | (1 << (ora2epasParser.ORDER - 256)) | (1 << (ora2epasParser.ORDINALITY - 256)) | (1 << (ora2epasParser.OSERROR - 256)) | (1 << (ora2epasParser.OUT - 256)) | (1 << (ora2epasParser.OUTER - 256)) | (1 << (ora2epasParser.OVER - 256)) | (1 << (ora2epasParser.OVERRIDING - 256)) | (1 << (ora2epasParser.PACKAGE - 256)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 256)) | (1 << (ora2epasParser.PARAMETERS - 256)) | (1 << (ora2epasParser.PARENT - 256)) | (1 << (ora2epasParser.PARTITION - 256)) | (1 << (ora2epasParser.PASSING - 256)) | (1 << (ora2epasParser.PATH - 256)) | (1 << (ora2epasParser.PERCENT_ISOPEN - 256)) | (1 << (ora2epasParser.PERCENT_FOUND - 256)) | (1 << (ora2epasParser.PERCENT_NOTFOUND - 256)) | (1 << (ora2epasParser.PERCENT_ROWCOUNT - 256)) | (1 << (ora2epasParser.PERCENT_ROWTYPE - 256)) | (1 << (ora2epasParser.PERCENT_TYPE - 256)) | (1 << (ora2epasParser.PIPELINED - 256)) | (1 << (ora2epasParser.PIVOT - 256)) | (1 << (ora2epasParser.PLAN - 256)) | (1 << (ora2epasParser.PUBLIC - 256)) | (1 << (ora2epasParser.PLS_INTEGER - 256)) | (1 << (ora2epasParser.POSITIVE - 256)) | (1 << (ora2epasParser.POSITIVEN - 256)) | (1 << (ora2epasParser.PRAGMA - 256)) | (1 << (ora2epasParser.PRECEDING - 256)) | (1 << (ora2epasParser.PRECISION - 256)) | (1 << (ora2epasParser.PRESENT - 256)) | (1 << (ora2epasParser.PRIOR - 256)) | (1 << (ora2epasParser.PROCEDURE - 256)) | (1 << (ora2epasParser.RAISE - 256)) | (1 << (ora2epasParser.RANGE - 256)) | (1 << (ora2epasParser.RAW - 256)) | (1 << (ora2epasParser.READ - 256)) | (1 << (ora2epasParser.REAL - 256)) | (1 << (ora2epasParser.RECORD - 256)) | (1 << (ora2epasParser.REF - 256)) | (1 << (ora2epasParser.REFERENCE - 256)) | (1 << (ora2epasParser.REFERENCING - 256)) | (1 << (ora2epasParser.REJECT - 256)) | (1 << (ora2epasParser.RENAME - 256)) | (1 << (ora2epasParser.REPLACE - 256)) | (1 << (ora2epasParser.RESPECT - 256)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 256)) | (1 << (ora2epasParser.RESULT - 256)) | (1 << (ora2epasParser.RETURN - 256)) | (1 << (ora2epasParser.RETURNING - 256)) | (1 << (ora2epasParser.REUSE - 256)) | (1 << (ora2epasParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (ora2epasParser.REVOKE - 320)) | (1 << (ora2epasParser.RIGHT - 320)) | (1 << (ora2epasParser.ROLLBACK - 320)) | (1 << (ora2epasParser.ROLLUP - 320)) | (1 << (ora2epasParser.ROW - 320)) | (1 << (ora2epasParser.ROWID - 320)) | (1 << (ora2epasParser.ROWS - 320)) | (1 << (ora2epasParser.RULES - 320)) | (1 << (ora2epasParser.SAMPLE - 320)) | (1 << (ora2epasParser.SAVE - 320)) | (1 << (ora2epasParser.SAVEPOINT - 320)) | (1 << (ora2epasParser.SCHEMA - 320)) | (1 << (ora2epasParser.SCHEMACHECK - 320)) | (1 << (ora2epasParser.SCN - 320)) | (1 << (ora2epasParser.SEARCH - 320)) | (1 << (ora2epasParser.SECOND - 320)) | (1 << (ora2epasParser.SEED - 320)) | (1 << (ora2epasParser.SEGMENT - 320)) | (1 << (ora2epasParser.SELECT - 320)) | (1 << (ora2epasParser.SELF - 320)) | (1 << (ora2epasParser.SEQUENCE - 320)) | (1 << (ora2epasParser.SEQUENTIAL - 320)) | (1 << (ora2epasParser.SERIALIZABLE - 320)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 320)) | (1 << (ora2epasParser.SERVERERROR - 320)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 320)) | (1 << (ora2epasParser.SET - 320)) | (1 << (ora2epasParser.SETS - 320)) | (1 << (ora2epasParser.SETTINGS - 320)) | (1 << (ora2epasParser.SHARE - 320)) | (1 << (ora2epasParser.SHOW - 320)) | (1 << (ora2epasParser.SHUTDOWN - 320)) | (1 << (ora2epasParser.SIBLINGS - 320)) | (1 << (ora2epasParser.SIGNTYPE - 320)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 320)) | (1 << (ora2epasParser.SINGLE - 320)) | (1 << (ora2epasParser.SIZE - 320)) | (1 << (ora2epasParser.SKIP_ - 320)) | (1 << (ora2epasParser.SMALLINT - 320)) | (1 << (ora2epasParser.SNAPSHOT - 320)) | (1 << (ora2epasParser.SOME - 320)) | (1 << (ora2epasParser.SPECIFICATION - 320)) | (1 << (ora2epasParser.SQLDATA - 320)) | (1 << (ora2epasParser.SQLERROR - 320)) | (1 << (ora2epasParser.STANDALONE - 320)) | (1 << (ora2epasParser.START - 320)) | (1 << (ora2epasParser.STARTUP - 320)) | (1 << (ora2epasParser.STATEMENT - 320)) | (1 << (ora2epasParser.STATEMENT_ID - 320)) | (1 << (ora2epasParser.STATIC - 320)) | (1 << (ora2epasParser.STATISTICS - 320)) | (1 << (ora2epasParser.STRING - 320)) | (1 << (ora2epasParser.SUBMULTISET - 320)) | (1 << (ora2epasParser.SUBPARTITION - 320)) | (1 << (ora2epasParser.SUBSTITUTABLE - 320)) | (1 << (ora2epasParser.SUBTYPE - 320)) | (1 << (ora2epasParser.SUCCESS - 320)) | (1 << (ora2epasParser.SUSPEND - 320)) | (1 << (ora2epasParser.SYNONYM - 320)) | (1 << (ora2epasParser.TABLE - 320)) | (1 << (ora2epasParser.THE - 320)) | (1 << (ora2epasParser.THEN - 320)) | (1 << (ora2epasParser.TIME - 320)) | (1 << (ora2epasParser.TIMESTAMP - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (ora2epasParser.TIMEZONE_ABBR - 384)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 384)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 384)) | (1 << (ora2epasParser.TIMEZONE_REGION - 384)) | (1 << (ora2epasParser.TO - 384)) | (1 << (ora2epasParser.TRAILING - 384)) | (1 << (ora2epasParser.TRANSACTION - 384)) | (1 << (ora2epasParser.TRANSLATE - 384)) | (1 << (ora2epasParser.TREAT - 384)) | (1 << (ora2epasParser.TRIGGER - 384)) | (1 << (ora2epasParser.TRUE - 384)) | (1 << (ora2epasParser.TRUNCATE - 384)) | (1 << (ora2epasParser.TYPE - 384)) | (1 << (ora2epasParser.UNBOUNDED - 384)) | (1 << (ora2epasParser.UNDER - 384)) | (1 << (ora2epasParser.UNION - 384)) | (1 << (ora2epasParser.UNIQUE - 384)) | (1 << (ora2epasParser.UNLIMITED - 384)) | (1 << (ora2epasParser.UNPIVOT - 384)) | (1 << (ora2epasParser.UNTIL - 384)) | (1 << (ora2epasParser.UPDATE - 384)) | (1 << (ora2epasParser.UPDATED - 384)) | (1 << (ora2epasParser.UPSERT - 384)) | (1 << (ora2epasParser.UROWID - 384)) | (1 << (ora2epasParser.USE - 384)) | (1 << (ora2epasParser.USING - 384)) | (1 << (ora2epasParser.VALIDATE - 384)) | (1 << (ora2epasParser.VALUE - 384)) | (1 << (ora2epasParser.VALUES - 384)) | (1 << (ora2epasParser.VARCHAR - 384)) | (1 << (ora2epasParser.VARCHAR2 - 384)) | (1 << (ora2epasParser.VARIABLE - 384)) | (1 << (ora2epasParser.VARRAY - 384)) | (1 << (ora2epasParser.VARYING - 384)) | (1 << (ora2epasParser.VERSION - 384)) | (1 << (ora2epasParser.VERSIONS - 384)) | (1 << (ora2epasParser.WAIT - 384)) | (1 << (ora2epasParser.WARNING - 384)) | (1 << (ora2epasParser.WELLFORMED - 384)) | (1 << (ora2epasParser.WHEN - 384)) | (1 << (ora2epasParser.WHENEVER - 384)) | (1 << (ora2epasParser.WHERE - 384)) | (1 << (ora2epasParser.WHILE - 384)) | (1 << (ora2epasParser.WITH - 384)) | (1 << (ora2epasParser.WITHIN - 384)) | (1 << (ora2epasParser.WORK - 384)) | (1 << (ora2epasParser.WRITE - 384)) | (1 << (ora2epasParser.XML - 384)) | (1 << (ora2epasParser.XMLAGG - 384)) | (1 << (ora2epasParser.XMLATTRIBUTES - 384)) | (1 << (ora2epasParser.XMLCAST - 384)) | (1 << (ora2epasParser.XMLCOLATTVAL - 384)) | (1 << (ora2epasParser.XMLELEMENT - 384)) | (1 << (ora2epasParser.XMLEXISTS - 384)) | (1 << (ora2epasParser.XMLFOREST - 384)) | (1 << (ora2epasParser.XMLNAMESPACES - 384)) | (1 << (ora2epasParser.XMLPARSE - 384)) | (1 << (ora2epasParser.XMLPI - 384)) | (1 << (ora2epasParser.XMLQUERY - 384)) | (1 << (ora2epasParser.XMLROOT - 384)) | (1 << (ora2epasParser.XMLSERIALIZE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (ora2epasParser.XMLTABLE - 448)) | (1 << (ora2epasParser.YEAR - 448)) | (1 << (ora2epasParser.YES - 448)) | (1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (ora2epasParser.ZONE - 448)) | (1 << (ora2epasParser.PREDICTION - 448)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 448)) | (1 << (ora2epasParser.PREDICTION_COST - 448)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 448)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 448)) | (1 << (ora2epasParser.PREDICTION_SET - 448)) | (1 << (ora2epasParser.CUME_DIST - 448)) | (1 << (ora2epasParser.DENSE_RANK - 448)) | (1 << (ora2epasParser.LISTAGG - 448)) | (1 << (ora2epasParser.PERCENT_RANK - 448)) | (1 << (ora2epasParser.PERCENTILE_CONT - 448)) | (1 << (ora2epasParser.PERCENTILE_DISC - 448)) | (1 << (ora2epasParser.RANK - 448)) | (1 << (ora2epasParser.AVG - 448)) | (1 << (ora2epasParser.CORR - 448)) | (1 << (ora2epasParser.COVAR_ - 448)) | (1 << (ora2epasParser.DECODE - 448)) | (1 << (ora2epasParser.LAG - 448)) | (1 << (ora2epasParser.LEAD - 448)) | (1 << (ora2epasParser.MAX - 448)) | (1 << (ora2epasParser.MEDIAN - 448)) | (1 << (ora2epasParser.MIN - 448)) | (1 << (ora2epasParser.NTILE - 448)) | (1 << (ora2epasParser.NVL - 448)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 448)) | (1 << (ora2epasParser.REGR_ - 448)) | (1 << (ora2epasParser.ROUND - 448)) | (1 << (ora2epasParser.ROW_NUMBER - 448)) | (1 << (ora2epasParser.SUBSTR - 448)) | (1 << (ora2epasParser.TO_CHAR - 448)) | (1 << (ora2epasParser.TRIM - 448)) | (1 << (ora2epasParser.SUM - 448)) | (1 << (ora2epasParser.STDDEV - 448)) | (1 << (ora2epasParser.VAR_ - 448)) | (1 << (ora2epasParser.VARIANCE - 448)) | (1 << (ora2epasParser.DBMS_ALERT - 448)) | (1 << (ora2epasParser.DBMS_AQADM - 448)) | (1 << (ora2epasParser.DBMS_AQ - 448)) | (1 << (ora2epasParser.DBMS_CRYPTO - 448)) | (1 << (ora2epasParser.DBMS_JOB - 448)) | (1 << (ora2epasParser.DBMS_LOB - 448)) | (1 << (ora2epasParser.DBMS_LOCK - 448)) | (1 << (ora2epasParser.DBMS_MVIEW - 448)) | (1 << (ora2epasParser.DBMS_OUTPUT - 448)) | (1 << (ora2epasParser.DBMS_PIPE - 448)) | (1 << (ora2epasParser.DBMS_PROFILER - 448)) | (1 << (ora2epasParser.DBMS_RANDOM - 448)) | (1 << (ora2epasParser.DBMS_RLS - 448)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 448)) | (1 << (ora2epasParser.DBMS_SESSION - 448)) | (1 << (ora2epasParser.DBMS_SQL - 448)) | (1 << (ora2epasParser.DBMS_UTILITY - 448)) | (1 << (ora2epasParser.EMP_ADMIN - 448)) | (1 << (ora2epasParser.UTL_ENCODE - 448)) | (1 << (ora2epasParser.UTL_FILE - 448)) | (1 << (ora2epasParser.UTL_HTTP - 448)) | (1 << (ora2epasParser.UTL_MAIL - 448)) | (1 << (ora2epasParser.UTL_RAW - 448)) | (1 << (ora2epasParser.UTL_SMTP - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (ora2epasParser.UTL_TCP - 512)) | (1 << (ora2epasParser.UTL_URL - 512)) | (1 << (ora2epasParser.NATIONAL_CHAR_STRING_LIT - 512)) | (1 << (ora2epasParser.BIT_STRING_LIT - 512)) | (1 << (ora2epasParser.HEX_STRING_LIT - 512)) | (1 << (ora2epasParser.DOUBLE_PERIOD - 512)) | (1 << (ora2epasParser.PERIOD - 512)) | (1 << (ora2epasParser.UNSIGNED_INTEGER - 512)) | (1 << (ora2epasParser.APPROXIMATE_NUM_LIT - 512)) | (1 << (ora2epasParser.CHAR_STRING - 512)) | (1 << (ora2epasParser.DELIMITED_ID - 512)) | (1 << (ora2epasParser.PERCENT - 512)) | (1 << (ora2epasParser.AMPERSAND - 512)) | (1 << (ora2epasParser.LEFT_PAREN - 512)) | (1 << (ora2epasParser.RIGHT_PAREN - 512)) | (1 << (ora2epasParser.DOUBLE_ASTERISK - 512)) | (1 << (ora2epasParser.ASTERISK - 512)) | (1 << (ora2epasParser.PLUS_SIGN - 512)) | (1 << (ora2epasParser.MINUS_SIGN - 512)) | (1 << (ora2epasParser.COMMA - 512)) | (1 << (ora2epasParser.SOLIDUS - 512)) | (1 << (ora2epasParser.AT_SIGN - 512)) | (1 << (ora2epasParser.ASSIGN_OP - 512)) | (1 << (ora2epasParser.BINDVAR - 512)) | (1 << (ora2epasParser.COLON - 512)) | (1 << (ora2epasParser.SEMICOLON - 512)) | (1 << (ora2epasParser.LESS_THAN_OR_EQUALS_OP - 512)) | (1 << (ora2epasParser.LESS_THAN_OP - 512)) | (1 << (ora2epasParser.GREATER_THAN_OR_EQUALS_OP - 512)) | (1 << (ora2epasParser.NOT_EQUAL_OP - 512)) | (1 << (ora2epasParser.CARRET_OPERATOR_PART - 512)) | (1 << (ora2epasParser.TILDE_OPERATOR_PART - 512)) | (1 << (ora2epasParser.EXCLAMATION_OPERATOR_PART - 512)) | (1 << (ora2epasParser.GREATER_THAN_OP - 512)) | (1 << (ora2epasParser.CONCATENATION_OP - 512)) | (1 << (ora2epasParser.VERTICAL_BAR - 512)) | (1 << (ora2epasParser.EQUALS_OP - 512)) | (1 << (ora2epasParser.LEFT_BRACKET - 512)) | (1 << (ora2epasParser.RIGHT_BRACKET - 512)) | (1 << (ora2epasParser.INTRODUCER - 512)) | (1 << (ora2epasParser.SPACES - 512)) | (1 << (ora2epasParser.SINGLE_LINE_COMMENT - 512)) | (1 << (ora2epasParser.MULTI_LINE_COMMENT - 512)) | (1 << (ora2epasParser.PROMPT - 512)) | (1 << (ora2epasParser.START_CMD - 512)) | (1 << (ora2epasParser.REGULAR_ID - 512)) | (1 << (ora2epasParser.ZV - 512)))) != 0):
                self.state = 761
                self.unit_statement()
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 767
            self.match(ora2epasParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_scriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(ora2epasParser.EOF, 0)

        def unit_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Unit_statementContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Unit_statementContext,i)


        def sql_plus_command(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Sql_plus_commandContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Sql_plus_commandContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.SEMICOLON)
            else:
                return self.getToken(ora2epasParser.SEMICOLON, i)

        def getRuleIndex(self):
            return ora2epasParser.RULE_sql_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_script" ):
                listener.enterSql_script(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_script" ):
                listener.exitSql_script(self)




    def sql_script(self):

        localctx = ora2epasParser.Sql_scriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ALL) | (1 << ora2epasParser.ALTER) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.AND) | (1 << ora2epasParser.ANY) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.AS) | (1 << ora2epasParser.ASC) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BEGIN) | (1 << ora2epasParser.BETWEEN) | (1 << ora2epasParser.BFILE) | (1 << ora2epasParser.BINARY_DOUBLE) | (1 << ora2epasParser.BINARY_FLOAT) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BREADTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BY) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CACHE) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CASE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHECK) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COALESCE) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMN) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ora2epasParser.CONNECT - 64)) | (1 << (ora2epasParser.CONNECT_BY_ROOT - 64)) | (1 << (ora2epasParser.CONSTANT - 64)) | (1 << (ora2epasParser.CONSTRAINT - 64)) | (1 << (ora2epasParser.CONSTRAINTS - 64)) | (1 << (ora2epasParser.CONSTRUCTOR - 64)) | (1 << (ora2epasParser.CONTENT - 64)) | (1 << (ora2epasParser.CONTEXT - 64)) | (1 << (ora2epasParser.CONTINUE - 64)) | (1 << (ora2epasParser.CONVERT - 64)) | (1 << (ora2epasParser.CORRUPT_XID - 64)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 64)) | (1 << (ora2epasParser.COST - 64)) | (1 << (ora2epasParser.COUNT - 64)) | (1 << (ora2epasParser.CREATE - 64)) | (1 << (ora2epasParser.CROSS - 64)) | (1 << (ora2epasParser.CUBE - 64)) | (1 << (ora2epasParser.CURRENT - 64)) | (1 << (ora2epasParser.CURRENT_USER - 64)) | (1 << (ora2epasParser.CURSOR - 64)) | (1 << (ora2epasParser.CUSTOMDATUM - 64)) | (1 << (ora2epasParser.CYCLE - 64)) | (1 << (ora2epasParser.DATA - 64)) | (1 << (ora2epasParser.DATABASE - 64)) | (1 << (ora2epasParser.DATE - 64)) | (1 << (ora2epasParser.DAY - 64)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 64)) | (1 << (ora2epasParser.DBTIMEZONE - 64)) | (1 << (ora2epasParser.DDL - 64)) | (1 << (ora2epasParser.DEBUG - 64)) | (1 << (ora2epasParser.DEC - 64)) | (1 << (ora2epasParser.DECIMAL - 64)) | (1 << (ora2epasParser.DECLARE - 64)) | (1 << (ora2epasParser.DECOMPOSE - 64)) | (1 << (ora2epasParser.DECREMENT - 64)) | (1 << (ora2epasParser.DEFAULT - 64)) | (1 << (ora2epasParser.DEFAULTS - 64)) | (1 << (ora2epasParser.DEFERRED - 64)) | (1 << (ora2epasParser.DEFINER - 64)) | (1 << (ora2epasParser.DELETE - 64)) | (1 << (ora2epasParser.DEPTH - 64)) | (1 << (ora2epasParser.DESC - 64)) | (1 << (ora2epasParser.DETERMINISTIC - 64)) | (1 << (ora2epasParser.DIMENSION - 64)) | (1 << (ora2epasParser.DISABLE - 64)) | (1 << (ora2epasParser.DISASSOCIATE - 64)) | (1 << (ora2epasParser.DISTINCT - 64)) | (1 << (ora2epasParser.DOCUMENT - 64)) | (1 << (ora2epasParser.DOUBLE - 64)) | (1 << (ora2epasParser.DROP - 64)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 64)) | (1 << (ora2epasParser.EACH - 64)) | (1 << (ora2epasParser.ELEMENT - 64)) | (1 << (ora2epasParser.ELSE - 64)) | (1 << (ora2epasParser.ELSIF - 64)) | (1 << (ora2epasParser.EMPTY - 64)) | (1 << (ora2epasParser.ENABLE - 64)) | (1 << (ora2epasParser.ENCODING - 64)) | (1 << (ora2epasParser.END - 64)) | (1 << (ora2epasParser.ENTITYESCAPING - 64)) | (1 << (ora2epasParser.ERR - 64)) | (1 << (ora2epasParser.ERRORS - 64)) | (1 << (ora2epasParser.ESCAPE - 64)) | (1 << (ora2epasParser.EVALNAME - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (ora2epasParser.EXCEPTION - 128)) | (1 << (ora2epasParser.EXCEPTION_INIT - 128)) | (1 << (ora2epasParser.EXCEPTIONS - 128)) | (1 << (ora2epasParser.EXCLUDE - 128)) | (1 << (ora2epasParser.EXCLUSIVE - 128)) | (1 << (ora2epasParser.EXECUTE - 128)) | (1 << (ora2epasParser.EXISTS - 128)) | (1 << (ora2epasParser.EXIT - 128)) | (1 << (ora2epasParser.EXPLAIN - 128)) | (1 << (ora2epasParser.EXTERNAL - 128)) | (1 << (ora2epasParser.EXTRACT - 128)) | (1 << (ora2epasParser.FAILURE - 128)) | (1 << (ora2epasParser.FALSE - 128)) | (1 << (ora2epasParser.FETCH - 128)) | (1 << (ora2epasParser.FINAL - 128)) | (1 << (ora2epasParser.FIRST - 128)) | (1 << (ora2epasParser.FIRST_VALUE - 128)) | (1 << (ora2epasParser.FLOAT - 128)) | (1 << (ora2epasParser.FOLLOWING - 128)) | (1 << (ora2epasParser.FOLLOWS - 128)) | (1 << (ora2epasParser.FOR - 128)) | (1 << (ora2epasParser.FORALL - 128)) | (1 << (ora2epasParser.FORCE - 128)) | (1 << (ora2epasParser.FROM - 128)) | (1 << (ora2epasParser.FULL - 128)) | (1 << (ora2epasParser.FUNCTION - 128)) | (1 << (ora2epasParser.GOTO - 128)) | (1 << (ora2epasParser.GRANT - 128)) | (1 << (ora2epasParser.GROUP - 128)) | (1 << (ora2epasParser.GROUPING - 128)) | (1 << (ora2epasParser.HASH - 128)) | (1 << (ora2epasParser.HAVING - 128)) | (1 << (ora2epasParser.HIDE - 128)) | (1 << (ora2epasParser.HOUR - 128)) | (1 << (ora2epasParser.IF - 128)) | (1 << (ora2epasParser.IGNORE - 128)) | (1 << (ora2epasParser.IMMEDIATE - 128)) | (1 << (ora2epasParser.IN - 128)) | (1 << (ora2epasParser.INCLUDE - 128)) | (1 << (ora2epasParser.INCLUDING - 128)) | (1 << (ora2epasParser.INCREMENT - 128)) | (1 << (ora2epasParser.INDENT - 128)) | (1 << (ora2epasParser.INDEX - 128)) | (1 << (ora2epasParser.INDEXED - 128)) | (1 << (ora2epasParser.INDICATOR - 128)) | (1 << (ora2epasParser.INDICES - 128)) | (1 << (ora2epasParser.INFINITE - 128)) | (1 << (ora2epasParser.INLINE - 128)) | (1 << (ora2epasParser.INNER - 128)) | (1 << (ora2epasParser.INOUT - 128)) | (1 << (ora2epasParser.INSERT - 128)) | (1 << (ora2epasParser.INSTANTIABLE - 128)) | (1 << (ora2epasParser.INSTEAD - 128)) | (1 << (ora2epasParser.INT - 128)) | (1 << (ora2epasParser.INTEGER - 128)) | (1 << (ora2epasParser.INTERSECT - 128)) | (1 << (ora2epasParser.INTERVAL - 128)) | (1 << (ora2epasParser.INTO - 128)) | (1 << (ora2epasParser.INVALIDATE - 128)) | (1 << (ora2epasParser.IS - 128)) | (1 << (ora2epasParser.ISOLATION - 128)) | (1 << (ora2epasParser.ITERATE - 128)) | (1 << (ora2epasParser.JAVA - 128)) | (1 << (ora2epasParser.JOIN - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (ora2epasParser.KEEP - 192)) | (1 << (ora2epasParser.LANGUAGE - 192)) | (1 << (ora2epasParser.LAST - 192)) | (1 << (ora2epasParser.LAST_VALUE - 192)) | (1 << (ora2epasParser.LEADING - 192)) | (1 << (ora2epasParser.LEFT - 192)) | (1 << (ora2epasParser.LEVEL - 192)) | (1 << (ora2epasParser.LIBRARY - 192)) | (1 << (ora2epasParser.LIKE - 192)) | (1 << (ora2epasParser.LIKE2 - 192)) | (1 << (ora2epasParser.LIKE4 - 192)) | (1 << (ora2epasParser.LIKEC - 192)) | (1 << (ora2epasParser.LIMIT - 192)) | (1 << (ora2epasParser.LOCAL - 192)) | (1 << (ora2epasParser.LOCK - 192)) | (1 << (ora2epasParser.LOCKED - 192)) | (1 << (ora2epasParser.LOG - 192)) | (1 << (ora2epasParser.LOGOFF - 192)) | (1 << (ora2epasParser.LOGON - 192)) | (1 << (ora2epasParser.LONG - 192)) | (1 << (ora2epasParser.LOOP - 192)) | (1 << (ora2epasParser.MAIN - 192)) | (1 << (ora2epasParser.MAP - 192)) | (1 << (ora2epasParser.MATCHED - 192)) | (1 << (ora2epasParser.MAXVALUE - 192)) | (1 << (ora2epasParser.MEASURES - 192)) | (1 << (ora2epasParser.MEMBER - 192)) | (1 << (ora2epasParser.MERGE - 192)) | (1 << (ora2epasParser.MINUS - 192)) | (1 << (ora2epasParser.MINUTE - 192)) | (1 << (ora2epasParser.MINVALUE - 192)) | (1 << (ora2epasParser.MLSLABEL - 192)) | (1 << (ora2epasParser.MODE - 192)) | (1 << (ora2epasParser.MODEL - 192)) | (1 << (ora2epasParser.MODIFY - 192)) | (1 << (ora2epasParser.MONTH - 192)) | (1 << (ora2epasParser.MULTISET - 192)) | (1 << (ora2epasParser.NAME - 192)) | (1 << (ora2epasParser.NAN - 192)) | (1 << (ora2epasParser.NATURAL - 192)) | (1 << (ora2epasParser.NATURALN - 192)) | (1 << (ora2epasParser.NAV - 192)) | (1 << (ora2epasParser.NCHAR - 192)) | (1 << (ora2epasParser.NCHAR_CS - 192)) | (1 << (ora2epasParser.NCLOB - 192)) | (1 << (ora2epasParser.NESTED - 192)) | (1 << (ora2epasParser.NEW - 192)) | (1 << (ora2epasParser.NO - 192)) | (1 << (ora2epasParser.NOAUDIT - 192)) | (1 << (ora2epasParser.NOCACHE - 192)) | (1 << (ora2epasParser.NOCOPY - 192)) | (1 << (ora2epasParser.NOCYCLE - 192)) | (1 << (ora2epasParser.NOENTITYESCAPING - 192)) | (1 << (ora2epasParser.NOMAXVALUE - 192)) | (1 << (ora2epasParser.NOMINVALUE - 192)) | (1 << (ora2epasParser.NONE - 192)) | (1 << (ora2epasParser.NOORDER - 192)) | (1 << (ora2epasParser.NOSCHEMACHECK - 192)) | (1 << (ora2epasParser.NOT - 192)) | (1 << (ora2epasParser.NOWAIT - 192)) | (1 << (ora2epasParser.NULL - 192)) | (1 << (ora2epasParser.NULLS - 192)) | (1 << (ora2epasParser.NUMBER - 192)) | (1 << (ora2epasParser.NUMERIC - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (ora2epasParser.NVARCHAR2 - 256)) | (1 << (ora2epasParser.OBJECT - 256)) | (1 << (ora2epasParser.OF - 256)) | (1 << (ora2epasParser.OFF - 256)) | (1 << (ora2epasParser.OID - 256)) | (1 << (ora2epasParser.OLD - 256)) | (1 << (ora2epasParser.ON - 256)) | (1 << (ora2epasParser.ONLY - 256)) | (1 << (ora2epasParser.OPEN - 256)) | (1 << (ora2epasParser.OPTION - 256)) | (1 << (ora2epasParser.OR - 256)) | (1 << (ora2epasParser.ORADATA - 256)) | (1 << (ora2epasParser.ORDER - 256)) | (1 << (ora2epasParser.ORDINALITY - 256)) | (1 << (ora2epasParser.OSERROR - 256)) | (1 << (ora2epasParser.OUT - 256)) | (1 << (ora2epasParser.OUTER - 256)) | (1 << (ora2epasParser.OVER - 256)) | (1 << (ora2epasParser.OVERRIDING - 256)) | (1 << (ora2epasParser.PACKAGE - 256)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 256)) | (1 << (ora2epasParser.PARAMETERS - 256)) | (1 << (ora2epasParser.PARENT - 256)) | (1 << (ora2epasParser.PARTITION - 256)) | (1 << (ora2epasParser.PASSING - 256)) | (1 << (ora2epasParser.PATH - 256)) | (1 << (ora2epasParser.PERCENT_ISOPEN - 256)) | (1 << (ora2epasParser.PERCENT_FOUND - 256)) | (1 << (ora2epasParser.PERCENT_NOTFOUND - 256)) | (1 << (ora2epasParser.PERCENT_ROWCOUNT - 256)) | (1 << (ora2epasParser.PERCENT_ROWTYPE - 256)) | (1 << (ora2epasParser.PERCENT_TYPE - 256)) | (1 << (ora2epasParser.PIPELINED - 256)) | (1 << (ora2epasParser.PIVOT - 256)) | (1 << (ora2epasParser.PLAN - 256)) | (1 << (ora2epasParser.PUBLIC - 256)) | (1 << (ora2epasParser.PLS_INTEGER - 256)) | (1 << (ora2epasParser.POSITIVE - 256)) | (1 << (ora2epasParser.POSITIVEN - 256)) | (1 << (ora2epasParser.PRAGMA - 256)) | (1 << (ora2epasParser.PRECEDING - 256)) | (1 << (ora2epasParser.PRECISION - 256)) | (1 << (ora2epasParser.PRESENT - 256)) | (1 << (ora2epasParser.PRIOR - 256)) | (1 << (ora2epasParser.PROCEDURE - 256)) | (1 << (ora2epasParser.RAISE - 256)) | (1 << (ora2epasParser.RANGE - 256)) | (1 << (ora2epasParser.RAW - 256)) | (1 << (ora2epasParser.READ - 256)) | (1 << (ora2epasParser.REAL - 256)) | (1 << (ora2epasParser.RECORD - 256)) | (1 << (ora2epasParser.REF - 256)) | (1 << (ora2epasParser.REFERENCE - 256)) | (1 << (ora2epasParser.REFERENCING - 256)) | (1 << (ora2epasParser.REJECT - 256)) | (1 << (ora2epasParser.RENAME - 256)) | (1 << (ora2epasParser.REPLACE - 256)) | (1 << (ora2epasParser.RESPECT - 256)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 256)) | (1 << (ora2epasParser.RESULT - 256)) | (1 << (ora2epasParser.RETURN - 256)) | (1 << (ora2epasParser.RETURNING - 256)) | (1 << (ora2epasParser.REUSE - 256)) | (1 << (ora2epasParser.REVERSE - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (ora2epasParser.REVOKE - 320)) | (1 << (ora2epasParser.RIGHT - 320)) | (1 << (ora2epasParser.ROLLBACK - 320)) | (1 << (ora2epasParser.ROLLUP - 320)) | (1 << (ora2epasParser.ROW - 320)) | (1 << (ora2epasParser.ROWID - 320)) | (1 << (ora2epasParser.ROWS - 320)) | (1 << (ora2epasParser.RULES - 320)) | (1 << (ora2epasParser.SAMPLE - 320)) | (1 << (ora2epasParser.SAVE - 320)) | (1 << (ora2epasParser.SAVEPOINT - 320)) | (1 << (ora2epasParser.SCHEMA - 320)) | (1 << (ora2epasParser.SCHEMACHECK - 320)) | (1 << (ora2epasParser.SCN - 320)) | (1 << (ora2epasParser.SEARCH - 320)) | (1 << (ora2epasParser.SECOND - 320)) | (1 << (ora2epasParser.SEED - 320)) | (1 << (ora2epasParser.SEGMENT - 320)) | (1 << (ora2epasParser.SELECT - 320)) | (1 << (ora2epasParser.SELF - 320)) | (1 << (ora2epasParser.SEQUENCE - 320)) | (1 << (ora2epasParser.SEQUENTIAL - 320)) | (1 << (ora2epasParser.SERIALIZABLE - 320)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 320)) | (1 << (ora2epasParser.SERVERERROR - 320)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 320)) | (1 << (ora2epasParser.SET - 320)) | (1 << (ora2epasParser.SETS - 320)) | (1 << (ora2epasParser.SETTINGS - 320)) | (1 << (ora2epasParser.SHARE - 320)) | (1 << (ora2epasParser.SHOW - 320)) | (1 << (ora2epasParser.SHUTDOWN - 320)) | (1 << (ora2epasParser.SIBLINGS - 320)) | (1 << (ora2epasParser.SIGNTYPE - 320)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 320)) | (1 << (ora2epasParser.SINGLE - 320)) | (1 << (ora2epasParser.SIZE - 320)) | (1 << (ora2epasParser.SKIP_ - 320)) | (1 << (ora2epasParser.SMALLINT - 320)) | (1 << (ora2epasParser.SNAPSHOT - 320)) | (1 << (ora2epasParser.SOME - 320)) | (1 << (ora2epasParser.SPECIFICATION - 320)) | (1 << (ora2epasParser.SQLDATA - 320)) | (1 << (ora2epasParser.SQLERROR - 320)) | (1 << (ora2epasParser.STANDALONE - 320)) | (1 << (ora2epasParser.START - 320)) | (1 << (ora2epasParser.STARTUP - 320)) | (1 << (ora2epasParser.STATEMENT - 320)) | (1 << (ora2epasParser.STATEMENT_ID - 320)) | (1 << (ora2epasParser.STATIC - 320)) | (1 << (ora2epasParser.STATISTICS - 320)) | (1 << (ora2epasParser.STRING - 320)) | (1 << (ora2epasParser.SUBMULTISET - 320)) | (1 << (ora2epasParser.SUBPARTITION - 320)) | (1 << (ora2epasParser.SUBSTITUTABLE - 320)) | (1 << (ora2epasParser.SUBTYPE - 320)) | (1 << (ora2epasParser.SUCCESS - 320)) | (1 << (ora2epasParser.SUSPEND - 320)) | (1 << (ora2epasParser.SYNONYM - 320)) | (1 << (ora2epasParser.TABLE - 320)) | (1 << (ora2epasParser.THE - 320)) | (1 << (ora2epasParser.THEN - 320)) | (1 << (ora2epasParser.TIME - 320)) | (1 << (ora2epasParser.TIMESTAMP - 320)))) != 0) or ((((_la - 384)) & ~0x3f) == 0 and ((1 << (_la - 384)) & ((1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 384)) | (1 << (ora2epasParser.TIMEZONE_ABBR - 384)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 384)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 384)) | (1 << (ora2epasParser.TIMEZONE_REGION - 384)) | (1 << (ora2epasParser.TO - 384)) | (1 << (ora2epasParser.TRAILING - 384)) | (1 << (ora2epasParser.TRANSACTION - 384)) | (1 << (ora2epasParser.TRANSLATE - 384)) | (1 << (ora2epasParser.TREAT - 384)) | (1 << (ora2epasParser.TRIGGER - 384)) | (1 << (ora2epasParser.TRUE - 384)) | (1 << (ora2epasParser.TRUNCATE - 384)) | (1 << (ora2epasParser.TYPE - 384)) | (1 << (ora2epasParser.UNBOUNDED - 384)) | (1 << (ora2epasParser.UNDER - 384)) | (1 << (ora2epasParser.UNION - 384)) | (1 << (ora2epasParser.UNIQUE - 384)) | (1 << (ora2epasParser.UNLIMITED - 384)) | (1 << (ora2epasParser.UNPIVOT - 384)) | (1 << (ora2epasParser.UNTIL - 384)) | (1 << (ora2epasParser.UPDATE - 384)) | (1 << (ora2epasParser.UPDATED - 384)) | (1 << (ora2epasParser.UPSERT - 384)) | (1 << (ora2epasParser.UROWID - 384)) | (1 << (ora2epasParser.USE - 384)) | (1 << (ora2epasParser.USING - 384)) | (1 << (ora2epasParser.VALIDATE - 384)) | (1 << (ora2epasParser.VALUE - 384)) | (1 << (ora2epasParser.VALUES - 384)) | (1 << (ora2epasParser.VARCHAR - 384)) | (1 << (ora2epasParser.VARCHAR2 - 384)) | (1 << (ora2epasParser.VARIABLE - 384)) | (1 << (ora2epasParser.VARRAY - 384)) | (1 << (ora2epasParser.VARYING - 384)) | (1 << (ora2epasParser.VERSION - 384)) | (1 << (ora2epasParser.VERSIONS - 384)) | (1 << (ora2epasParser.WAIT - 384)) | (1 << (ora2epasParser.WARNING - 384)) | (1 << (ora2epasParser.WELLFORMED - 384)) | (1 << (ora2epasParser.WHEN - 384)) | (1 << (ora2epasParser.WHENEVER - 384)) | (1 << (ora2epasParser.WHERE - 384)) | (1 << (ora2epasParser.WHILE - 384)) | (1 << (ora2epasParser.WITH - 384)) | (1 << (ora2epasParser.WITHIN - 384)) | (1 << (ora2epasParser.WORK - 384)) | (1 << (ora2epasParser.WRITE - 384)) | (1 << (ora2epasParser.XML - 384)) | (1 << (ora2epasParser.XMLAGG - 384)) | (1 << (ora2epasParser.XMLATTRIBUTES - 384)) | (1 << (ora2epasParser.XMLCAST - 384)) | (1 << (ora2epasParser.XMLCOLATTVAL - 384)) | (1 << (ora2epasParser.XMLELEMENT - 384)) | (1 << (ora2epasParser.XMLEXISTS - 384)) | (1 << (ora2epasParser.XMLFOREST - 384)) | (1 << (ora2epasParser.XMLNAMESPACES - 384)) | (1 << (ora2epasParser.XMLPARSE - 384)) | (1 << (ora2epasParser.XMLPI - 384)) | (1 << (ora2epasParser.XMLQUERY - 384)) | (1 << (ora2epasParser.XMLROOT - 384)) | (1 << (ora2epasParser.XMLSERIALIZE - 384)))) != 0) or ((((_la - 448)) & ~0x3f) == 0 and ((1 << (_la - 448)) & ((1 << (ora2epasParser.XMLTABLE - 448)) | (1 << (ora2epasParser.YEAR - 448)) | (1 << (ora2epasParser.YES - 448)) | (1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 448)) | (1 << (ora2epasParser.ZONE - 448)) | (1 << (ora2epasParser.PREDICTION - 448)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 448)) | (1 << (ora2epasParser.PREDICTION_COST - 448)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 448)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 448)) | (1 << (ora2epasParser.PREDICTION_SET - 448)) | (1 << (ora2epasParser.CUME_DIST - 448)) | (1 << (ora2epasParser.DENSE_RANK - 448)) | (1 << (ora2epasParser.LISTAGG - 448)) | (1 << (ora2epasParser.PERCENT_RANK - 448)) | (1 << (ora2epasParser.PERCENTILE_CONT - 448)) | (1 << (ora2epasParser.PERCENTILE_DISC - 448)) | (1 << (ora2epasParser.RANK - 448)) | (1 << (ora2epasParser.AVG - 448)) | (1 << (ora2epasParser.CORR - 448)) | (1 << (ora2epasParser.COVAR_ - 448)) | (1 << (ora2epasParser.DECODE - 448)) | (1 << (ora2epasParser.LAG - 448)) | (1 << (ora2epasParser.LEAD - 448)) | (1 << (ora2epasParser.MAX - 448)) | (1 << (ora2epasParser.MEDIAN - 448)) | (1 << (ora2epasParser.MIN - 448)) | (1 << (ora2epasParser.NTILE - 448)) | (1 << (ora2epasParser.NVL - 448)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 448)) | (1 << (ora2epasParser.REGR_ - 448)) | (1 << (ora2epasParser.ROUND - 448)) | (1 << (ora2epasParser.ROW_NUMBER - 448)) | (1 << (ora2epasParser.SUBSTR - 448)) | (1 << (ora2epasParser.TO_CHAR - 448)) | (1 << (ora2epasParser.TRIM - 448)) | (1 << (ora2epasParser.SUM - 448)) | (1 << (ora2epasParser.STDDEV - 448)) | (1 << (ora2epasParser.VAR_ - 448)) | (1 << (ora2epasParser.VARIANCE - 448)) | (1 << (ora2epasParser.DBMS_ALERT - 448)) | (1 << (ora2epasParser.DBMS_AQADM - 448)) | (1 << (ora2epasParser.DBMS_AQ - 448)) | (1 << (ora2epasParser.DBMS_CRYPTO - 448)) | (1 << (ora2epasParser.DBMS_JOB - 448)) | (1 << (ora2epasParser.DBMS_LOB - 448)) | (1 << (ora2epasParser.DBMS_LOCK - 448)) | (1 << (ora2epasParser.DBMS_MVIEW - 448)) | (1 << (ora2epasParser.DBMS_OUTPUT - 448)) | (1 << (ora2epasParser.DBMS_PIPE - 448)) | (1 << (ora2epasParser.DBMS_PROFILER - 448)) | (1 << (ora2epasParser.DBMS_RANDOM - 448)) | (1 << (ora2epasParser.DBMS_RLS - 448)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 448)) | (1 << (ora2epasParser.DBMS_SESSION - 448)) | (1 << (ora2epasParser.DBMS_SQL - 448)) | (1 << (ora2epasParser.DBMS_UTILITY - 448)) | (1 << (ora2epasParser.EMP_ADMIN - 448)) | (1 << (ora2epasParser.UTL_ENCODE - 448)) | (1 << (ora2epasParser.UTL_FILE - 448)) | (1 << (ora2epasParser.UTL_HTTP - 448)) | (1 << (ora2epasParser.UTL_MAIL - 448)) | (1 << (ora2epasParser.UTL_RAW - 448)) | (1 << (ora2epasParser.UTL_SMTP - 448)))) != 0) or ((((_la - 512)) & ~0x3f) == 0 and ((1 << (_la - 512)) & ((1 << (ora2epasParser.UTL_TCP - 512)) | (1 << (ora2epasParser.UTL_URL - 512)) | (1 << (ora2epasParser.NATIONAL_CHAR_STRING_LIT - 512)) | (1 << (ora2epasParser.BIT_STRING_LIT - 512)) | (1 << (ora2epasParser.HEX_STRING_LIT - 512)) | (1 << (ora2epasParser.DOUBLE_PERIOD - 512)) | (1 << (ora2epasParser.PERIOD - 512)) | (1 << (ora2epasParser.UNSIGNED_INTEGER - 512)) | (1 << (ora2epasParser.APPROXIMATE_NUM_LIT - 512)) | (1 << (ora2epasParser.CHAR_STRING - 512)) | (1 << (ora2epasParser.DELIMITED_ID - 512)) | (1 << (ora2epasParser.PERCENT - 512)) | (1 << (ora2epasParser.AMPERSAND - 512)) | (1 << (ora2epasParser.LEFT_PAREN - 512)) | (1 << (ora2epasParser.RIGHT_PAREN - 512)) | (1 << (ora2epasParser.DOUBLE_ASTERISK - 512)) | (1 << (ora2epasParser.ASTERISK - 512)) | (1 << (ora2epasParser.PLUS_SIGN - 512)) | (1 << (ora2epasParser.MINUS_SIGN - 512)) | (1 << (ora2epasParser.COMMA - 512)) | (1 << (ora2epasParser.SOLIDUS - 512)) | (1 << (ora2epasParser.AT_SIGN - 512)) | (1 << (ora2epasParser.ASSIGN_OP - 512)) | (1 << (ora2epasParser.BINDVAR - 512)) | (1 << (ora2epasParser.COLON - 512)) | (1 << (ora2epasParser.SEMICOLON - 512)) | (1 << (ora2epasParser.LESS_THAN_OR_EQUALS_OP - 512)) | (1 << (ora2epasParser.LESS_THAN_OP - 512)) | (1 << (ora2epasParser.GREATER_THAN_OR_EQUALS_OP - 512)) | (1 << (ora2epasParser.NOT_EQUAL_OP - 512)) | (1 << (ora2epasParser.CARRET_OPERATOR_PART - 512)) | (1 << (ora2epasParser.TILDE_OPERATOR_PART - 512)) | (1 << (ora2epasParser.EXCLAMATION_OPERATOR_PART - 512)) | (1 << (ora2epasParser.GREATER_THAN_OP - 512)) | (1 << (ora2epasParser.CONCATENATION_OP - 512)) | (1 << (ora2epasParser.VERTICAL_BAR - 512)) | (1 << (ora2epasParser.EQUALS_OP - 512)) | (1 << (ora2epasParser.LEFT_BRACKET - 512)) | (1 << (ora2epasParser.RIGHT_BRACKET - 512)) | (1 << (ora2epasParser.INTRODUCER - 512)) | (1 << (ora2epasParser.SPACES - 512)) | (1 << (ora2epasParser.SINGLE_LINE_COMMENT - 512)) | (1 << (ora2epasParser.MULTI_LINE_COMMENT - 512)) | (1 << (ora2epasParser.PROMPT - 512)) | (1 << (ora2epasParser.START_CMD - 512)) | (1 << (ora2epasParser.REGULAR_ID - 512)) | (1 << (ora2epasParser.ZV - 512)))) != 0):
                self.state = 771
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 769
                    self.unit_statement()
                    pass

                elif la_ == 2:
                    self.state = 770
                    self.sql_plus_command()
                    pass


                self.state = 774
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 773
                    self.match(ora2epasParser.SEMICOLON)


                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 781
            self.match(ora2epasParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unit_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_cluster_table(self):
            return self.getTypedRuleContext(ora2epasParser.Create_cluster_tableContext,0)


        def create_database_links(self):
            return self.getTypedRuleContext(ora2epasParser.Create_database_linksContext,0)


        def create_function_body(self):
            return self.getTypedRuleContext(ora2epasParser.Create_function_bodyContext,0)


        def create_index(self):
            return self.getTypedRuleContext(ora2epasParser.Create_indexContext,0)


        def create_package(self):
            return self.getTypedRuleContext(ora2epasParser.Create_packageContext,0)


        def create_package_body(self):
            return self.getTypedRuleContext(ora2epasParser.Create_package_bodyContext,0)


        def create_procedure_body(self):
            return self.getTypedRuleContext(ora2epasParser.Create_procedure_bodyContext,0)


        def create_table(self):
            return self.getTypedRuleContext(ora2epasParser.Create_tableContext,0)


        def create_sequence(self):
            return self.getTypedRuleContext(ora2epasParser.Create_sequenceContext,0)


        def create_synonym(self):
            return self.getTypedRuleContext(ora2epasParser.Create_synonymContext,0)


        def create_trigger(self):
            return self.getTypedRuleContext(ora2epasParser.Create_triggerContext,0)


        def create_type(self):
            return self.getTypedRuleContext(ora2epasParser.Create_typeContext,0)


        def create_view(self):
            return self.getTypedRuleContext(ora2epasParser.Create_viewContext,0)


        def create_materialized_view(self):
            return self.getTypedRuleContext(ora2epasParser.Create_materialized_viewContext,0)


        def sql_statements(self):
            return self.getTypedRuleContext(ora2epasParser.Sql_statementsContext,0)


        def anonymous_block(self):
            return self.getTypedRuleContext(ora2epasParser.Anonymous_blockContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_unit_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_statement" ):
                listener.enterUnit_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_statement" ):
                listener.exitUnit_statement(self)




    def unit_statement(self):

        localctx = ora2epasParser.Unit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_unit_statement)
        try:
            self.state = 799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 783
                self.create_cluster_table()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 784
                self.create_database_links()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 785
                self.create_function_body()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 786
                self.create_index()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 787
                self.create_package()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 788
                self.create_package_body()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 789
                self.create_procedure_body()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 790
                self.create_table()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 791
                self.create_sequence()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 792
                self.create_synonym()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 793
                self.create_trigger()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 794
                self.create_type()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 795
                self.create_view()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 796
                self.create_materialized_view()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 797
                self.sql_statements()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 798
                self.anonymous_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_cluster_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ora2epasParser.RULE_create_cluster_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_cluster_table" ):
                listener.enterCreate_cluster_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_cluster_table" ):
                listener.exitCreate_cluster_table(self)




    def create_cluster_table(self):

        localctx = ora2epasParser.Create_cluster_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_create_cluster_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.matchWildcard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_database_linksContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dblink_name(self):
            return self.getTypedRuleContext(ora2epasParser.Dblink_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_create_database_links

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database_links" ):
                listener.enterCreate_database_links(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database_links" ):
                listener.exitCreate_database_links(self)




    def create_database_links(self):

        localctx = ora2epasParser.Create_database_linksContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_create_database_links)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.dblink_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_function_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(ora2epasParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(ora2epasParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(ora2epasParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(ora2epasParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def USING(self):
            return self.getToken(ora2epasParser.USING, 0)

        def implementation_type_name(self):
            return self.getTypedRuleContext(ora2epasParser.Implementation_type_nameContext,0)


        def OR(self):
            return self.getToken(ora2epasParser.OR, 0)

        def REPLACE(self):
            return self.getToken(ora2epasParser.REPLACE, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ParameterContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ParameterContext,i)


        def invoker_rights_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Invoker_rights_clauseContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Invoker_rights_clauseContext,i)


        def parallel_enable_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Parallel_enable_clauseContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Parallel_enable_clauseContext,i)


        def DETERMINISTIC(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.DETERMINISTIC)
            else:
                return self.getToken(ora2epasParser.DETERMINISTIC, i)

        def AGGREGATE(self):
            return self.getToken(ora2epasParser.AGGREGATE, 0)

        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def AS(self):
            return self.getToken(ora2epasParser.AS, 0)

        def body(self):
            return self.getTypedRuleContext(ora2epasParser.BodyContext,0)


        def call_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Call_specContext,0)


        def DECLARE(self):
            return self.getToken(ora2epasParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Declare_specContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_create_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_function_body" ):
                listener.enterCreate_function_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_function_body" ):
                listener.exitCreate_function_body(self)




    def create_function_body(self):

        localctx = ora2epasParser.Create_function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_create_function_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(ora2epasParser.CREATE)
            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.OR:
                self.state = 806
                self.match(ora2epasParser.OR)
                self.state = 807
                self.match(ora2epasParser.REPLACE)


            self.state = 810
            self.match(ora2epasParser.FUNCTION)
            self.state = 811
            self.function_name()
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LEFT_PAREN:
                self.state = 812
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 813
                self.parameter()
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 814
                    self.match(ora2epasParser.COMMA)
                    self.state = 815
                    self.parameter()
                    self.state = 820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 821
                self.match(ora2epasParser.RIGHT_PAREN)


            self.state = 825
            self.match(ora2epasParser.RETURN)
            self.state = 826
            self.type_spec()
            self.state = 832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.AUTHID or _la==ora2epasParser.DETERMINISTIC or _la==ora2epasParser.PARALLEL_ENABLE:
                self.state = 830
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ora2epasParser.AUTHID]:
                    self.state = 827
                    self.invoker_rights_clause()
                    pass
                elif token in [ora2epasParser.PARALLEL_ENABLE]:
                    self.state = 828
                    self.parallel_enable_clause()
                    pass
                elif token in [ora2epasParser.DETERMINISTIC]:
                    self.state = 829
                    self.match(ora2epasParser.DETERMINISTIC)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.AS, ora2epasParser.IS]:
                self.state = 835
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.AS or _la==ora2epasParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 847
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ora2epasParser.DECLARE:
                        self.state = 836
                        self.match(ora2epasParser.DECLARE)


                    self.state = 842
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.PROCEDURE - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (ora2epasParser.DELIMITED_ID - 522)) | (1 << (ora2epasParser.INTRODUCER - 522)) | (1 << (ora2epasParser.REGULAR_ID - 522)))) != 0):
                        self.state = 839
                        self.declare_spec()
                        self.state = 844
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 845
                    self.body()
                    pass

                elif la_ == 2:
                    self.state = 846
                    self.call_spec()
                    pass


                pass
            elif token in [ora2epasParser.AGGREGATE]:
                self.state = 849
                self.match(ora2epasParser.AGGREGATE)
                self.state = 850
                self.match(ora2epasParser.USING)
                self.state = 851
                self.implementation_type_name()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 854
                self.match(ora2epasParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parallel_enable_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARALLEL_ENABLE(self):
            return self.getToken(ora2epasParser.PARALLEL_ENABLE, 0)

        def partition_by_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Partition_by_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_parallel_enable_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParallel_enable_clause" ):
                listener.enterParallel_enable_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParallel_enable_clause" ):
                listener.exitParallel_enable_clause(self)




    def parallel_enable_clause(self):

        localctx = ora2epasParser.Parallel_enable_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_parallel_enable_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(ora2epasParser.PARALLEL_ENABLE)
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LEFT_PAREN:
                self.state = 858
                self.partition_by_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(ora2epasParser.PARTITION, 0)

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def BY(self):
            return self.getToken(ora2epasParser.BY, 0)

        def ANY(self):
            return self.getToken(ora2epasParser.ANY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_nameContext,i)


        def HASH(self):
            return self.getToken(ora2epasParser.HASH, 0)

        def RANGE(self):
            return self.getToken(ora2epasParser.RANGE, 0)

        def streaming_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Streaming_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_partition_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_by_clause" ):
                listener.enterPartition_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_by_clause" ):
                listener.exitPartition_by_clause(self)




    def partition_by_clause(self):

        localctx = ora2epasParser.Partition_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_partition_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 862
            self.match(ora2epasParser.PARTITION)
            self.state = 863
            self.expression()
            self.state = 864
            self.match(ora2epasParser.BY)
            self.state = 878
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.ANY]:
                self.state = 865
                self.match(ora2epasParser.ANY)
                pass
            elif token in [ora2epasParser.HASH, ora2epasParser.RANGE]:
                self.state = 866
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.HASH or _la==ora2epasParser.RANGE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 867
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 868
                self.column_name()
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 869
                    self.match(ora2epasParser.COMMA)
                    self.state = 870
                    self.column_name()
                    self.state = 875
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 876
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.CLUSTER or _la==ora2epasParser.ORDER:
                self.state = 880
                self.streaming_clause()


            self.state = 883
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Streaming_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def BY(self):
            return self.getToken(ora2epasParser.BY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_nameContext,i)


        def ORDER(self):
            return self.getToken(ora2epasParser.ORDER, 0)

        def CLUSTER(self):
            return self.getToken(ora2epasParser.CLUSTER, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_streaming_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStreaming_clause" ):
                listener.enterStreaming_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStreaming_clause" ):
                listener.exitStreaming_clause(self)




    def streaming_clause(self):

        localctx = ora2epasParser.Streaming_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_streaming_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.CLUSTER or _la==ora2epasParser.ORDER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 886
            self.expression()
            self.state = 887
            self.match(ora2epasParser.BY)
            self.state = 888
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 889
            self.column_name()
            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 890
                self.match(ora2epasParser.COMMA)
                self.state = 891
                self.column_name()
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 897
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_name(self):
            return self.getTypedRuleContext(ora2epasParser.Index_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_create_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index" ):
                listener.enterCreate_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index" ):
                listener.exitCreate_index(self)




    def create_index(self):

        localctx = ora2epasParser.Create_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_create_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.index_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_packageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(ora2epasParser.CREATE, 0)

        def PACKAGE(self):
            return self.getToken(ora2epasParser.PACKAGE, 0)

        def package_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Package_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Package_nameContext,i)


        def END(self):
            return self.getToken(ora2epasParser.END, 0)

        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def AS(self):
            return self.getToken(ora2epasParser.AS, 0)

        def OR(self):
            return self.getToken(ora2epasParser.OR, 0)

        def REPLACE(self):
            return self.getToken(ora2epasParser.REPLACE, 0)

        def invoker_rights_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Invoker_rights_clauseContext,0)


        def package_obj_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Package_obj_specContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Package_obj_specContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_create_package

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_package" ):
                listener.enterCreate_package(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_package" ):
                listener.exitCreate_package(self)




    def create_package(self):

        localctx = ora2epasParser.Create_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_create_package)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.match(ora2epasParser.CREATE)
            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.OR:
                self.state = 902
                self.match(ora2epasParser.OR)
                self.state = 903
                self.match(ora2epasParser.REPLACE)


            self.state = 906
            self.match(ora2epasParser.PACKAGE)
            self.state = 907
            self.package_name()
            self.state = 909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.AUTHID:
                self.state = 908
                self.invoker_rights_clause()


            self.state = 911
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.AS or _la==ora2epasParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.PROCEDURE - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (ora2epasParser.DELIMITED_ID - 522)) | (1 << (ora2epasParser.INTRODUCER - 522)) | (1 << (ora2epasParser.REGULAR_ID - 522)))) != 0):
                self.state = 912
                self.package_obj_spec()
                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 918
            self.match(ora2epasParser.END)
            self.state = 920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (ora2epasParser.DELIMITED_ID - 522)) | (1 << (ora2epasParser.INTRODUCER - 522)) | (1 << (ora2epasParser.REGULAR_ID - 522)))) != 0):
                self.state = 919
                self.package_name()


            self.state = 922
            self.match(ora2epasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_package_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(ora2epasParser.CREATE, 0)

        def PACKAGE(self):
            return self.getToken(ora2epasParser.PACKAGE, 0)

        def BODY(self):
            return self.getToken(ora2epasParser.BODY, 0)

        def package_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Package_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Package_nameContext,i)


        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def AS(self):
            return self.getToken(ora2epasParser.AS, 0)

        def BEGIN(self):
            return self.getToken(ora2epasParser.BEGIN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(ora2epasParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(ora2epasParser.END, 0)

        def OR(self):
            return self.getToken(ora2epasParser.OR, 0)

        def REPLACE(self):
            return self.getToken(ora2epasParser.REPLACE, 0)

        def package_obj_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Package_obj_bodyContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Package_obj_bodyContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_create_package_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_package_body" ):
                listener.enterCreate_package_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_package_body" ):
                listener.exitCreate_package_body(self)




    def create_package_body(self):

        localctx = ora2epasParser.Create_package_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_create_package_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self.match(ora2epasParser.CREATE)
            self.state = 927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.OR:
                self.state = 925
                self.match(ora2epasParser.OR)
                self.state = 926
                self.match(ora2epasParser.REPLACE)


            self.state = 929
            self.match(ora2epasParser.PACKAGE)
            self.state = 930
            self.match(ora2epasParser.BODY)
            self.state = 931
            self.package_name()
            self.state = 932
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.AS or _la==ora2epasParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.PROCEDURE - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (ora2epasParser.DELIMITED_ID - 522)) | (1 << (ora2epasParser.INTRODUCER - 522)) | (1 << (ora2epasParser.REGULAR_ID - 522)))) != 0):
                self.state = 933
                self.package_obj_body()
                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 945
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.BEGIN]:
                self.state = 939
                self.match(ora2epasParser.BEGIN)
                self.state = 940
                self.seq_of_statements()
                pass
            elif token in [ora2epasParser.END]:
                self.state = 941
                self.match(ora2epasParser.END)
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (ora2epasParser.DELIMITED_ID - 522)) | (1 << (ora2epasParser.INTRODUCER - 522)) | (1 << (ora2epasParser.REGULAR_ID - 522)))) != 0):
                    self.state = 942
                    self.package_name()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 947
            self.match(ora2epasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Package_obj_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration(self):
            return self.getTypedRuleContext(ora2epasParser.Variable_declarationContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(ora2epasParser.Subtype_declarationContext,0)


        def cursor_declaration(self):
            return self.getTypedRuleContext(ora2epasParser.Cursor_declarationContext,0)


        def exception_declaration(self):
            return self.getTypedRuleContext(ora2epasParser.Exception_declarationContext,0)


        def pragma_declaration(self):
            return self.getTypedRuleContext(ora2epasParser.Pragma_declarationContext,0)


        def type_declaration(self):
            return self.getTypedRuleContext(ora2epasParser.Type_declarationContext,0)


        def procedure_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Procedure_specContext,0)


        def function_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Function_specContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_package_obj_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_obj_spec" ):
                listener.enterPackage_obj_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_obj_spec" ):
                listener.exitPackage_obj_spec(self)




    def package_obj_spec(self):

        localctx = ora2epasParser.Package_obj_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_package_obj_spec)
        try:
            self.state = 957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 949
                self.variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 950
                self.subtype_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 951
                self.cursor_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 952
                self.exception_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 953
                self.pragma_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 954
                self.type_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 955
                self.procedure_spec()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 956
                self.function_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(ora2epasParser.PROCEDURE, 0)

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ParameterContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ParameterContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_procedure_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_spec" ):
                listener.enterProcedure_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_spec" ):
                listener.exitProcedure_spec(self)




    def procedure_spec(self):

        localctx = ora2epasParser.Procedure_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_procedure_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.match(ora2epasParser.PROCEDURE)
            self.state = 960
            self.identifier()
            self.state = 972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LEFT_PAREN:
                self.state = 961
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 962
                self.parameter()
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 963
                    self.match(ora2epasParser.COMMA)
                    self.state = 964
                    self.parameter()
                    self.state = 969
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 970
                self.match(ora2epasParser.RIGHT_PAREN)


            self.state = 974
            self.match(ora2epasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(ora2epasParser.FUNCTION, 0)

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def RETURN(self):
            return self.getToken(ora2epasParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ParameterContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ParameterContext,i)


        def DETERMINISTIC(self):
            return self.getToken(ora2epasParser.DETERMINISTIC, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_function_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_spec" ):
                listener.enterFunction_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_spec" ):
                listener.exitFunction_spec(self)




    def function_spec(self):

        localctx = ora2epasParser.Function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.match(ora2epasParser.FUNCTION)
            self.state = 977
            self.identifier()
            self.state = 989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LEFT_PAREN:
                self.state = 978
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 979
                self.parameter()
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 980
                    self.match(ora2epasParser.COMMA)
                    self.state = 981
                    self.parameter()
                    self.state = 986
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 987
                self.match(ora2epasParser.RIGHT_PAREN)


            self.state = 991
            self.match(ora2epasParser.RETURN)
            self.state = 992
            self.type_spec()
            self.state = 994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.DETERMINISTIC:
                self.state = 993
                self.match(ora2epasParser.DETERMINISTIC)


            self.state = 996
            self.match(ora2epasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Package_obj_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration(self):
            return self.getTypedRuleContext(ora2epasParser.Variable_declarationContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(ora2epasParser.Subtype_declarationContext,0)


        def cursor_declaration(self):
            return self.getTypedRuleContext(ora2epasParser.Cursor_declarationContext,0)


        def exception_declaration(self):
            return self.getTypedRuleContext(ora2epasParser.Exception_declarationContext,0)


        def type_declaration(self):
            return self.getTypedRuleContext(ora2epasParser.Type_declarationContext,0)


        def procedure_body(self):
            return self.getTypedRuleContext(ora2epasParser.Procedure_bodyContext,0)


        def function_body(self):
            return self.getTypedRuleContext(ora2epasParser.Function_bodyContext,0)


        def procedure_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Procedure_specContext,0)


        def function_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Function_specContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_package_obj_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_obj_body" ):
                listener.enterPackage_obj_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_obj_body" ):
                listener.exitPackage_obj_body(self)




    def package_obj_body(self):

        localctx = ora2epasParser.Package_obj_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_package_obj_body)
        try:
            self.state = 1007
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 998
                self.variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 999
                self.subtype_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1000
                self.cursor_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1001
                self.exception_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1002
                self.type_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1003
                self.procedure_body()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1004
                self.function_body()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1005
                self.procedure_spec()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1006
                self.function_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(ora2epasParser.FUNCTION, 0)

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def RETURN(self):
            return self.getToken(ora2epasParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def USING(self):
            return self.getToken(ora2epasParser.USING, 0)

        def implementation_type_name(self):
            return self.getTypedRuleContext(ora2epasParser.Implementation_type_nameContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ParameterContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ParameterContext,i)


        def invoker_rights_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Invoker_rights_clauseContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Invoker_rights_clauseContext,i)


        def parallel_enable_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Parallel_enable_clauseContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Parallel_enable_clauseContext,i)


        def DETERMINISTIC(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.DETERMINISTIC)
            else:
                return self.getToken(ora2epasParser.DETERMINISTIC, i)

        def PIPELINED(self):
            return self.getToken(ora2epasParser.PIPELINED, 0)

        def AGGREGATE(self):
            return self.getToken(ora2epasParser.AGGREGATE, 0)

        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def AS(self):
            return self.getToken(ora2epasParser.AS, 0)

        def body(self):
            return self.getTypedRuleContext(ora2epasParser.BodyContext,0)


        def call_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Call_specContext,0)


        def DECLARE(self):
            return self.getToken(ora2epasParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Declare_specContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_function_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_body" ):
                listener.enterFunction_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_body" ):
                listener.exitFunction_body(self)




    def function_body(self):

        localctx = ora2epasParser.Function_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_function_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.match(ora2epasParser.FUNCTION)
            self.state = 1010
            self.identifier()
            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LEFT_PAREN:
                self.state = 1011
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 1012
                self.parameter()
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 1013
                    self.match(ora2epasParser.COMMA)
                    self.state = 1014
                    self.parameter()
                    self.state = 1019
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1020
                self.match(ora2epasParser.RIGHT_PAREN)


            self.state = 1024
            self.match(ora2epasParser.RETURN)
            self.state = 1025
            self.type_spec()
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.AUTHID or _la==ora2epasParser.DETERMINISTIC or _la==ora2epasParser.PARALLEL_ENABLE:
                self.state = 1029
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ora2epasParser.AUTHID]:
                    self.state = 1026
                    self.invoker_rights_clause()
                    pass
                elif token in [ora2epasParser.PARALLEL_ENABLE]:
                    self.state = 1027
                    self.parallel_enable_clause()
                    pass
                elif token in [ora2epasParser.DETERMINISTIC]:
                    self.state = 1028
                    self.match(ora2epasParser.DETERMINISTIC)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1033
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 1035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.PIPELINED:
                    self.state = 1034
                    self.match(ora2epasParser.PIPELINED)


                self.state = 1037
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.AS or _la==ora2epasParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1049
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 1039
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ora2epasParser.DECLARE:
                        self.state = 1038
                        self.match(ora2epasParser.DECLARE)


                    self.state = 1044
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.PROCEDURE - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (ora2epasParser.DELIMITED_ID - 522)) | (1 << (ora2epasParser.INTRODUCER - 522)) | (1 << (ora2epasParser.REGULAR_ID - 522)))) != 0):
                        self.state = 1041
                        self.declare_spec()
                        self.state = 1046
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1047
                    self.body()
                    pass

                elif la_ == 2:
                    self.state = 1048
                    self.call_spec()
                    pass


                pass

            elif la_ == 2:
                self.state = 1051
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.AGGREGATE or _la==ora2epasParser.PIPELINED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1052
                self.match(ora2epasParser.USING)
                self.state = 1053
                self.implementation_type_name()
                pass


            self.state = 1056
            self.match(ora2epasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(ora2epasParser.PROCEDURE, 0)

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def AS(self):
            return self.getToken(ora2epasParser.AS, 0)

        def body(self):
            return self.getTypedRuleContext(ora2epasParser.BodyContext,0)


        def call_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Call_specContext,0)


        def EXTERNAL(self):
            return self.getToken(ora2epasParser.EXTERNAL, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ParameterContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ParameterContext,i)


        def DECLARE(self):
            return self.getToken(ora2epasParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Declare_specContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_procedure_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_body" ):
                listener.enterProcedure_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_body" ):
                listener.exitProcedure_body(self)




    def procedure_body(self):

        localctx = ora2epasParser.Procedure_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_procedure_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.match(ora2epasParser.PROCEDURE)
            self.state = 1059
            self.identifier()
            self.state = 1071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LEFT_PAREN:
                self.state = 1060
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 1061
                self.parameter()
                self.state = 1066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 1062
                    self.match(ora2epasParser.COMMA)
                    self.state = 1063
                    self.parameter()
                    self.state = 1068
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1069
                self.match(ora2epasParser.RIGHT_PAREN)


            self.state = 1073
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.AS or _la==ora2epasParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1086
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 1075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.DECLARE:
                    self.state = 1074
                    self.match(ora2epasParser.DECLARE)


                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.PROCEDURE - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (ora2epasParser.DELIMITED_ID - 522)) | (1 << (ora2epasParser.INTRODUCER - 522)) | (1 << (ora2epasParser.REGULAR_ID - 522)))) != 0):
                    self.state = 1077
                    self.declare_spec()
                    self.state = 1082
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1083
                self.body()
                pass

            elif la_ == 2:
                self.state = 1084
                self.call_spec()
                pass

            elif la_ == 3:
                self.state = 1085
                self.match(ora2epasParser.EXTERNAL)
                pass


            self.state = 1088
            self.match(ora2epasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_procedure_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(ora2epasParser.CREATE, 0)

        def PROCEDURE(self):
            return self.getToken(ora2epasParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(ora2epasParser.Procedure_nameContext,0)


        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def AS(self):
            return self.getToken(ora2epasParser.AS, 0)

        def body(self):
            return self.getTypedRuleContext(ora2epasParser.BodyContext,0)


        def call_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Call_specContext,0)


        def EXTERNAL(self):
            return self.getToken(ora2epasParser.EXTERNAL, 0)

        def OR(self):
            return self.getToken(ora2epasParser.OR, 0)

        def REPLACE(self):
            return self.getToken(ora2epasParser.REPLACE, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ParameterContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ParameterContext,i)


        def invoker_rights_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Invoker_rights_clauseContext,0)


        def DECLARE(self):
            return self.getToken(ora2epasParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Declare_specContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_create_procedure_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_procedure_body" ):
                listener.enterCreate_procedure_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_procedure_body" ):
                listener.exitCreate_procedure_body(self)




    def create_procedure_body(self):

        localctx = ora2epasParser.Create_procedure_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_create_procedure_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            self.match(ora2epasParser.CREATE)
            self.state = 1093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.OR:
                self.state = 1091
                self.match(ora2epasParser.OR)
                self.state = 1092
                self.match(ora2epasParser.REPLACE)


            self.state = 1095
            self.match(ora2epasParser.PROCEDURE)
            self.state = 1096
            self.procedure_name()
            self.state = 1108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LEFT_PAREN:
                self.state = 1097
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 1098
                self.parameter()
                self.state = 1103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 1099
                    self.match(ora2epasParser.COMMA)
                    self.state = 1100
                    self.parameter()
                    self.state = 1105
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1106
                self.match(ora2epasParser.RIGHT_PAREN)


            self.state = 1111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.AUTHID:
                self.state = 1110
                self.invoker_rights_clause()


            self.state = 1113
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.AS or _la==ora2epasParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1126
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 1115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.DECLARE:
                    self.state = 1114
                    self.match(ora2epasParser.DECLARE)


                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.PROCEDURE - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (ora2epasParser.DELIMITED_ID - 522)) | (1 << (ora2epasParser.INTRODUCER - 522)) | (1 << (ora2epasParser.REGULAR_ID - 522)))) != 0):
                    self.state = 1117
                    self.declare_spec()
                    self.state = 1122
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1123
                self.body()
                pass

            elif la_ == 2:
                self.state = 1124
                self.call_spec()
                pass

            elif la_ == 3:
                self.state = 1125
                self.match(ora2epasParser.EXTERNAL)
                pass


            self.state = 1128
            self.match(ora2epasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(ora2epasParser.CREATE, 0)

        def TRIGGER(self):
            return self.getToken(ora2epasParser.TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(ora2epasParser.Trigger_nameContext,0)


        def trigger_body(self):
            return self.getTypedRuleContext(ora2epasParser.Trigger_bodyContext,0)


        def simple_dml_trigger(self):
            return self.getTypedRuleContext(ora2epasParser.Simple_dml_triggerContext,0)


        def compound_dml_trigger(self):
            return self.getTypedRuleContext(ora2epasParser.Compound_dml_triggerContext,0)


        def non_dml_trigger(self):
            return self.getTypedRuleContext(ora2epasParser.Non_dml_triggerContext,0)


        def OR(self):
            return self.getToken(ora2epasParser.OR, 0)

        def REPLACE(self):
            return self.getToken(ora2epasParser.REPLACE, 0)

        def trigger_follows_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Trigger_follows_clauseContext,0)


        def trigger_when_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Trigger_when_clauseContext,0)


        def ENABLE(self):
            return self.getToken(ora2epasParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(ora2epasParser.DISABLE, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_create_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_trigger" ):
                listener.enterCreate_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_trigger" ):
                listener.exitCreate_trigger(self)




    def create_trigger(self):

        localctx = ora2epasParser.Create_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_create_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.match(ora2epasParser.CREATE)
            self.state = 1133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.OR:
                self.state = 1131
                self.match(ora2epasParser.OR)
                self.state = 1132
                self.match(ora2epasParser.REPLACE)


            self.state = 1135
            self.match(ora2epasParser.TRIGGER)
            self.state = 1136
            self.trigger_name()
            self.state = 1140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 1137
                self.simple_dml_trigger()
                pass

            elif la_ == 2:
                self.state = 1138
                self.compound_dml_trigger()
                pass

            elif la_ == 3:
                self.state = 1139
                self.non_dml_trigger()
                pass


            self.state = 1143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 1142
                self.trigger_follows_clause()


            self.state = 1146
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 1145
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.DISABLE or _la==ora2epasParser.ENABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.WHEN:
                self.state = 1148
                self.trigger_when_clause()


            self.state = 1151
            self.trigger_body()
            self.state = 1152
            self.match(ora2epasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_follows_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOLLOWS(self):
            return self.getToken(ora2epasParser.FOLLOWS, 0)

        def trigger_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Trigger_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Trigger_nameContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_trigger_follows_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_follows_clause" ):
                listener.enterTrigger_follows_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_follows_clause" ):
                listener.exitTrigger_follows_clause(self)




    def trigger_follows_clause(self):

        localctx = ora2epasParser.Trigger_follows_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_trigger_follows_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.match(ora2epasParser.FOLLOWS)
            self.state = 1155
            self.trigger_name()
            self.state = 1160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 1156
                self.match(ora2epasParser.COMMA)
                self.state = 1157
                self.trigger_name()
                self.state = 1162
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_when_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(ora2epasParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(ora2epasParser.ConditionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_trigger_when_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_when_clause" ):
                listener.enterTrigger_when_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_when_clause" ):
                listener.exitTrigger_when_clause(self)




    def trigger_when_clause(self):

        localctx = ora2epasParser.Trigger_when_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_trigger_when_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self.match(ora2epasParser.WHEN)
            self.state = 1164
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 1165
            self.condition()
            self.state = 1166
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_event_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Dml_event_clauseContext,0)


        def BEFORE(self):
            return self.getToken(ora2epasParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(ora2epasParser.AFTER, 0)

        def INSTEAD(self):
            return self.getToken(ora2epasParser.INSTEAD, 0)

        def OF(self):
            return self.getToken(ora2epasParser.OF, 0)

        def referencing_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Referencing_clauseContext,0)


        def for_each_row(self):
            return self.getTypedRuleContext(ora2epasParser.For_each_rowContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_simple_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_dml_trigger" ):
                listener.enterSimple_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_dml_trigger" ):
                listener.exitSimple_dml_trigger(self)




    def simple_dml_trigger(self):

        localctx = ora2epasParser.Simple_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_simple_dml_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.BEFORE]:
                self.state = 1168
                self.match(ora2epasParser.BEFORE)
                pass
            elif token in [ora2epasParser.AFTER]:
                self.state = 1169
                self.match(ora2epasParser.AFTER)
                pass
            elif token in [ora2epasParser.INSTEAD]:
                self.state = 1170
                self.match(ora2epasParser.INSTEAD)
                self.state = 1171
                self.match(ora2epasParser.OF)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1174
            self.dml_event_clause()
            self.state = 1176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 1175
                self.referencing_clause()


            self.state = 1179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.FOR:
                self.state = 1178
                self.for_each_row()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_each_rowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(ora2epasParser.FOR, 0)

        def EACH(self):
            return self.getToken(ora2epasParser.EACH, 0)

        def ROW(self):
            return self.getToken(ora2epasParser.ROW, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_for_each_row

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_each_row" ):
                listener.enterFor_each_row(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_each_row" ):
                listener.exitFor_each_row(self)




    def for_each_row(self):

        localctx = ora2epasParser.For_each_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_for_each_row)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self.match(ora2epasParser.FOR)
            self.state = 1182
            self.match(ora2epasParser.EACH)
            self.state = 1183
            self.match(ora2epasParser.ROW)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(ora2epasParser.FOR, 0)

        def dml_event_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Dml_event_clauseContext,0)


        def referencing_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Referencing_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_compound_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_dml_trigger" ):
                listener.enterCompound_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_dml_trigger" ):
                listener.exitCompound_dml_trigger(self)




    def compound_dml_trigger(self):

        localctx = ora2epasParser.Compound_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_compound_dml_trigger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self.match(ora2epasParser.FOR)
            self.state = 1186
            self.dml_event_clause()
            self.state = 1188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 1187
                self.referencing_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_dml_event(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Non_dml_eventContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Non_dml_eventContext,i)


        def ON(self):
            return self.getToken(ora2epasParser.ON, 0)

        def BEFORE(self):
            return self.getToken(ora2epasParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(ora2epasParser.AFTER, 0)

        def DATABASE(self):
            return self.getToken(ora2epasParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(ora2epasParser.SCHEMA, 0)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.OR)
            else:
                return self.getToken(ora2epasParser.OR, i)

        def schema_name(self):
            return self.getTypedRuleContext(ora2epasParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_non_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_dml_trigger" ):
                listener.enterNon_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_dml_trigger" ):
                listener.exitNon_dml_trigger(self)




    def non_dml_trigger(self):

        localctx = ora2epasParser.Non_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_non_dml_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.AFTER or _la==ora2epasParser.BEFORE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1191
            self.non_dml_event()
            self.state = 1196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.OR:
                self.state = 1192
                self.match(ora2epasParser.OR)
                self.state = 1193
                self.non_dml_event()
                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1199
            self.match(ora2epasParser.ON)
            self.state = 1207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 1200
                self.match(ora2epasParser.DATABASE)
                pass

            elif la_ == 2:
                self.state = 1204
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 1201
                    self.schema_name()
                    self.state = 1202
                    self.match(ora2epasParser.PERIOD)


                self.state = 1206
                self.match(ora2epasParser.SCHEMA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPOUND(self):
            return self.getToken(ora2epasParser.COMPOUND, 0)

        def TRIGGER(self):
            return self.getToken(ora2epasParser.TRIGGER, 0)

        def CALL(self):
            return self.getToken(ora2epasParser.CALL, 0)

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def trigger_block(self):
            return self.getTypedRuleContext(ora2epasParser.Trigger_blockContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_trigger_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_body" ):
                listener.enterTrigger_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_body" ):
                listener.exitTrigger_body(self)




    def trigger_body(self):

        localctx = ora2epasParser.Trigger_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_trigger_body)
        try:
            self.state = 1214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1209
                self.match(ora2epasParser.COMPOUND)
                self.state = 1210
                self.match(ora2epasParser.TRIGGER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1211
                self.match(ora2epasParser.CALL)
                self.state = 1212
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1213
                self.trigger_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Routine_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routine_name(self):
            return self.getTypedRuleContext(ora2epasParser.Routine_nameContext,0)


        def function_argument(self):
            return self.getTypedRuleContext(ora2epasParser.Function_argumentContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_routine_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine_clause" ):
                listener.enterRoutine_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine_clause" ):
                listener.exitRoutine_clause(self)




    def routine_clause(self):

        localctx = ora2epasParser.Routine_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_routine_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            self.routine_name()
            self.state = 1218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LEFT_PAREN:
                self.state = 1217
                self.function_argument()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_trigger_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPOUND(self):
            return self.getToken(ora2epasParser.COMPOUND, 0)

        def TRIGGER(self):
            return self.getToken(ora2epasParser.TRIGGER, 0)

        def END(self):
            return self.getToken(ora2epasParser.END, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(ora2epasParser.Trigger_nameContext,0)


        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Declare_specContext,i)


        def timing_point_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Timing_point_sectionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Timing_point_sectionContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_compound_trigger_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_trigger_block" ):
                listener.enterCompound_trigger_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_trigger_block" ):
                listener.exitCompound_trigger_block(self)




    def compound_trigger_block(self):

        localctx = ora2epasParser.Compound_trigger_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_compound_trigger_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.match(ora2epasParser.COMPOUND)
            self.state = 1221
            self.match(ora2epasParser.TRIGGER)
            self.state = 1225
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1222
                    self.declare_spec() 
                self.state = 1227
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

            self.state = 1229 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1228
                self.timing_point_section()
                self.state = 1231 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ora2epasParser.AFTER or _la==ora2epasParser.BEFORE):
                    break

            self.state = 1233
            self.match(ora2epasParser.END)
            self.state = 1234
            self.trigger_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Timing_point_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bk = None # Token
            self.ak = None # Token

        def STATEMENT(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.STATEMENT)
            else:
                return self.getToken(ora2epasParser.STATEMENT, i)

        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def trigger_block(self):
            return self.getTypedRuleContext(ora2epasParser.Trigger_blockContext,0)


        def BEFORE(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.BEFORE)
            else:
                return self.getToken(ora2epasParser.BEFORE, i)

        def EACH(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.EACH)
            else:
                return self.getToken(ora2epasParser.EACH, i)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.ROW)
            else:
                return self.getToken(ora2epasParser.ROW, i)

        def AFTER(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.AFTER)
            else:
                return self.getToken(ora2epasParser.AFTER, i)

        def getRuleIndex(self):
            return ora2epasParser.RULE_timing_point_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTiming_point_section" ):
                listener.enterTiming_point_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTiming_point_section" ):
                listener.exitTiming_point_section(self)




    def timing_point_section(self):

        localctx = ora2epasParser.Timing_point_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_timing_point_section)
        try:
            self.state = 1272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1236
                localctx.bk = self.match(ora2epasParser.BEFORE)
                self.state = 1237
                self.match(ora2epasParser.STATEMENT)
                self.state = 1238
                self.match(ora2epasParser.IS)
                self.state = 1239
                self.trigger_block()
                self.state = 1240
                self.match(ora2epasParser.BEFORE)
                self.state = 1241
                self.match(ora2epasParser.STATEMENT)
                self.state = 1242
                self.match(ora2epasParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1244
                localctx.bk = self.match(ora2epasParser.BEFORE)
                self.state = 1245
                self.match(ora2epasParser.EACH)
                self.state = 1246
                self.match(ora2epasParser.ROW)
                self.state = 1247
                self.match(ora2epasParser.IS)
                self.state = 1248
                self.trigger_block()
                self.state = 1249
                self.match(ora2epasParser.BEFORE)
                self.state = 1250
                self.match(ora2epasParser.EACH)
                self.state = 1251
                self.match(ora2epasParser.ROW)
                self.state = 1252
                self.match(ora2epasParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1254
                localctx.ak = self.match(ora2epasParser.AFTER)
                self.state = 1255
                self.match(ora2epasParser.STATEMENT)
                self.state = 1256
                self.match(ora2epasParser.IS)
                self.state = 1257
                self.trigger_block()
                self.state = 1258
                self.match(ora2epasParser.AFTER)
                self.state = 1259
                self.match(ora2epasParser.STATEMENT)
                self.state = 1260
                self.match(ora2epasParser.SEMICOLON)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1262
                localctx.ak = self.match(ora2epasParser.AFTER)
                self.state = 1263
                self.match(ora2epasParser.EACH)
                self.state = 1264
                self.match(ora2epasParser.ROW)
                self.state = 1265
                self.match(ora2epasParser.IS)
                self.state = 1266
                self.trigger_block()
                self.state = 1267
                self.match(ora2epasParser.AFTER)
                self.state = 1268
                self.match(ora2epasParser.EACH)
                self.state = 1269
                self.match(ora2epasParser.ROW)
                self.state = 1270
                self.match(ora2epasParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_dml_eventContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(ora2epasParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(ora2epasParser.ANALYZE, 0)

        def ASSOCIATE(self):
            return self.getToken(ora2epasParser.ASSOCIATE, 0)

        def STATISTICS(self):
            return self.getToken(ora2epasParser.STATISTICS, 0)

        def AUDIT(self):
            return self.getToken(ora2epasParser.AUDIT, 0)

        def COMMENT(self):
            return self.getToken(ora2epasParser.COMMENT, 0)

        def CREATE(self):
            return self.getToken(ora2epasParser.CREATE, 0)

        def DISASSOCIATE(self):
            return self.getToken(ora2epasParser.DISASSOCIATE, 0)

        def DROP(self):
            return self.getToken(ora2epasParser.DROP, 0)

        def GRANT(self):
            return self.getToken(ora2epasParser.GRANT, 0)

        def NOAUDIT(self):
            return self.getToken(ora2epasParser.NOAUDIT, 0)

        def RENAME(self):
            return self.getToken(ora2epasParser.RENAME, 0)

        def REVOKE(self):
            return self.getToken(ora2epasParser.REVOKE, 0)

        def TRUNCATE(self):
            return self.getToken(ora2epasParser.TRUNCATE, 0)

        def DDL(self):
            return self.getToken(ora2epasParser.DDL, 0)

        def STARTUP(self):
            return self.getToken(ora2epasParser.STARTUP, 0)

        def SHUTDOWN(self):
            return self.getToken(ora2epasParser.SHUTDOWN, 0)

        def DB_ROLE_CHANGE(self):
            return self.getToken(ora2epasParser.DB_ROLE_CHANGE, 0)

        def LOGON(self):
            return self.getToken(ora2epasParser.LOGON, 0)

        def LOGOFF(self):
            return self.getToken(ora2epasParser.LOGOFF, 0)

        def SERVERERROR(self):
            return self.getToken(ora2epasParser.SERVERERROR, 0)

        def SUSPEND(self):
            return self.getToken(ora2epasParser.SUSPEND, 0)

        def DATABASE(self):
            return self.getToken(ora2epasParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(ora2epasParser.SCHEMA, 0)

        def FOLLOWS(self):
            return self.getToken(ora2epasParser.FOLLOWS, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_non_dml_event

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_dml_event" ):
                listener.enterNon_dml_event(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_dml_event" ):
                listener.exitNon_dml_event(self)




    def non_dml_event(self):

        localctx = ora2epasParser.Non_dml_eventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_non_dml_event)
        try:
            self.state = 1300
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.ALTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1274
                self.match(ora2epasParser.ALTER)
                pass
            elif token in [ora2epasParser.ANALYZE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1275
                self.match(ora2epasParser.ANALYZE)
                pass
            elif token in [ora2epasParser.ASSOCIATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1276
                self.match(ora2epasParser.ASSOCIATE)
                self.state = 1277
                self.match(ora2epasParser.STATISTICS)
                pass
            elif token in [ora2epasParser.AUDIT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1278
                self.match(ora2epasParser.AUDIT)
                pass
            elif token in [ora2epasParser.COMMENT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1279
                self.match(ora2epasParser.COMMENT)
                pass
            elif token in [ora2epasParser.CREATE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1280
                self.match(ora2epasParser.CREATE)
                pass
            elif token in [ora2epasParser.DISASSOCIATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1281
                self.match(ora2epasParser.DISASSOCIATE)
                self.state = 1282
                self.match(ora2epasParser.STATISTICS)
                pass
            elif token in [ora2epasParser.DROP]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1283
                self.match(ora2epasParser.DROP)
                pass
            elif token in [ora2epasParser.GRANT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1284
                self.match(ora2epasParser.GRANT)
                pass
            elif token in [ora2epasParser.NOAUDIT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1285
                self.match(ora2epasParser.NOAUDIT)
                pass
            elif token in [ora2epasParser.RENAME]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1286
                self.match(ora2epasParser.RENAME)
                pass
            elif token in [ora2epasParser.REVOKE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1287
                self.match(ora2epasParser.REVOKE)
                pass
            elif token in [ora2epasParser.TRUNCATE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1288
                self.match(ora2epasParser.TRUNCATE)
                pass
            elif token in [ora2epasParser.DDL]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1289
                self.match(ora2epasParser.DDL)
                pass
            elif token in [ora2epasParser.STARTUP]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1290
                self.match(ora2epasParser.STARTUP)
                pass
            elif token in [ora2epasParser.SHUTDOWN]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1291
                self.match(ora2epasParser.SHUTDOWN)
                pass
            elif token in [ora2epasParser.DB_ROLE_CHANGE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1292
                self.match(ora2epasParser.DB_ROLE_CHANGE)
                pass
            elif token in [ora2epasParser.LOGON]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1293
                self.match(ora2epasParser.LOGON)
                pass
            elif token in [ora2epasParser.LOGOFF]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1294
                self.match(ora2epasParser.LOGOFF)
                pass
            elif token in [ora2epasParser.SERVERERROR]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1295
                self.match(ora2epasParser.SERVERERROR)
                pass
            elif token in [ora2epasParser.SUSPEND]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1296
                self.match(ora2epasParser.SUSPEND)
                pass
            elif token in [ora2epasParser.DATABASE]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1297
                self.match(ora2epasParser.DATABASE)
                pass
            elif token in [ora2epasParser.SCHEMA]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1298
                self.match(ora2epasParser.SCHEMA)
                pass
            elif token in [ora2epasParser.FOLLOWS]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1299
                self.match(ora2epasParser.FOLLOWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_event_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_event_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Dml_event_elementContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Dml_event_elementContext,i)


        def ON(self):
            return self.getToken(ora2epasParser.ON, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(ora2epasParser.Tableview_nameContext,0)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.OR)
            else:
                return self.getToken(ora2epasParser.OR, i)

        def dml_event_nested_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Dml_event_nested_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_dml_event_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_event_clause" ):
                listener.enterDml_event_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_event_clause" ):
                listener.exitDml_event_clause(self)




    def dml_event_clause(self):

        localctx = ora2epasParser.Dml_event_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dml_event_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.dml_event_element()
            self.state = 1307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.OR:
                self.state = 1303
                self.match(ora2epasParser.OR)
                self.state = 1304
                self.dml_event_element()
                self.state = 1309
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1310
            self.match(ora2epasParser.ON)
            self.state = 1312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 1311
                self.dml_event_nested_clause()


            self.state = 1314
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_event_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(ora2epasParser.DELETE, 0)

        def INSERT(self):
            return self.getToken(ora2epasParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(ora2epasParser.UPDATE, 0)

        def OF(self):
            return self.getToken(ora2epasParser.OF, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_nameContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_dml_event_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_event_element" ):
                listener.enterDml_event_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_event_element" ):
                listener.exitDml_event_element(self)




    def dml_event_element(self):

        localctx = ora2epasParser.Dml_event_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dml_event_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.DELETE or _la==ora2epasParser.INSERT or _la==ora2epasParser.UPDATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.OF:
                self.state = 1317
                self.match(ora2epasParser.OF)
                self.state = 1318
                self.column_name()
                self.state = 1323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 1319
                    self.match(ora2epasParser.COMMA)
                    self.state = 1320
                    self.column_name()
                    self.state = 1325
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_event_nested_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NESTED(self):
            return self.getToken(ora2epasParser.NESTED, 0)

        def TABLE(self):
            return self.getToken(ora2epasParser.TABLE, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(ora2epasParser.Tableview_nameContext,0)


        def OF(self):
            return self.getToken(ora2epasParser.OF, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_dml_event_nested_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_event_nested_clause" ):
                listener.enterDml_event_nested_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_event_nested_clause" ):
                listener.exitDml_event_nested_clause(self)




    def dml_event_nested_clause(self):

        localctx = ora2epasParser.Dml_event_nested_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dml_event_nested_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1328
            self.match(ora2epasParser.NESTED)
            self.state = 1329
            self.match(ora2epasParser.TABLE)
            self.state = 1330
            self.tableview_name()
            self.state = 1331
            self.match(ora2epasParser.OF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Referencing_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCING(self):
            return self.getToken(ora2epasParser.REFERENCING, 0)

        def referencing_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Referencing_elementContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Referencing_elementContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_referencing_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferencing_clause" ):
                listener.enterReferencing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferencing_clause" ):
                listener.exitReferencing_clause(self)




    def referencing_clause(self):

        localctx = ora2epasParser.Referencing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_referencing_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1333
            self.match(ora2epasParser.REFERENCING)
            self.state = 1335 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1334
                    self.referencing_element()

                else:
                    raise NoViableAltException(self)
                self.state = 1337 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Referencing_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_alias(self):
            return self.getTypedRuleContext(ora2epasParser.Column_aliasContext,0)


        def NEW(self):
            return self.getToken(ora2epasParser.NEW, 0)

        def OLD(self):
            return self.getToken(ora2epasParser.OLD, 0)

        def PARENT(self):
            return self.getToken(ora2epasParser.PARENT, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_referencing_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferencing_element" ):
                listener.enterReferencing_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferencing_element" ):
                listener.exitReferencing_element(self)




    def referencing_element(self):

        localctx = ora2epasParser.Referencing_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_referencing_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1339
            _la = self._input.LA(1)
            if not(((((_la - 238)) & ~0x3f) == 0 and ((1 << (_la - 238)) & ((1 << (ora2epasParser.NEW - 238)) | (1 << (ora2epasParser.OLD - 238)) | (1 << (ora2epasParser.PARENT - 238)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1340
            self.column_alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(ora2epasParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(ora2epasParser.TYPE, 0)

        def type_definition(self):
            return self.getTypedRuleContext(ora2epasParser.Type_definitionContext,0)


        def type_body(self):
            return self.getTypedRuleContext(ora2epasParser.Type_bodyContext,0)


        def OR(self):
            return self.getToken(ora2epasParser.OR, 0)

        def REPLACE(self):
            return self.getToken(ora2epasParser.REPLACE, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_create_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type" ):
                listener.enterCreate_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type" ):
                listener.exitCreate_type(self)




    def create_type(self):

        localctx = ora2epasParser.Create_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_create_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1342
            self.match(ora2epasParser.CREATE)
            self.state = 1345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.OR:
                self.state = 1343
                self.match(ora2epasParser.OR)
                self.state = 1344
                self.match(ora2epasParser.REPLACE)


            self.state = 1347
            self.match(ora2epasParser.TYPE)
            self.state = 1350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 1348
                self.type_definition()
                pass

            elif la_ == 2:
                self.state = 1349
                self.type_body()
                pass


            self.state = 1352
            self.match(ora2epasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self):
            return self.getTypedRuleContext(ora2epasParser.Type_nameContext,0)


        def OID(self):
            return self.getToken(ora2epasParser.OID, 0)

        def CHAR_STRING(self):
            return self.getToken(ora2epasParser.CHAR_STRING, 0)

        def object_type_def(self):
            return self.getTypedRuleContext(ora2epasParser.Object_type_defContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_definition" ):
                listener.enterType_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_definition" ):
                listener.exitType_definition(self)




    def type_definition(self):

        localctx = ora2epasParser.Type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_type_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1354
            self.type_name()
            self.state = 1357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.OID:
                self.state = 1355
                self.match(ora2epasParser.OID)
                self.state = 1356
                self.match(ora2epasParser.CHAR_STRING)


            self.state = 1360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.AS or _la==ora2epasParser.AUTHID or _la==ora2epasParser.IS or _la==ora2epasParser.UNDER:
                self.state = 1359
                self.object_type_def()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_as_part(self):
            return self.getTypedRuleContext(ora2epasParser.Object_as_partContext,0)


        def object_under_part(self):
            return self.getTypedRuleContext(ora2epasParser.Object_under_partContext,0)


        def invoker_rights_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Invoker_rights_clauseContext,0)


        def sqlj_object_type(self):
            return self.getTypedRuleContext(ora2epasParser.Sqlj_object_typeContext,0)


        def object_member_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Object_member_specContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Object_member_specContext,i)


        def modifier_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Modifier_clauseContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Modifier_clauseContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_object_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type_def" ):
                listener.enterObject_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type_def" ):
                listener.exitObject_type_def(self)




    def object_type_def(self):

        localctx = ora2epasParser.Object_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_object_type_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.AUTHID:
                self.state = 1362
                self.invoker_rights_clause()


            self.state = 1367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.AS, ora2epasParser.IS]:
                self.state = 1365
                self.object_as_part()
                pass
            elif token in [ora2epasParser.UNDER]:
                self.state = 1366
                self.object_under_part()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.EXTERNAL:
                self.state = 1369
                self.sqlj_object_type()


            self.state = 1383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LEFT_PAREN:
                self.state = 1372
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 1373
                self.object_member_spec()
                self.state = 1378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 1374
                    self.match(ora2epasParser.COMMA)
                    self.state = 1375
                    self.object_member_spec()
                    self.state = 1380
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1381
                self.match(ora2epasParser.RIGHT_PAREN)


            self.state = 1388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.FINAL or _la==ora2epasParser.INSTANTIABLE or _la==ora2epasParser.NOT or _la==ora2epasParser.OVERRIDING:
                self.state = 1385
                self.modifier_clause()
                self.state = 1390
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_as_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def AS(self):
            return self.getToken(ora2epasParser.AS, 0)

        def OBJECT(self):
            return self.getToken(ora2epasParser.OBJECT, 0)

        def varray_type_def(self):
            return self.getTypedRuleContext(ora2epasParser.Varray_type_defContext,0)


        def nested_table_type_def(self):
            return self.getTypedRuleContext(ora2epasParser.Nested_table_type_defContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_object_as_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_as_part" ):
                listener.enterObject_as_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_as_part" ):
                listener.exitObject_as_part(self)




    def object_as_part(self):

        localctx = ora2epasParser.Object_as_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_object_as_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1391
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.AS or _la==ora2epasParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.OBJECT]:
                self.state = 1392
                self.match(ora2epasParser.OBJECT)
                pass
            elif token in [ora2epasParser.VARRAY, ora2epasParser.VARYING]:
                self.state = 1393
                self.varray_type_def()
                pass
            elif token in [ora2epasParser.TABLE]:
                self.state = 1394
                self.nested_table_type_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_under_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDER(self):
            return self.getToken(ora2epasParser.UNDER, 0)

        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_object_under_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_under_part" ):
                listener.enterObject_under_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_under_part" ):
                listener.exitObject_under_part(self)




    def object_under_part(self):

        localctx = ora2epasParser.Object_under_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_object_under_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1397
            self.match(ora2epasParser.UNDER)
            self.state = 1398
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nested_table_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(ora2epasParser.TABLE, 0)

        def OF(self):
            return self.getToken(ora2epasParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def NOT(self):
            return self.getToken(ora2epasParser.NOT, 0)

        def NULL(self):
            return self.getToken(ora2epasParser.NULL, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_nested_table_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNested_table_type_def" ):
                listener.enterNested_table_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNested_table_type_def" ):
                listener.exitNested_table_type_def(self)




    def nested_table_type_def(self):

        localctx = ora2epasParser.Nested_table_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_nested_table_type_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self.match(ora2epasParser.TABLE)
            self.state = 1401
            self.match(ora2epasParser.OF)
            self.state = 1402
            self.type_spec()
            self.state = 1405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 1403
                self.match(ora2epasParser.NOT)
                self.state = 1404
                self.match(ora2epasParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sqlj_object_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(ora2epasParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(ora2epasParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def LANGUAGE(self):
            return self.getToken(ora2epasParser.LANGUAGE, 0)

        def JAVA(self):
            return self.getToken(ora2epasParser.JAVA, 0)

        def USING(self):
            return self.getToken(ora2epasParser.USING, 0)

        def SQLDATA(self):
            return self.getToken(ora2epasParser.SQLDATA, 0)

        def CUSTOMDATUM(self):
            return self.getToken(ora2epasParser.CUSTOMDATUM, 0)

        def ORADATA(self):
            return self.getToken(ora2epasParser.ORADATA, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_sqlj_object_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlj_object_type" ):
                listener.enterSqlj_object_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlj_object_type" ):
                listener.exitSqlj_object_type(self)




    def sqlj_object_type(self):

        localctx = ora2epasParser.Sqlj_object_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_sqlj_object_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1407
            self.match(ora2epasParser.EXTERNAL)
            self.state = 1408
            self.match(ora2epasParser.NAME)
            self.state = 1409
            self.expression()
            self.state = 1410
            self.match(ora2epasParser.LANGUAGE)
            self.state = 1411
            self.match(ora2epasParser.JAVA)
            self.state = 1412
            self.match(ora2epasParser.USING)
            self.state = 1413
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.CUSTOMDATUM or _la==ora2epasParser.ORADATA or _la==ora2epasParser.SQLDATA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BODY(self):
            return self.getToken(ora2epasParser.BODY, 0)

        def type_name(self):
            return self.getTypedRuleContext(ora2epasParser.Type_nameContext,0)


        def END(self):
            return self.getToken(ora2epasParser.END, 0)

        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def AS(self):
            return self.getToken(ora2epasParser.AS, 0)

        def type_body_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Type_body_elementsContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Type_body_elementsContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_type_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_body" ):
                listener.enterType_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_body" ):
                listener.exitType_body(self)




    def type_body(self):

        localctx = ora2epasParser.Type_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_type_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1415
            self.match(ora2epasParser.BODY)
            self.state = 1416
            self.type_name()
            self.state = 1417
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.AS or _la==ora2epasParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1419 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1418
                self.type_body_elements()
                self.state = 1421 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & ((1 << (ora2epasParser.MAP - 214)) | (1 << (ora2epasParser.MEMBER - 214)) | (1 << (ora2epasParser.ORDER - 214)))) != 0) or _la==ora2epasParser.STATIC):
                    break

            self.state = 1423
            self.match(ora2epasParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_body_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def map_order_func_declaration(self):
            return self.getTypedRuleContext(ora2epasParser.Map_order_func_declarationContext,0)


        def subprog_decl_in_type(self):
            return self.getTypedRuleContext(ora2epasParser.Subprog_decl_in_typeContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_type_body_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_body_elements" ):
                listener.enterType_body_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_body_elements" ):
                listener.exitType_body_elements(self)




    def type_body_elements(self):

        localctx = ora2epasParser.Type_body_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_type_body_elements)
        try:
            self.state = 1427
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.MAP, ora2epasParser.ORDER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1425
                self.map_order_func_declaration()
                pass
            elif token in [ora2epasParser.MEMBER, ora2epasParser.STATIC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1426
                self.subprog_decl_in_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Map_order_func_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(ora2epasParser.MEMBER, 0)

        def func_decl_in_type(self):
            return self.getTypedRuleContext(ora2epasParser.Func_decl_in_typeContext,0)


        def MAP(self):
            return self.getToken(ora2epasParser.MAP, 0)

        def ORDER(self):
            return self.getToken(ora2epasParser.ORDER, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_map_order_func_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_order_func_declaration" ):
                listener.enterMap_order_func_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_order_func_declaration" ):
                listener.exitMap_order_func_declaration(self)




    def map_order_func_declaration(self):

        localctx = ora2epasParser.Map_order_func_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_map_order_func_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1429
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.MAP or _la==ora2epasParser.ORDER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1430
            self.match(ora2epasParser.MEMBER)
            self.state = 1431
            self.func_decl_in_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subprog_decl_in_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(ora2epasParser.MEMBER, 0)

        def STATIC(self):
            return self.getToken(ora2epasParser.STATIC, 0)

        def proc_decl_in_type(self):
            return self.getTypedRuleContext(ora2epasParser.Proc_decl_in_typeContext,0)


        def func_decl_in_type(self):
            return self.getTypedRuleContext(ora2epasParser.Func_decl_in_typeContext,0)


        def constructor_declaration(self):
            return self.getTypedRuleContext(ora2epasParser.Constructor_declarationContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_subprog_decl_in_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubprog_decl_in_type" ):
                listener.enterSubprog_decl_in_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubprog_decl_in_type" ):
                listener.exitSubprog_decl_in_type(self)




    def subprog_decl_in_type(self):

        localctx = ora2epasParser.Subprog_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_subprog_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.MEMBER or _la==ora2epasParser.STATIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1437
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.PROCEDURE]:
                self.state = 1434
                self.proc_decl_in_type()
                pass
            elif token in [ora2epasParser.FUNCTION]:
                self.state = 1435
                self.func_decl_in_type()
                pass
            elif token in [ora2epasParser.CONSTRUCTOR, ora2epasParser.FINAL, ora2epasParser.INSTANTIABLE]:
                self.state = 1436
                self.constructor_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Proc_decl_in_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(ora2epasParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(ora2epasParser.Procedure_nameContext,0)


        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Type_elements_parameterContext,i)


        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def AS(self):
            return self.getToken(ora2epasParser.AS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(ora2epasParser.BodyContext,0)


        def DECLARE(self):
            return self.getToken(ora2epasParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Declare_specContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_proc_decl_in_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProc_decl_in_type" ):
                listener.enterProc_decl_in_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProc_decl_in_type" ):
                listener.exitProc_decl_in_type(self)




    def proc_decl_in_type(self):

        localctx = ora2epasParser.Proc_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_proc_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            self.match(ora2epasParser.PROCEDURE)
            self.state = 1440
            self.procedure_name()
            self.state = 1441
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 1442
            self.type_elements_parameter()
            self.state = 1447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 1443
                self.match(ora2epasParser.COMMA)
                self.state = 1444
                self.type_elements_parameter()
                self.state = 1449
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1450
            self.match(ora2epasParser.RIGHT_PAREN)
            self.state = 1451
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.AS or _la==ora2epasParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 1452
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 1454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.DECLARE:
                    self.state = 1453
                    self.match(ora2epasParser.DECLARE)


                self.state = 1459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.PROCEDURE - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (ora2epasParser.DELIMITED_ID - 522)) | (1 << (ora2epasParser.INTRODUCER - 522)) | (1 << (ora2epasParser.REGULAR_ID - 522)))) != 0):
                    self.state = 1456
                    self.declare_spec()
                    self.state = 1461
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1462
                self.body()
                self.state = 1463
                self.match(ora2epasParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_decl_in_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(ora2epasParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(ora2epasParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(ora2epasParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def AS(self):
            return self.getToken(ora2epasParser.AS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(ora2epasParser.BodyContext,0)


        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Type_elements_parameterContext,i)


        def DECLARE(self):
            return self.getToken(ora2epasParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Declare_specContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_func_decl_in_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_decl_in_type" ):
                listener.enterFunc_decl_in_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_decl_in_type" ):
                listener.exitFunc_decl_in_type(self)




    def func_decl_in_type(self):

        localctx = ora2epasParser.Func_decl_in_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_func_decl_in_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1467
            self.match(ora2epasParser.FUNCTION)
            self.state = 1468
            self.function_name()
            self.state = 1480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LEFT_PAREN:
                self.state = 1469
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 1470
                self.type_elements_parameter()
                self.state = 1475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 1471
                    self.match(ora2epasParser.COMMA)
                    self.state = 1472
                    self.type_elements_parameter()
                    self.state = 1477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1478
                self.match(ora2epasParser.RIGHT_PAREN)


            self.state = 1482
            self.match(ora2epasParser.RETURN)
            self.state = 1483
            self.type_spec()
            self.state = 1484
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.AS or _la==ora2epasParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1498
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 1485
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 1487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.DECLARE:
                    self.state = 1486
                    self.match(ora2epasParser.DECLARE)


                self.state = 1492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.PROCEDURE - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (ora2epasParser.DELIMITED_ID - 522)) | (1 << (ora2epasParser.INTRODUCER - 522)) | (1 << (ora2epasParser.REGULAR_ID - 522)))) != 0):
                    self.state = 1489
                    self.declare_spec()
                    self.state = 1494
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1495
                self.body()
                self.state = 1496
                self.match(ora2epasParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(ora2epasParser.CONSTRUCTOR, 0)

        def FUNCTION(self):
            return self.getToken(ora2epasParser.FUNCTION, 0)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Type_specContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Type_specContext,i)


        def RETURN(self):
            return self.getToken(ora2epasParser.RETURN, 0)

        def SELF(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.SELF)
            else:
                return self.getToken(ora2epasParser.SELF, i)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.AS)
            else:
                return self.getToken(ora2epasParser.AS, i)

        def RESULT(self):
            return self.getToken(ora2epasParser.RESULT, 0)

        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def call_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Call_specContext,0)


        def body(self):
            return self.getTypedRuleContext(ora2epasParser.BodyContext,0)


        def FINAL(self):
            return self.getToken(ora2epasParser.FINAL, 0)

        def INSTANTIABLE(self):
            return self.getToken(ora2epasParser.INSTANTIABLE, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Type_elements_parameterContext,i)


        def IN(self):
            return self.getToken(ora2epasParser.IN, 0)

        def OUT(self):
            return self.getToken(ora2epasParser.OUT, 0)

        def DECLARE(self):
            return self.getToken(ora2epasParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Declare_specContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_constructor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_declaration" ):
                listener.enterConstructor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_declaration" ):
                listener.exitConstructor_declaration(self)




    def constructor_declaration(self):

        localctx = ora2epasParser.Constructor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_constructor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.FINAL:
                self.state = 1500
                self.match(ora2epasParser.FINAL)


            self.state = 1504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.INSTANTIABLE:
                self.state = 1503
                self.match(ora2epasParser.INSTANTIABLE)


            self.state = 1506
            self.match(ora2epasParser.CONSTRUCTOR)
            self.state = 1507
            self.match(ora2epasParser.FUNCTION)
            self.state = 1508
            self.type_spec()
            self.state = 1526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LEFT_PAREN:
                self.state = 1509
                self.match(ora2epasParser.LEFT_PAREN)

                self.state = 1510
                self.match(ora2epasParser.SELF)
                self.state = 1511
                self.match(ora2epasParser.IN)
                self.state = 1512
                self.match(ora2epasParser.OUT)
                self.state = 1513
                self.type_spec()
                self.state = 1514
                self.match(ora2epasParser.COMMA)
                self.state = 1516
                self.type_elements_parameter()
                self.state = 1521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 1517
                    self.match(ora2epasParser.COMMA)
                    self.state = 1518
                    self.type_elements_parameter()
                    self.state = 1523
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1524
                self.match(ora2epasParser.RIGHT_PAREN)


            self.state = 1528
            self.match(ora2epasParser.RETURN)
            self.state = 1529
            self.match(ora2epasParser.SELF)
            self.state = 1530
            self.match(ora2epasParser.AS)
            self.state = 1531
            self.match(ora2epasParser.RESULT)
            self.state = 1532
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.AS or _la==ora2epasParser.IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 1533
                self.call_spec()
                pass

            elif la_ == 2:
                self.state = 1535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.DECLARE:
                    self.state = 1534
                    self.match(ora2epasParser.DECLARE)


                self.state = 1540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.PROCEDURE - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (ora2epasParser.DELIMITED_ID - 522)) | (1 << (ora2epasParser.INTRODUCER - 522)) | (1 << (ora2epasParser.REGULAR_ID - 522)))) != 0):
                    self.state = 1537
                    self.declare_spec()
                    self.state = 1542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1543
                self.body()
                self.state = 1544
                self.match(ora2epasParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_viewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def view_name(self):
            return self.getTypedRuleContext(ora2epasParser.View_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_create_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view" ):
                listener.enterCreate_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view" ):
                listener.exitCreate_view(self)




    def create_view(self):

        localctx = ora2epasParser.Create_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_create_view)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1548
            self.view_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_materialized_viewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mview_name(self):
            return self.getTypedRuleContext(ora2epasParser.Mview_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_create_materialized_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_materialized_view" ):
                listener.enterCreate_materialized_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_materialized_view" ):
                listener.exitCreate_materialized_view(self)




    def create_materialized_view(self):

        localctx = ora2epasParser.Create_materialized_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_create_materialized_view)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1550
            self.mview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Modifier_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTANTIABLE(self):
            return self.getToken(ora2epasParser.INSTANTIABLE, 0)

        def FINAL(self):
            return self.getToken(ora2epasParser.FINAL, 0)

        def OVERRIDING(self):
            return self.getToken(ora2epasParser.OVERRIDING, 0)

        def NOT(self):
            return self.getToken(ora2epasParser.NOT, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_modifier_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier_clause" ):
                listener.enterModifier_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier_clause" ):
                listener.exitModifier_clause(self)




    def modifier_clause(self):

        localctx = ora2epasParser.Modifier_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_modifier_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.NOT:
                self.state = 1552
                self.match(ora2epasParser.NOT)


            self.state = 1555
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.FINAL or _la==ora2epasParser.INSTANTIABLE or _la==ora2epasParser.OVERRIDING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_member_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def sqlj_object_type_attr(self):
            return self.getTypedRuleContext(ora2epasParser.Sqlj_object_type_attrContext,0)


        def element_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Element_specContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_object_member_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_member_spec" ):
                listener.enterObject_member_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_member_spec" ):
                listener.exitObject_member_spec(self)




    def object_member_spec(self):

        localctx = ora2epasParser.Object_member_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_object_member_spec)
        self._la = 0 # Token type
        try:
            self.state = 1563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1557
                self.identifier()
                self.state = 1558
                self.type_spec()
                self.state = 1560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.EXTERNAL:
                    self.state = 1559
                    self.sqlj_object_type_attr()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1562
                self.element_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sqlj_object_type_attrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(ora2epasParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(ora2epasParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_sqlj_object_type_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlj_object_type_attr" ):
                listener.enterSqlj_object_type_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlj_object_type_attr" ):
                listener.exitSqlj_object_type_attr(self)




    def sqlj_object_type_attr(self):

        localctx = ora2epasParser.Sqlj_object_type_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_sqlj_object_type_attr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1565
            self.match(ora2epasParser.EXTERNAL)
            self.state = 1566
            self.match(ora2epasParser.NAME)
            self.state = 1567
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifier_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Modifier_clauseContext,0)


        def element_spec_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Element_spec_optionsContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Element_spec_optionsContext,i)


        def pragma_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Pragma_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_element_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_spec" ):
                listener.enterElement_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_spec" ):
                listener.exitElement_spec(self)




    def element_spec(self):

        localctx = ora2epasParser.Element_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_element_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 1569
                self.modifier_clause()


            self.state = 1573 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1572
                self.element_spec_options()
                self.state = 1575 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ora2epasParser.CONSTRUCTOR or _la==ora2epasParser.FINAL or _la==ora2epasParser.INSTANTIABLE or ((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & ((1 << (ora2epasParser.MAP - 214)) | (1 << (ora2epasParser.MEMBER - 214)) | (1 << (ora2epasParser.ORDER - 214)))) != 0) or _la==ora2epasParser.STATIC):
                    break

            self.state = 1579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 1577
                self.match(ora2epasParser.COMMA)
                self.state = 1578
                self.pragma_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Element_spec_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subprogram_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Subprogram_specContext,0)


        def constructor_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Constructor_specContext,0)


        def map_order_function_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Map_order_function_specContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_element_spec_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_spec_options" ):
                listener.enterElement_spec_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_spec_options" ):
                listener.exitElement_spec_options(self)




    def element_spec_options(self):

        localctx = ora2epasParser.Element_spec_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_element_spec_options)
        try:
            self.state = 1584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.MEMBER, ora2epasParser.STATIC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1581
                self.subprogram_spec()
                pass
            elif token in [ora2epasParser.CONSTRUCTOR, ora2epasParser.FINAL, ora2epasParser.INSTANTIABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1582
                self.constructor_spec()
                pass
            elif token in [ora2epasParser.MAP, ora2epasParser.ORDER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1583
                self.map_order_function_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subprogram_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(ora2epasParser.MEMBER, 0)

        def STATIC(self):
            return self.getToken(ora2epasParser.STATIC, 0)

        def type_procedure_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_procedure_specContext,0)


        def type_function_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_function_specContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_subprogram_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubprogram_spec" ):
                listener.enterSubprogram_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubprogram_spec" ):
                listener.exitSubprogram_spec(self)




    def subprogram_spec(self):

        localctx = ora2epasParser.Subprogram_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_subprogram_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1586
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.MEMBER or _la==ora2epasParser.STATIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1589
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.PROCEDURE]:
                self.state = 1587
                self.type_procedure_spec()
                pass
            elif token in [ora2epasParser.FUNCTION]:
                self.state = 1588
                self.type_function_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_procedure_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(ora2epasParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(ora2epasParser.Procedure_nameContext,0)


        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Type_elements_parameterContext,i)


        def call_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Call_specContext,0)


        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def AS(self):
            return self.getToken(ora2epasParser.AS, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_type_procedure_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_procedure_spec" ):
                listener.enterType_procedure_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_procedure_spec" ):
                listener.exitType_procedure_spec(self)




    def type_procedure_spec(self):

        localctx = ora2epasParser.Type_procedure_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_type_procedure_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1591
            self.match(ora2epasParser.PROCEDURE)
            self.state = 1592
            self.procedure_name()
            self.state = 1593
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 1594
            self.type_elements_parameter()
            self.state = 1599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 1595
                self.match(ora2epasParser.COMMA)
                self.state = 1596
                self.type_elements_parameter()
                self.state = 1601
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1602
            self.match(ora2epasParser.RIGHT_PAREN)
            self.state = 1605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.AS or _la==ora2epasParser.IS:
                self.state = 1603
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.AS or _la==ora2epasParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1604
                self.call_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_function_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(ora2epasParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(ora2epasParser.Function_nameContext,0)


        def RETURN(self):
            return self.getToken(ora2epasParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def SELF(self):
            return self.getToken(ora2epasParser.SELF, 0)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.AS)
            else:
                return self.getToken(ora2epasParser.AS, i)

        def RESULT(self):
            return self.getToken(ora2epasParser.RESULT, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Type_elements_parameterContext,i)


        def call_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Call_specContext,0)


        def EXTERNAL(self):
            return self.getToken(ora2epasParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(ora2epasParser.NAME, 0)

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def VARIABLE(self):
            return self.getToken(ora2epasParser.VARIABLE, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_type_function_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_function_spec" ):
                listener.enterType_function_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_function_spec" ):
                listener.exitType_function_spec(self)




    def type_function_spec(self):

        localctx = ora2epasParser.Type_function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_type_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1607
            self.match(ora2epasParser.FUNCTION)
            self.state = 1608
            self.function_name()
            self.state = 1620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LEFT_PAREN:
                self.state = 1609
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 1610
                self.type_elements_parameter()
                self.state = 1615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 1611
                    self.match(ora2epasParser.COMMA)
                    self.state = 1612
                    self.type_elements_parameter()
                    self.state = 1617
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1618
                self.match(ora2epasParser.RIGHT_PAREN)


            self.state = 1622
            self.match(ora2epasParser.RETURN)
            self.state = 1627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1623
                self.type_spec()
                pass

            elif la_ == 2:
                self.state = 1624
                self.match(ora2epasParser.SELF)
                self.state = 1625
                self.match(ora2epasParser.AS)
                self.state = 1626
                self.match(ora2epasParser.RESULT)
                pass


            self.state = 1637
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.AS, ora2epasParser.IS]:
                self.state = 1629
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.AS or _la==ora2epasParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1630
                self.call_spec()
                pass
            elif token in [ora2epasParser.EXTERNAL]:
                self.state = 1631
                self.match(ora2epasParser.EXTERNAL)
                self.state = 1633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.VARIABLE:
                    self.state = 1632
                    self.match(ora2epasParser.VARIABLE)


                self.state = 1635
                self.match(ora2epasParser.NAME)
                self.state = 1636
                self.expression()
                pass
            elif token in [ora2epasParser.CONSTRUCTOR, ora2epasParser.FINAL, ora2epasParser.INSTANTIABLE, ora2epasParser.MAP, ora2epasParser.MEMBER, ora2epasParser.ORDER, ora2epasParser.STATIC, ora2epasParser.RIGHT_PAREN, ora2epasParser.COMMA]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constructor_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(ora2epasParser.CONSTRUCTOR, 0)

        def FUNCTION(self):
            return self.getToken(ora2epasParser.FUNCTION, 0)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Type_specContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Type_specContext,i)


        def RETURN(self):
            return self.getToken(ora2epasParser.RETURN, 0)

        def SELF(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.SELF)
            else:
                return self.getToken(ora2epasParser.SELF, i)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.AS)
            else:
                return self.getToken(ora2epasParser.AS, i)

        def RESULT(self):
            return self.getToken(ora2epasParser.RESULT, 0)

        def FINAL(self):
            return self.getToken(ora2epasParser.FINAL, 0)

        def INSTANTIABLE(self):
            return self.getToken(ora2epasParser.INSTANTIABLE, 0)

        def type_elements_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Type_elements_parameterContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Type_elements_parameterContext,i)


        def call_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Call_specContext,0)


        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def IN(self):
            return self.getToken(ora2epasParser.IN, 0)

        def OUT(self):
            return self.getToken(ora2epasParser.OUT, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_constructor_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructor_spec" ):
                listener.enterConstructor_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructor_spec" ):
                listener.exitConstructor_spec(self)




    def constructor_spec(self):

        localctx = ora2epasParser.Constructor_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_constructor_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.FINAL:
                self.state = 1639
                self.match(ora2epasParser.FINAL)


            self.state = 1643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.INSTANTIABLE:
                self.state = 1642
                self.match(ora2epasParser.INSTANTIABLE)


            self.state = 1645
            self.match(ora2epasParser.CONSTRUCTOR)
            self.state = 1646
            self.match(ora2epasParser.FUNCTION)
            self.state = 1647
            self.type_spec()
            self.state = 1665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LEFT_PAREN:
                self.state = 1648
                self.match(ora2epasParser.LEFT_PAREN)

                self.state = 1649
                self.match(ora2epasParser.SELF)
                self.state = 1650
                self.match(ora2epasParser.IN)
                self.state = 1651
                self.match(ora2epasParser.OUT)
                self.state = 1652
                self.type_spec()
                self.state = 1653
                self.match(ora2epasParser.COMMA)
                self.state = 1655
                self.type_elements_parameter()
                self.state = 1660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 1656
                    self.match(ora2epasParser.COMMA)
                    self.state = 1657
                    self.type_elements_parameter()
                    self.state = 1662
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1663
                self.match(ora2epasParser.RIGHT_PAREN)


            self.state = 1667
            self.match(ora2epasParser.RETURN)
            self.state = 1668
            self.match(ora2epasParser.SELF)
            self.state = 1669
            self.match(ora2epasParser.AS)
            self.state = 1670
            self.match(ora2epasParser.RESULT)
            self.state = 1673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.AS or _la==ora2epasParser.IS:
                self.state = 1671
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.AS or _la==ora2epasParser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1672
                self.call_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Map_order_function_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(ora2epasParser.MEMBER, 0)

        def type_function_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_function_specContext,0)


        def MAP(self):
            return self.getToken(ora2epasParser.MAP, 0)

        def ORDER(self):
            return self.getToken(ora2epasParser.ORDER, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_map_order_function_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_order_function_spec" ):
                listener.enterMap_order_function_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_order_function_spec" ):
                listener.exitMap_order_function_spec(self)




    def map_order_function_spec(self):

        localctx = ora2epasParser.Map_order_function_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_map_order_function_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1675
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.MAP or _la==ora2epasParser.ORDER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1676
            self.match(ora2epasParser.MEMBER)
            self.state = 1677
            self.type_function_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA(self):
            return self.getToken(ora2epasParser.PRAGMA, 0)

        def RESTRICT_REFERENCES(self):
            return self.getToken(ora2epasParser.RESTRICT_REFERENCES, 0)

        def pragma_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Pragma_elementsContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Pragma_elementsContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_pragma_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_clause" ):
                listener.enterPragma_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_clause" ):
                listener.exitPragma_clause(self)




    def pragma_clause(self):

        localctx = ora2epasParser.Pragma_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_pragma_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1679
            self.match(ora2epasParser.PRAGMA)
            self.state = 1680
            self.match(ora2epasParser.RESTRICT_REFERENCES)
            self.state = 1681
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 1682
            self.pragma_elements()
            self.state = 1687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 1683
                self.match(ora2epasParser.COMMA)
                self.state = 1684
                self.pragma_elements()
                self.state = 1689
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1690
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def DEFAULT(self):
            return self.getToken(ora2epasParser.DEFAULT, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_pragma_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_elements" ):
                listener.enterPragma_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_elements" ):
                listener.exitPragma_elements(self)




    def pragma_elements(self):

        localctx = ora2epasParser.Pragma_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_pragma_elements)
        try:
            self.state = 1694
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1692
                self.identifier()
                pass
            elif token in [ora2epasParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1693
                self.match(ora2epasParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_elements_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(ora2epasParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_type_elements_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_elements_parameter" ):
                listener.enterType_elements_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_elements_parameter" ):
                listener.exitType_elements_parameter(self)




    def type_elements_parameter(self):

        localctx = ora2epasParser.Type_elements_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_type_elements_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1696
            self.parameter_name()
            self.state = 1697
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_sequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(ora2epasParser.CREATE, 0)

        def SEQUENCE(self):
            return self.getToken(ora2epasParser.SEQUENCE, 0)

        def sequence_name(self):
            return self.getTypedRuleContext(ora2epasParser.Sequence_nameContext,0)


        def sequence_start_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Sequence_start_clauseContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Sequence_start_clauseContext,i)


        def sequence_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Sequence_specContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Sequence_specContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_create_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_sequence" ):
                listener.enterCreate_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_sequence" ):
                listener.exitCreate_sequence(self)




    def create_sequence(self):

        localctx = ora2epasParser.Create_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_create_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1699
            self.match(ora2epasParser.CREATE)
            self.state = 1700
            self.match(ora2epasParser.SEQUENCE)
            self.state = 1701
            self.sequence_name()
            self.state = 1706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.CACHE or _la==ora2epasParser.CYCLE or ((((_la - 168)) & ~0x3f) == 0 and ((1 << (_la - 168)) & ((1 << (ora2epasParser.INCREMENT - 168)) | (1 << (ora2epasParser.MAXVALUE - 168)) | (1 << (ora2epasParser.MINVALUE - 168)))) != 0) or ((((_la - 241)) & ~0x3f) == 0 and ((1 << (_la - 241)) & ((1 << (ora2epasParser.NOCACHE - 241)) | (1 << (ora2epasParser.NOCYCLE - 241)) | (1 << (ora2epasParser.NOMAXVALUE - 241)) | (1 << (ora2epasParser.NOMINVALUE - 241)) | (1 << (ora2epasParser.NOORDER - 241)) | (1 << (ora2epasParser.ORDER - 241)))) != 0) or _la==ora2epasParser.START:
                self.state = 1704
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ora2epasParser.START]:
                    self.state = 1702
                    self.sequence_start_clause()
                    pass
                elif token in [ora2epasParser.CACHE, ora2epasParser.CYCLE, ora2epasParser.INCREMENT, ora2epasParser.MAXVALUE, ora2epasParser.MINVALUE, ora2epasParser.NOCACHE, ora2epasParser.NOCYCLE, ora2epasParser.NOMAXVALUE, ora2epasParser.NOMINVALUE, ora2epasParser.NOORDER, ora2epasParser.ORDER]:
                    self.state = 1703
                    self.sequence_spec()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1708
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1709
            self.match(ora2epasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sequence_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCREMENT(self):
            return self.getToken(ora2epasParser.INCREMENT, 0)

        def BY(self):
            return self.getToken(ora2epasParser.BY, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(ora2epasParser.UNSIGNED_INTEGER, 0)

        def MAXVALUE(self):
            return self.getToken(ora2epasParser.MAXVALUE, 0)

        def NOMAXVALUE(self):
            return self.getToken(ora2epasParser.NOMAXVALUE, 0)

        def MINVALUE(self):
            return self.getToken(ora2epasParser.MINVALUE, 0)

        def NOMINVALUE(self):
            return self.getToken(ora2epasParser.NOMINVALUE, 0)

        def CYCLE(self):
            return self.getToken(ora2epasParser.CYCLE, 0)

        def NOCYCLE(self):
            return self.getToken(ora2epasParser.NOCYCLE, 0)

        def CACHE(self):
            return self.getToken(ora2epasParser.CACHE, 0)

        def NOCACHE(self):
            return self.getToken(ora2epasParser.NOCACHE, 0)

        def ORDER(self):
            return self.getToken(ora2epasParser.ORDER, 0)

        def NOORDER(self):
            return self.getToken(ora2epasParser.NOORDER, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_sequence_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_spec" ):
                listener.enterSequence_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_spec" ):
                listener.exitSequence_spec(self)




    def sequence_spec(self):

        localctx = ora2epasParser.Sequence_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_sequence_spec)
        try:
            self.state = 1727
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.INCREMENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1711
                self.match(ora2epasParser.INCREMENT)
                self.state = 1712
                self.match(ora2epasParser.BY)
                self.state = 1713
                self.match(ora2epasParser.UNSIGNED_INTEGER)
                pass
            elif token in [ora2epasParser.MAXVALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1714
                self.match(ora2epasParser.MAXVALUE)
                self.state = 1715
                self.match(ora2epasParser.UNSIGNED_INTEGER)
                pass
            elif token in [ora2epasParser.NOMAXVALUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1716
                self.match(ora2epasParser.NOMAXVALUE)
                pass
            elif token in [ora2epasParser.MINVALUE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1717
                self.match(ora2epasParser.MINVALUE)
                self.state = 1718
                self.match(ora2epasParser.UNSIGNED_INTEGER)
                pass
            elif token in [ora2epasParser.NOMINVALUE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1719
                self.match(ora2epasParser.NOMINVALUE)
                pass
            elif token in [ora2epasParser.CYCLE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1720
                self.match(ora2epasParser.CYCLE)
                pass
            elif token in [ora2epasParser.NOCYCLE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1721
                self.match(ora2epasParser.NOCYCLE)
                pass
            elif token in [ora2epasParser.CACHE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1722
                self.match(ora2epasParser.CACHE)
                self.state = 1723
                self.match(ora2epasParser.UNSIGNED_INTEGER)
                pass
            elif token in [ora2epasParser.NOCACHE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1724
                self.match(ora2epasParser.NOCACHE)
                pass
            elif token in [ora2epasParser.ORDER]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1725
                self.match(ora2epasParser.ORDER)
                pass
            elif token in [ora2epasParser.NOORDER]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1726
                self.match(ora2epasParser.NOORDER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sequence_start_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(ora2epasParser.START, 0)

        def WITH(self):
            return self.getToken(ora2epasParser.WITH, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(ora2epasParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_sequence_start_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_start_clause" ):
                listener.enterSequence_start_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_start_clause" ):
                listener.exitSequence_start_clause(self)




    def sequence_start_clause(self):

        localctx = ora2epasParser.Sequence_start_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_sequence_start_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1729
            self.match(ora2epasParser.START)
            self.state = 1730
            self.match(ora2epasParser.WITH)
            self.state = 1731
            self.match(ora2epasParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(ora2epasParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(ora2epasParser.TABLE, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(ora2epasParser.Tableview_nameContext,0)


        def LEFT_PAREN(self):
            return self.getToken(ora2epasParser.LEFT_PAREN, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_nameContext,i)


        def datatype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.DatatypeContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.DatatypeContext,i)


        def RIGHT_PAREN(self):
            return self.getToken(ora2epasParser.RIGHT_PAREN, 0)

        def SEMICOLON(self):
            return self.getToken(ora2epasParser.SEMICOLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.COMMA)
            else:
                return self.getToken(ora2epasParser.COMMA, i)

        def getRuleIndex(self):
            return ora2epasParser.RULE_create_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table" ):
                listener.enterCreate_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table" ):
                listener.exitCreate_table(self)




    def create_table(self):

        localctx = ora2epasParser.Create_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_create_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1733
            self.match(ora2epasParser.CREATE)
            self.state = 1734
            self.match(ora2epasParser.TABLE)
            self.state = 1735
            self.tableview_name()
            self.state = 1736
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 1737
            self.column_name()
            self.state = 1738
            self.datatype()
            self.state = 1745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 1739
                self.match(ora2epasParser.COMMA)
                self.state = 1740
                self.column_name()
                self.state = 1741
                self.datatype()
                self.state = 1747
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1748
            self.match(ora2epasParser.RIGHT_PAREN)
            self.state = 1749
            self.match(ora2epasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comment_on_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(ora2epasParser.COMMENT, 0)

        def ON(self):
            return self.getToken(ora2epasParser.ON, 0)

        def COLUMN(self):
            return self.getToken(ora2epasParser.COLUMN, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(ora2epasParser.Tableview_nameContext,0)


        def PERIOD(self):
            return self.getToken(ora2epasParser.PERIOD, 0)

        def column_name(self):
            return self.getTypedRuleContext(ora2epasParser.Column_nameContext,0)


        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(ora2epasParser.Quoted_stringContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_comment_on_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment_on_column" ):
                listener.enterComment_on_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment_on_column" ):
                listener.exitComment_on_column(self)




    def comment_on_column(self):

        localctx = ora2epasParser.Comment_on_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_comment_on_column)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1751
            self.match(ora2epasParser.COMMENT)
            self.state = 1752
            self.match(ora2epasParser.ON)
            self.state = 1753
            self.match(ora2epasParser.COLUMN)
            self.state = 1754
            self.tableview_name()
            self.state = 1755
            self.match(ora2epasParser.PERIOD)
            self.state = 1756
            self.column_name()
            self.state = 1757
            self.match(ora2epasParser.IS)
            self.state = 1758
            self.quoted_string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_synonymContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(ora2epasParser.CREATE, 0)

        def PUBLIC(self):
            return self.getToken(ora2epasParser.PUBLIC, 0)

        def SYNONYM(self):
            return self.getToken(ora2epasParser.SYNONYM, 0)

        def synonym_name(self):
            return self.getTypedRuleContext(ora2epasParser.Synonym_nameContext,0)


        def FOR(self):
            return self.getToken(ora2epasParser.FOR, 0)

        def schema_object_name(self):
            return self.getTypedRuleContext(ora2epasParser.Schema_object_nameContext,0)


        def OR(self):
            return self.getToken(ora2epasParser.OR, 0)

        def REPLACE(self):
            return self.getToken(ora2epasParser.REPLACE, 0)

        def schema_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Schema_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Schema_nameContext,i)


        def PERIOD(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.PERIOD)
            else:
                return self.getToken(ora2epasParser.PERIOD, i)

        def AT_SIGN(self):
            return self.getToken(ora2epasParser.AT_SIGN, 0)

        def link_name(self):
            return self.getTypedRuleContext(ora2epasParser.Link_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_create_synonym

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_synonym" ):
                listener.enterCreate_synonym(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_synonym" ):
                listener.exitCreate_synonym(self)




    def create_synonym(self):

        localctx = ora2epasParser.Create_synonymContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_create_synonym)
        self._la = 0 # Token type
        try:
            self.state = 1802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1760
                self.match(ora2epasParser.CREATE)
                self.state = 1763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.OR:
                    self.state = 1761
                    self.match(ora2epasParser.OR)
                    self.state = 1762
                    self.match(ora2epasParser.REPLACE)


                self.state = 1765
                self.match(ora2epasParser.PUBLIC)
                self.state = 1766
                self.match(ora2epasParser.SYNONYM)
                self.state = 1767
                self.synonym_name()
                self.state = 1768
                self.match(ora2epasParser.FOR)
                self.state = 1772
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 1769
                    self.schema_name()
                    self.state = 1770
                    self.match(ora2epasParser.PERIOD)


                self.state = 1774
                self.schema_object_name()
                self.state = 1777
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1775
                    self.match(ora2epasParser.AT_SIGN)
                    self.state = 1776
                    self.link_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1779
                self.match(ora2epasParser.CREATE)
                self.state = 1782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.OR:
                    self.state = 1780
                    self.match(ora2epasParser.OR)
                    self.state = 1781
                    self.match(ora2epasParser.REPLACE)


                self.state = 1784
                self.match(ora2epasParser.SYNONYM)
                self.state = 1788
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                if la_ == 1:
                    self.state = 1785
                    self.schema_name()
                    self.state = 1786
                    self.match(ora2epasParser.PERIOD)


                self.state = 1790
                self.synonym_name()
                self.state = 1791
                self.match(ora2epasParser.FOR)
                self.state = 1795
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                if la_ == 1:
                    self.state = 1792
                    self.schema_name()
                    self.state = 1793
                    self.match(ora2epasParser.PERIOD)


                self.state = 1797
                self.schema_object_name()
                self.state = 1800
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                if la_ == 1:
                    self.state = 1798
                    self.match(ora2epasParser.AT_SIGN)
                    self.state = 1799
                    self.link_name()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comment_on_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(ora2epasParser.COMMENT, 0)

        def ON(self):
            return self.getToken(ora2epasParser.ON, 0)

        def TABLE(self):
            return self.getToken(ora2epasParser.TABLE, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(ora2epasParser.Tableview_nameContext,0)


        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(ora2epasParser.Quoted_stringContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_comment_on_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment_on_table" ):
                listener.enterComment_on_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment_on_table" ):
                listener.exitComment_on_table(self)




    def comment_on_table(self):

        localctx = ora2epasParser.Comment_on_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_comment_on_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1804
            self.match(ora2epasParser.COMMENT)
            self.state = 1805
            self.match(ora2epasParser.ON)
            self.state = 1806
            self.match(ora2epasParser.TABLE)
            self.state = 1807
            self.tableview_name()
            self.state = 1808
            self.match(ora2epasParser.IS)
            self.state = 1809
            self.quoted_string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Anonymous_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(ora2epasParser.BEGIN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(ora2epasParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(ora2epasParser.END, 0)

        def SEMICOLON(self):
            return self.getToken(ora2epasParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_anonymous_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymous_block" ):
                listener.enterAnonymous_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymous_block" ):
                listener.exitAnonymous_block(self)




    def anonymous_block(self):

        localctx = ora2epasParser.Anonymous_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_anonymous_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1811
            self.match(ora2epasParser.BEGIN)
            self.state = 1812
            self.seq_of_statements()
            self.state = 1813
            self.match(ora2epasParser.END)
            self.state = 1814
            self.match(ora2epasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Invoker_rights_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHID(self):
            return self.getToken(ora2epasParser.AUTHID, 0)

        def CURRENT_USER(self):
            return self.getToken(ora2epasParser.CURRENT_USER, 0)

        def DEFINER(self):
            return self.getToken(ora2epasParser.DEFINER, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_invoker_rights_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvoker_rights_clause" ):
                listener.enterInvoker_rights_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvoker_rights_clause" ):
                listener.exitInvoker_rights_clause(self)




    def invoker_rights_clause(self):

        localctx = ora2epasParser.Invoker_rights_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_invoker_rights_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1816
            self.match(ora2epasParser.AUTHID)
            self.state = 1817
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.CURRENT_USER or _la==ora2epasParser.DEFINER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compiler_parameters_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_compiler_parameters_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompiler_parameters_clause" ):
                listener.enterCompiler_parameters_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompiler_parameters_clause" ):
                listener.exitCompiler_parameters_clause(self)




    def compiler_parameters_clause(self):

        localctx = ora2epasParser.Compiler_parameters_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_compiler_parameters_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1819
            self.identifier()
            self.state = 1820
            self.match(ora2epasParser.EQUALS_OP)
            self.state = 1821
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Call_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGUAGE(self):
            return self.getToken(ora2epasParser.LANGUAGE, 0)

        def java_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Java_specContext,0)


        def c_spec(self):
            return self.getTypedRuleContext(ora2epasParser.C_specContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_call_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall_spec" ):
                listener.enterCall_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall_spec" ):
                listener.exitCall_spec(self)




    def call_spec(self):

        localctx = ora2epasParser.Call_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_call_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1823
            self.match(ora2epasParser.LANGUAGE)
            self.state = 1826
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.JAVA]:
                self.state = 1824
                self.java_spec()
                pass
            elif token in [ora2epasParser.C_LETTER]:
                self.state = 1825
                self.c_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Java_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JAVA(self):
            return self.getToken(ora2epasParser.JAVA, 0)

        def NAME(self):
            return self.getToken(ora2epasParser.NAME, 0)

        def CHAR_STRING(self):
            return self.getToken(ora2epasParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_java_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJava_spec" ):
                listener.enterJava_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJava_spec" ):
                listener.exitJava_spec(self)




    def java_spec(self):

        localctx = ora2epasParser.Java_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_java_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1828
            self.match(ora2epasParser.JAVA)
            self.state = 1829
            self.match(ora2epasParser.NAME)
            self.state = 1830
            self.match(ora2epasParser.CHAR_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class C_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def C_LETTER(self):
            return self.getToken(ora2epasParser.C_LETTER, 0)

        def LIBRARY(self):
            return self.getToken(ora2epasParser.LIBRARY, 0)

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def NAME(self):
            return self.getToken(ora2epasParser.NAME, 0)

        def CHAR_STRING(self):
            return self.getToken(ora2epasParser.CHAR_STRING, 0)

        def c_agent_in_clause(self):
            return self.getTypedRuleContext(ora2epasParser.C_agent_in_clauseContext,0)


        def WITH(self):
            return self.getToken(ora2epasParser.WITH, 0)

        def CONTEXT(self):
            return self.getToken(ora2epasParser.CONTEXT, 0)

        def c_parameters_clause(self):
            return self.getTypedRuleContext(ora2epasParser.C_parameters_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_c_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_spec" ):
                listener.enterC_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_spec" ):
                listener.exitC_spec(self)




    def c_spec(self):

        localctx = ora2epasParser.C_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_c_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1832
            self.match(ora2epasParser.C_LETTER)
            self.state = 1835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.NAME:
                self.state = 1833
                self.match(ora2epasParser.NAME)
                self.state = 1834
                self.match(ora2epasParser.CHAR_STRING)


            self.state = 1837
            self.match(ora2epasParser.LIBRARY)
            self.state = 1838
            self.identifier()
            self.state = 1840
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1839
                self.c_agent_in_clause()


            self.state = 1844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1842
                self.match(ora2epasParser.WITH)
                self.state = 1843
                self.match(ora2epasParser.CONTEXT)


            self.state = 1847
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.state = 1846
                self.c_parameters_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class C_agent_in_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AGENT(self):
            return self.getToken(ora2epasParser.AGENT, 0)

        def IN(self):
            return self.getToken(ora2epasParser.IN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ExpressionContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_c_agent_in_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_agent_in_clause" ):
                listener.enterC_agent_in_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_agent_in_clause" ):
                listener.exitC_agent_in_clause(self)




    def c_agent_in_clause(self):

        localctx = ora2epasParser.C_agent_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_c_agent_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1849
            self.match(ora2epasParser.AGENT)
            self.state = 1850
            self.match(ora2epasParser.IN)
            self.state = 1851
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 1852
            self.expression()
            self.state = 1857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 1853
                self.match(ora2epasParser.COMMA)
                self.state = 1854
                self.expression()
                self.state = 1859
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1860
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class C_parameters_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETERS(self):
            return self.getToken(ora2epasParser.PARAMETERS, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ExpressionContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_c_parameters_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterC_parameters_clause" ):
                listener.enterC_parameters_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitC_parameters_clause" ):
                listener.exitC_parameters_clause(self)




    def c_parameters_clause(self):

        localctx = ora2epasParser.C_parameters_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_c_parameters_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1862
            self.match(ora2epasParser.PARAMETERS)
            self.state = 1863
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 1875
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ALL, ora2epasParser.ANALYZE, ora2epasParser.ANY, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CASE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COALESCE, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONNECT_BY_ROOT, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DATE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DISTINCT, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXISTS, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FALSE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NOT, ora2epasParser.NULL, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.PRIOR, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUE, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.DECODE, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.NVL, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROUND, ora2epasParser.ROW_NUMBER, ora2epasParser.SUBSTR, ora2epasParser.TO_CHAR, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.NATIONAL_CHAR_STRING_LIT, ora2epasParser.UNSIGNED_INTEGER, ora2epasParser.APPROXIMATE_NUM_LIT, ora2epasParser.CHAR_STRING, ora2epasParser.DELIMITED_ID, ora2epasParser.LEFT_PAREN, ora2epasParser.PLUS_SIGN, ora2epasParser.MINUS_SIGN, ora2epasParser.BINDVAR, ora2epasParser.COLON, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.state = 1864
                self.expression()
                self.state = 1869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 1865
                    self.match(ora2epasParser.COMMA)
                    self.state = 1866
                    self.expression()
                    self.state = 1871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [ora2epasParser.PERIOD]:
                self.state = 1872
                self.match(ora2epasParser.PERIOD)
                self.state = 1873
                self.match(ora2epasParser.PERIOD)
                self.state = 1874
                self.match(ora2epasParser.PERIOD)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1877
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(ora2epasParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def default_value_part(self):
            return self.getTypedRuleContext(ora2epasParser.Default_value_partContext,0)


        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.IN)
            else:
                return self.getToken(ora2epasParser.IN, i)

        def OUT(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.OUT)
            else:
                return self.getToken(ora2epasParser.OUT, i)

        def INOUT(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.INOUT)
            else:
                return self.getToken(ora2epasParser.INOUT, i)

        def NOCOPY(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.NOCOPY)
            else:
                return self.getToken(ora2epasParser.NOCOPY, i)

        def getRuleIndex(self):
            return ora2epasParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = ora2epasParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1879
            self.parameter_name()
            self.state = 1883
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1880
                    _la = self._input.LA(1)
                    if not(_la==ora2epasParser.IN or _la==ora2epasParser.INOUT or _la==ora2epasParser.NOCOPY or _la==ora2epasParser.OUT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 1885
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

            self.state = 1887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DATE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARCHAR - 387)) | (1 << (ora2epasParser.VARCHAR2 - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or _la==ora2epasParser.DELIMITED_ID or _la==ora2epasParser.REGULAR_ID:
                self.state = 1886
                self.type_spec()


            self.state = 1890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.DEFAULT or _la==ora2epasParser.ASSIGN_OP:
                self.state = 1889
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Default_value_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def ASSIGN_OP(self):
            return self.getToken(ora2epasParser.ASSIGN_OP, 0)

        def DEFAULT(self):
            return self.getToken(ora2epasParser.DEFAULT, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_default_value_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value_part" ):
                listener.enterDefault_value_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value_part" ):
                listener.exitDefault_value_part(self)




    def default_value_part(self):

        localctx = ora2epasParser.Default_value_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_default_value_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1892
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.DEFAULT or _la==ora2epasParser.ASSIGN_OP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1893
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_declaration(self):
            return self.getTypedRuleContext(ora2epasParser.Variable_declarationContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(ora2epasParser.Subtype_declarationContext,0)


        def cursor_declaration(self):
            return self.getTypedRuleContext(ora2epasParser.Cursor_declarationContext,0)


        def exception_declaration(self):
            return self.getTypedRuleContext(ora2epasParser.Exception_declarationContext,0)


        def pragma_declaration(self):
            return self.getTypedRuleContext(ora2epasParser.Pragma_declarationContext,0)


        def type_declaration(self):
            return self.getTypedRuleContext(ora2epasParser.Type_declarationContext,0)


        def procedure_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Procedure_specContext,0)


        def function_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Function_specContext,0)


        def procedure_body(self):
            return self.getTypedRuleContext(ora2epasParser.Procedure_bodyContext,0)


        def function_body(self):
            return self.getTypedRuleContext(ora2epasParser.Function_bodyContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_declare_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_spec" ):
                listener.enterDeclare_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_spec" ):
                listener.exitDeclare_spec(self)




    def declare_spec(self):

        localctx = ora2epasParser.Declare_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_declare_spec)
        try:
            self.state = 1905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1895
                self.variable_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1896
                self.subtype_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1897
                self.cursor_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1898
                self.exception_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1899
                self.pragma_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1900
                self.type_declaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1901
                self.procedure_spec()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1902
                self.function_spec()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1903
                self.procedure_body()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1904
                self.function_body()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def CONSTANT(self):
            return self.getToken(ora2epasParser.CONSTANT, 0)

        def NOT(self):
            return self.getToken(ora2epasParser.NOT, 0)

        def NULL(self):
            return self.getToken(ora2epasParser.NULL, 0)

        def default_value_part(self):
            return self.getTypedRuleContext(ora2epasParser.Default_value_partContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_variable_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declaration" ):
                listener.enterVariable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declaration" ):
                listener.exitVariable_declaration(self)




    def variable_declaration(self):

        localctx = ora2epasParser.Variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_variable_declaration)
        self._la = 0 # Token type
        try:
            self.state = 1922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1907
                self.identifier()
                self.state = 1909
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1908
                    self.match(ora2epasParser.CONSTANT)


                self.state = 1911
                self.type_spec()
                self.state = 1914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.NOT:
                    self.state = 1912
                    self.match(ora2epasParser.NOT)
                    self.state = 1913
                    self.match(ora2epasParser.NULL)


                self.state = 1917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.DEFAULT or _la==ora2epasParser.ASSIGN_OP:
                    self.state = 1916
                    self.default_value_part()


                self.state = 1919
                self.match(ora2epasParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1921
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subtype_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBTYPE(self):
            return self.getToken(ora2epasParser.SUBTYPE, 0)

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def RANGE(self):
            return self.getToken(ora2epasParser.RANGE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ExpressionContext,i)


        def NOT(self):
            return self.getToken(ora2epasParser.NOT, 0)

        def NULL(self):
            return self.getToken(ora2epasParser.NULL, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_subtype_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtype_declaration" ):
                listener.enterSubtype_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtype_declaration" ):
                listener.exitSubtype_declaration(self)




    def subtype_declaration(self):

        localctx = ora2epasParser.Subtype_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_subtype_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1924
            self.match(ora2epasParser.SUBTYPE)
            self.state = 1925
            self.identifier()
            self.state = 1926
            self.match(ora2epasParser.IS)
            self.state = 1927
            self.type_spec()
            self.state = 1933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.RANGE:
                self.state = 1928
                self.match(ora2epasParser.RANGE)
                self.state = 1929
                self.expression()
                self.state = 1930
                self.match(ora2epasParser.DOUBLE_PERIOD)
                self.state = 1931
                self.expression()


            self.state = 1937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.NOT:
                self.state = 1935
                self.match(ora2epasParser.NOT)
                self.state = 1936
                self.match(ora2epasParser.NULL)


            self.state = 1939
            self.match(ora2epasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR(self):
            return self.getToken(ora2epasParser.CURSOR, 0)

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def parameter_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Parameter_specContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Parameter_specContext,i)


        def RETURN(self):
            return self.getToken(ora2epasParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Select_statementContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_cursor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_declaration" ):
                listener.enterCursor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_declaration" ):
                listener.exitCursor_declaration(self)




    def cursor_declaration(self):

        localctx = ora2epasParser.Cursor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_cursor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1941
            self.match(ora2epasParser.CURSOR)
            self.state = 1942
            self.identifier()
            self.state = 1954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LEFT_PAREN:
                self.state = 1943
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 1944
                self.parameter_spec()
                self.state = 1949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 1945
                    self.match(ora2epasParser.COMMA)
                    self.state = 1946
                    self.parameter_spec()
                    self.state = 1951
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1952
                self.match(ora2epasParser.RIGHT_PAREN)


            self.state = 1958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.RETURN:
                self.state = 1956
                self.match(ora2epasParser.RETURN)
                self.state = 1957
                self.type_spec()


            self.state = 1962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.IS:
                self.state = 1960
                self.match(ora2epasParser.IS)
                self.state = 1961
                self.select_statement()


            self.state = 1964
            self.match(ora2epasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(ora2epasParser.Parameter_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def default_value_part(self):
            return self.getTypedRuleContext(ora2epasParser.Default_value_partContext,0)


        def IN(self):
            return self.getToken(ora2epasParser.IN, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_parameter_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_spec" ):
                listener.enterParameter_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_spec" ):
                listener.exitParameter_spec(self)




    def parameter_spec(self):

        localctx = ora2epasParser.Parameter_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_parameter_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1966
            self.parameter_name()
            self.state = 1971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DATE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.IN - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARCHAR - 387)) | (1 << (ora2epasParser.VARCHAR2 - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or _la==ora2epasParser.DELIMITED_ID or _la==ora2epasParser.REGULAR_ID:
                self.state = 1968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.IN:
                    self.state = 1967
                    self.match(ora2epasParser.IN)


                self.state = 1970
                self.type_spec()


            self.state = 1974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.DEFAULT or _la==ora2epasParser.ASSIGN_OP:
                self.state = 1973
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exception_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def EXCEPTION(self):
            return self.getToken(ora2epasParser.EXCEPTION, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_exception_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_declaration" ):
                listener.enterException_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_declaration" ):
                listener.exitException_declaration(self)




    def exception_declaration(self):

        localctx = ora2epasParser.Exception_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_exception_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1976
            self.identifier()
            self.state = 1977
            self.match(ora2epasParser.EXCEPTION)
            self.state = 1978
            self.match(ora2epasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.id1 = None # IdentifierContext

        def PRAGMA(self):
            return self.getToken(ora2epasParser.PRAGMA, 0)

        def SERIALLY_REUSABLE(self):
            return self.getToken(ora2epasParser.SERIALLY_REUSABLE, 0)

        def AUTONOMOUS_TRANSACTION(self):
            return self.getToken(ora2epasParser.AUTONOMOUS_TRANSACTION, 0)

        def EXCEPTION_INIT(self):
            return self.getToken(ora2epasParser.EXCEPTION_INIT, 0)

        def exception_name(self):
            return self.getTypedRuleContext(ora2epasParser.Exception_nameContext,0)


        def numeric_negative(self):
            return self.getTypedRuleContext(ora2epasParser.Numeric_negativeContext,0)


        def INLINE(self):
            return self.getToken(ora2epasParser.INLINE, 0)

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def RESTRICT_REFERENCES(self):
            return self.getToken(ora2epasParser.RESTRICT_REFERENCES, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.IdentifierContext,i)


        def DEFAULT(self):
            return self.getToken(ora2epasParser.DEFAULT, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_pragma_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_declaration" ):
                listener.enterPragma_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_declaration" ):
                listener.exitPragma_declaration(self)




    def pragma_declaration(self):

        localctx = ora2epasParser.Pragma_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_pragma_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1980
            self.match(ora2epasParser.PRAGMA)
            self.state = 2011
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.SERIALLY_REUSABLE]:
                self.state = 1981
                self.match(ora2epasParser.SERIALLY_REUSABLE)
                pass
            elif token in [ora2epasParser.AUTONOMOUS_TRANSACTION]:
                self.state = 1982
                self.match(ora2epasParser.AUTONOMOUS_TRANSACTION)
                pass
            elif token in [ora2epasParser.EXCEPTION_INIT]:
                self.state = 1983
                self.match(ora2epasParser.EXCEPTION_INIT)
                self.state = 1984
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 1985
                self.exception_name()
                self.state = 1986
                self.match(ora2epasParser.COMMA)
                self.state = 1987
                self.numeric_negative()
                self.state = 1988
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            elif token in [ora2epasParser.INLINE]:
                self.state = 1990
                self.match(ora2epasParser.INLINE)
                self.state = 1991
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 1992
                localctx.id1 = self.identifier()
                self.state = 1993
                self.match(ora2epasParser.COMMA)
                self.state = 1994
                self.expression()
                self.state = 1995
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            elif token in [ora2epasParser.RESTRICT_REFERENCES]:
                self.state = 1997
                self.match(ora2epasParser.RESTRICT_REFERENCES)
                self.state = 1998
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 2001
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                    self.state = 1999
                    self.identifier()
                    pass
                elif token in [ora2epasParser.DEFAULT]:
                    self.state = 2000
                    self.match(ora2epasParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2005 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2003
                    self.match(ora2epasParser.COMMA)
                    self.state = 2004
                    self.identifier()
                    self.state = 2007 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==ora2epasParser.COMMA):
                        break

                self.state = 2009
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2013
            self.match(ora2epasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Record_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(ora2epasParser.RECORD, 0)

        def field_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Field_specContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Field_specContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_record_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_type_def" ):
                listener.enterRecord_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_type_def" ):
                listener.exitRecord_type_def(self)




    def record_type_def(self):

        localctx = ora2epasParser.Record_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_record_type_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2015
            self.match(ora2epasParser.RECORD)
            self.state = 2016
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 2017
            self.field_spec()
            self.state = 2022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 2018
                self.match(ora2epasParser.COMMA)
                self.state = 2019
                self.field_spec()
                self.state = 2024
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2025
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(ora2epasParser.Column_nameContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def NOT(self):
            return self.getToken(ora2epasParser.NOT, 0)

        def NULL(self):
            return self.getToken(ora2epasParser.NULL, 0)

        def default_value_part(self):
            return self.getTypedRuleContext(ora2epasParser.Default_value_partContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_field_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_spec" ):
                listener.enterField_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_spec" ):
                listener.exitField_spec(self)




    def field_spec(self):

        localctx = ora2epasParser.Field_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_field_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2027
            self.column_name()
            self.state = 2029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DATE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARCHAR - 387)) | (1 << (ora2epasParser.VARCHAR2 - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or _la==ora2epasParser.DELIMITED_ID or _la==ora2epasParser.REGULAR_ID:
                self.state = 2028
                self.type_spec()


            self.state = 2033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.NOT:
                self.state = 2031
                self.match(ora2epasParser.NOT)
                self.state = 2032
                self.match(ora2epasParser.NULL)


            self.state = 2036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.DEFAULT or _la==ora2epasParser.ASSIGN_OP:
                self.state = 2035
                self.default_value_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ref_cursor_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF(self):
            return self.getToken(ora2epasParser.REF, 0)

        def CURSOR(self):
            return self.getToken(ora2epasParser.CURSOR, 0)

        def RETURN(self):
            return self.getToken(ora2epasParser.RETURN, 0)

        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_ref_cursor_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRef_cursor_type_def" ):
                listener.enterRef_cursor_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRef_cursor_type_def" ):
                listener.exitRef_cursor_type_def(self)




    def ref_cursor_type_def(self):

        localctx = ora2epasParser.Ref_cursor_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_ref_cursor_type_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2038
            self.match(ora2epasParser.REF)
            self.state = 2039
            self.match(ora2epasParser.CURSOR)
            self.state = 2042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.RETURN:
                self.state = 2040
                self.match(ora2epasParser.RETURN)
                self.state = 2041
                self.type_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(ora2epasParser.TYPE, 0)

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def IS(self):
            return self.getToken(ora2epasParser.IS, 0)

        def table_type_def(self):
            return self.getTypedRuleContext(ora2epasParser.Table_type_defContext,0)


        def varray_type_def(self):
            return self.getTypedRuleContext(ora2epasParser.Varray_type_defContext,0)


        def record_type_def(self):
            return self.getTypedRuleContext(ora2epasParser.Record_type_defContext,0)


        def ref_cursor_type_def(self):
            return self.getTypedRuleContext(ora2epasParser.Ref_cursor_type_defContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_type_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_declaration" ):
                listener.enterType_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_declaration" ):
                listener.exitType_declaration(self)




    def type_declaration(self):

        localctx = ora2epasParser.Type_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_type_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2044
            self.match(ora2epasParser.TYPE)
            self.state = 2045
            self.identifier()
            self.state = 2046
            self.match(ora2epasParser.IS)
            self.state = 2051
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.TABLE]:
                self.state = 2047
                self.table_type_def()
                pass
            elif token in [ora2epasParser.VARRAY, ora2epasParser.VARYING]:
                self.state = 2048
                self.varray_type_def()
                pass
            elif token in [ora2epasParser.RECORD]:
                self.state = 2049
                self.record_type_def()
                pass
            elif token in [ora2epasParser.REF]:
                self.state = 2050
                self.ref_cursor_type_def()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2053
            self.match(ora2epasParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(ora2epasParser.TABLE, 0)

        def OF(self):
            return self.getToken(ora2epasParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def table_indexed_by_part(self):
            return self.getTypedRuleContext(ora2epasParser.Table_indexed_by_partContext,0)


        def NOT(self):
            return self.getToken(ora2epasParser.NOT, 0)

        def NULL(self):
            return self.getToken(ora2epasParser.NULL, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_table_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_type_def" ):
                listener.enterTable_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_type_def" ):
                listener.exitTable_type_def(self)




    def table_type_def(self):

        localctx = ora2epasParser.Table_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_table_type_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2055
            self.match(ora2epasParser.TABLE)
            self.state = 2056
            self.match(ora2epasParser.OF)
            self.state = 2057
            self.type_spec()
            self.state = 2059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.INDEX or _la==ora2epasParser.INDEXED:
                self.state = 2058
                self.table_indexed_by_part()


            self.state = 2063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.NOT:
                self.state = 2061
                self.match(ora2epasParser.NOT)
                self.state = 2062
                self.match(ora2epasParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_indexed_by_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.idx1 = None # Token
            self.idx2 = None # Token

        def BY(self):
            return self.getToken(ora2epasParser.BY, 0)

        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def INDEXED(self):
            return self.getToken(ora2epasParser.INDEXED, 0)

        def INDEX(self):
            return self.getToken(ora2epasParser.INDEX, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_table_indexed_by_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_indexed_by_part" ):
                listener.enterTable_indexed_by_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_indexed_by_part" ):
                listener.exitTable_indexed_by_part(self)




    def table_indexed_by_part(self):

        localctx = ora2epasParser.Table_indexed_by_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_table_indexed_by_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2067
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.INDEXED]:
                self.state = 2065
                localctx.idx1 = self.match(ora2epasParser.INDEXED)
                pass
            elif token in [ora2epasParser.INDEX]:
                self.state = 2066
                localctx.idx2 = self.match(ora2epasParser.INDEX)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2069
            self.match(ora2epasParser.BY)
            self.state = 2070
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Varray_type_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def OF(self):
            return self.getToken(ora2epasParser.OF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def VARRAY(self):
            return self.getToken(ora2epasParser.VARRAY, 0)

        def VARYING(self):
            return self.getToken(ora2epasParser.VARYING, 0)

        def ARRAY(self):
            return self.getToken(ora2epasParser.ARRAY, 0)

        def NOT(self):
            return self.getToken(ora2epasParser.NOT, 0)

        def NULL(self):
            return self.getToken(ora2epasParser.NULL, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_varray_type_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarray_type_def" ):
                listener.enterVarray_type_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarray_type_def" ):
                listener.exitVarray_type_def(self)




    def varray_type_def(self):

        localctx = ora2epasParser.Varray_type_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_varray_type_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2075
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.VARRAY]:
                self.state = 2072
                self.match(ora2epasParser.VARRAY)
                pass
            elif token in [ora2epasParser.VARYING]:
                self.state = 2073
                self.match(ora2epasParser.VARYING)
                self.state = 2074
                self.match(ora2epasParser.ARRAY)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2077
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 2078
            self.expression()
            self.state = 2079
            self.match(ora2epasParser.RIGHT_PAREN)
            self.state = 2080
            self.match(ora2epasParser.OF)
            self.state = 2081
            self.type_spec()
            self.state = 2084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.state = 2082
                self.match(ora2epasParser.NOT)
                self.state = 2083
                self.match(ora2epasParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Seq_of_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.StatementContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.StatementContext,i)


        def label_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Label_declarationContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Label_declarationContext,i)


        def EOF(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.EOF)
            else:
                return self.getToken(ora2epasParser.EOF, i)

        def getRuleIndex(self):
            return ora2epasParser.RULE_seq_of_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeq_of_statements" ):
                listener.enterSeq_of_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeq_of_statements" ):
                listener.exitSeq_of_statements(self)




    def seq_of_statements(self):

        localctx = ora2epasParser.Seq_of_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_seq_of_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2090 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2090
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ALTER, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BEGIN, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CASE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CREATE, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECLARE, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DELETE, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FETCH, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FOR, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GOTO, ora2epasParser.GRANT, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IF, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSERT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULL, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.PROCEDURE, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELECT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATE, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITH, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.LEFT_PAREN, ora2epasParser.BINDVAR, ora2epasParser.COLON, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                        self.state = 2086
                        self.statement()
                        self.state = 2087
                        _la = self._input.LA(1)
                        if not(_la==ora2epasParser.EOF or _la==ora2epasParser.SEMICOLON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [ora2epasParser.LESS_THAN_OP]:
                        self.state = 2089
                        self.label_declaration()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 2092 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Label_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ltp1 = None # Token

        def label_name(self):
            return self.getTypedRuleContext(ora2epasParser.Label_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_label_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_declaration" ):
                listener.enterLabel_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_declaration" ):
                listener.exitLabel_declaration(self)




    def label_declaration(self):

        localctx = ora2epasParser.Label_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_label_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2094
            localctx.ltp1 = self.match(ora2epasParser.LESS_THAN_OP)
            self.state = 2095
            self.match(ora2epasParser.LESS_THAN_OP)
            self.state = 2096
            self.label_name()
            self.state = 2097
            self.match(ora2epasParser.GREATER_THAN_OP)
            self.state = 2098
            self.match(ora2epasParser.GREATER_THAN_OP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(ora2epasParser.CREATE, 0)

        def swallow_to_semi(self):
            return self.getTypedRuleContext(ora2epasParser.Swallow_to_semiContext,0)


        def ALTER(self):
            return self.getToken(ora2epasParser.ALTER, 0)

        def GRANT(self):
            return self.getToken(ora2epasParser.GRANT, 0)

        def ALL(self):
            return self.getToken(ora2epasParser.ALL, 0)

        def TRUNCATE(self):
            return self.getToken(ora2epasParser.TRUNCATE, 0)

        def body(self):
            return self.getTypedRuleContext(ora2epasParser.BodyContext,0)


        def block(self):
            return self.getTypedRuleContext(ora2epasParser.BlockContext,0)


        def assignment_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Assignment_statementContext,0)


        def continue_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Continue_statementContext,0)


        def exit_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Exit_statementContext,0)


        def goto_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Goto_statementContext,0)


        def if_statement(self):
            return self.getTypedRuleContext(ora2epasParser.If_statementContext,0)


        def loop_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Loop_statementContext,0)


        def forall_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Forall_statementContext,0)


        def null_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Null_statementContext,0)


        def raise_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Raise_statementContext,0)


        def return_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Return_statementContext,0)


        def case_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Case_statementContext,0)


        def sql_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Sql_statementContext,0)


        def function_call(self):
            return self.getTypedRuleContext(ora2epasParser.Function_callContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = ora2epasParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_statement)
        try:
            self.state = 2126
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2100
                self.match(ora2epasParser.CREATE)
                self.state = 2101
                self.swallow_to_semi()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2102
                self.match(ora2epasParser.ALTER)
                self.state = 2103
                self.swallow_to_semi()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2104
                self.match(ora2epasParser.GRANT)
                self.state = 2106
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                if la_ == 1:
                    self.state = 2105
                    self.match(ora2epasParser.ALL)


                self.state = 2108
                self.swallow_to_semi()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2109
                self.match(ora2epasParser.TRUNCATE)
                self.state = 2110
                self.swallow_to_semi()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2111
                self.body()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2112
                self.block()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2113
                self.assignment_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2114
                self.continue_statement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2115
                self.exit_statement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2116
                self.goto_statement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2117
                self.if_statement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2118
                self.loop_statement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2119
                self.forall_statement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2120
                self.null_statement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2121
                self.raise_statement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2122
                self.return_statement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2123
                self.case_statement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2124
                self.sql_statement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2125
                self.function_call()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assignment_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN_OP(self):
            return self.getToken(ora2epasParser.ASSIGN_OP, 0)

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def general_element(self):
            return self.getTypedRuleContext(ora2epasParser.General_elementContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(ora2epasParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_assignment_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_statement" ):
                listener.enterAssignment_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_statement" ):
                listener.exitAssignment_statement(self)




    def assignment_statement(self):

        localctx = ora2epasParser.Assignment_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_assignment_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2130
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.state = 2128
                self.general_element()
                pass
            elif token in [ora2epasParser.BINDVAR, ora2epasParser.COLON]:
                self.state = 2129
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2132
            self.match(ora2epasParser.ASSIGN_OP)
            self.state = 2133
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(ora2epasParser.CONTINUE, 0)

        def label_name(self):
            return self.getTypedRuleContext(ora2epasParser.Label_nameContext,0)


        def WHEN(self):
            return self.getToken(ora2epasParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(ora2epasParser.ConditionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_continue_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_statement" ):
                listener.enterContinue_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_statement" ):
                listener.exitContinue_statement(self)




    def continue_statement(self):

        localctx = ora2epasParser.Continue_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_continue_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2135
            self.match(ora2epasParser.CONTINUE)
            self.state = 2137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or _la==ora2epasParser.DELIMITED_ID or _la==ora2epasParser.REGULAR_ID:
                self.state = 2136
                self.label_name()


            self.state = 2141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.WHEN:
                self.state = 2139
                self.match(ora2epasParser.WHEN)
                self.state = 2140
                self.condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exit_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(ora2epasParser.EXIT, 0)

        def label_name(self):
            return self.getTypedRuleContext(ora2epasParser.Label_nameContext,0)


        def WHEN(self):
            return self.getToken(ora2epasParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(ora2epasParser.ConditionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_exit_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit_statement" ):
                listener.enterExit_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit_statement" ):
                listener.exitExit_statement(self)




    def exit_statement(self):

        localctx = ora2epasParser.Exit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_exit_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2143
            self.match(ora2epasParser.EXIT)
            self.state = 2145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or _la==ora2epasParser.DELIMITED_ID or _la==ora2epasParser.REGULAR_ID:
                self.state = 2144
                self.label_name()


            self.state = 2149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.WHEN:
                self.state = 2147
                self.match(ora2epasParser.WHEN)
                self.state = 2148
                self.condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Goto_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(ora2epasParser.GOTO, 0)

        def label_name(self):
            return self.getTypedRuleContext(ora2epasParser.Label_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_goto_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoto_statement" ):
                listener.enterGoto_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoto_statement" ):
                listener.exitGoto_statement(self)




    def goto_statement(self):

        localctx = ora2epasParser.Goto_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_goto_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2151
            self.match(ora2epasParser.GOTO)
            self.state = 2152
            self.label_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.IF)
            else:
                return self.getToken(ora2epasParser.IF, i)

        def condition(self):
            return self.getTypedRuleContext(ora2epasParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(ora2epasParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(ora2epasParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(ora2epasParser.END, 0)

        def elsif_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Elsif_partContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Elsif_partContext,i)


        def else_part(self):
            return self.getTypedRuleContext(ora2epasParser.Else_partContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_if_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)




    def if_statement(self):

        localctx = ora2epasParser.If_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_if_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2154
            self.match(ora2epasParser.IF)
            self.state = 2155
            self.condition()
            self.state = 2156
            self.match(ora2epasParser.THEN)
            self.state = 2157
            self.seq_of_statements()
            self.state = 2161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.ELSIF:
                self.state = 2158
                self.elsif_part()
                self.state = 2163
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.ELSE:
                self.state = 2164
                self.else_part()


            self.state = 2167
            self.match(ora2epasParser.END)
            self.state = 2168
            self.match(ora2epasParser.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Elsif_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSIF(self):
            return self.getToken(ora2epasParser.ELSIF, 0)

        def condition(self):
            return self.getTypedRuleContext(ora2epasParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(ora2epasParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(ora2epasParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_elsif_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElsif_part" ):
                listener.enterElsif_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElsif_part" ):
                listener.exitElsif_part(self)




    def elsif_part(self):

        localctx = ora2epasParser.Elsif_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_elsif_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2170
            self.match(ora2epasParser.ELSIF)
            self.state = 2171
            self.condition()
            self.state = 2172
            self.match(ora2epasParser.THEN)
            self.state = 2173
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ora2epasParser.ELSE, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(ora2epasParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_else_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_part" ):
                listener.enterElse_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_part" ):
                listener.exitElse_part(self)




    def else_part(self):

        localctx = ora2epasParser.Else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_else_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2175
            self.match(ora2epasParser.ELSE)
            self.state = 2176
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Loop_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.LOOP)
            else:
                return self.getToken(ora2epasParser.LOOP, i)

        def seq_of_statements(self):
            return self.getTypedRuleContext(ora2epasParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(ora2epasParser.END, 0)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Label_nameContext,i)


        def WHILE(self):
            return self.getToken(ora2epasParser.WHILE, 0)

        def condition(self):
            return self.getTypedRuleContext(ora2epasParser.ConditionContext,0)


        def FOR(self):
            return self.getToken(ora2epasParser.FOR, 0)

        def cursor_loop_param(self):
            return self.getTypedRuleContext(ora2epasParser.Cursor_loop_paramContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_loop_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop_statement" ):
                listener.enterLoop_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop_statement" ):
                listener.exitLoop_statement(self)




    def loop_statement(self):

        localctx = ora2epasParser.Loop_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_loop_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.state = 2178
                self.label_name()


            self.state = 2185
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.WHILE]:
                self.state = 2181
                self.match(ora2epasParser.WHILE)
                self.state = 2182
                self.condition()
                pass
            elif token in [ora2epasParser.FOR]:
                self.state = 2183
                self.match(ora2epasParser.FOR)
                self.state = 2184
                self.cursor_loop_param()
                pass
            elif token in [ora2epasParser.LOOP]:
                pass
            else:
                pass
            self.state = 2187
            self.match(ora2epasParser.LOOP)
            self.state = 2188
            self.seq_of_statements()
            self.state = 2189
            self.match(ora2epasParser.END)
            self.state = 2190
            self.match(ora2epasParser.LOOP)
            self.state = 2192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or _la==ora2epasParser.DELIMITED_ID or _la==ora2epasParser.REGULAR_ID:
                self.state = 2191
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_loop_paramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Index_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Index_nameContext,i)


        def IN(self):
            return self.getToken(ora2epasParser.IN, 0)

        def REVERSE(self):
            return self.getToken(ora2epasParser.REVERSE, 0)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(ora2epasParser.UNSIGNED_INTEGER, i)

        def DOUBLE_PERIOD(self):
            return self.getToken(ora2epasParser.DOUBLE_PERIOD, 0)

        def record_name(self):
            return self.getTypedRuleContext(ora2epasParser.Record_nameContext,0)


        def cursor_name(self):
            return self.getTypedRuleContext(ora2epasParser.Cursor_nameContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Select_statementContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(ora2epasParser.Expression_listContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_cursor_loop_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_loop_param" ):
                listener.enterCursor_loop_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_loop_param" ):
                listener.exitCursor_loop_param(self)




    def cursor_loop_param(self):

        localctx = ora2epasParser.Cursor_loop_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_cursor_loop_param)
        self._la = 0 # Token type
        try:
            self.state = 2224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2194
                self.index_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2195
                self.index_name()
                self.state = 2196
                self.match(ora2epasParser.IN)
                self.state = 2198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.REVERSE:
                    self.state = 2197
                    self.match(ora2epasParser.REVERSE)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2200
                self.index_name()
                self.state = 2201
                self.match(ora2epasParser.IN)
                self.state = 2202
                self.match(ora2epasParser.UNSIGNED_INTEGER)
                self.state = 2203
                self.match(ora2epasParser.DOUBLE_PERIOD)
                self.state = 2204
                self.match(ora2epasParser.UNSIGNED_INTEGER)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2206
                self.index_name()
                self.state = 2207
                self.match(ora2epasParser.IN)
                self.state = 2208
                self.match(ora2epasParser.UNSIGNED_INTEGER)
                self.state = 2209
                self.match(ora2epasParser.DOUBLE_PERIOD)
                self.state = 2210
                self.index_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2212
                self.record_name()
                self.state = 2213
                self.match(ora2epasParser.IN)
                self.state = 2222
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.BINDVAR, ora2epasParser.COLON, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                    self.state = 2214
                    self.cursor_name()
                    self.state = 2216
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ora2epasParser.LEFT_PAREN:
                        self.state = 2215
                        self.expression_list()


                    pass
                elif token in [ora2epasParser.LEFT_PAREN]:
                    self.state = 2218
                    self.match(ora2epasParser.LEFT_PAREN)
                    self.state = 2219
                    self.select_statement()
                    self.state = 2220
                    self.match(ora2epasParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Forall_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORALL(self):
            return self.getToken(ora2epasParser.FORALL, 0)

        def index_name(self):
            return self.getTypedRuleContext(ora2epasParser.Index_nameContext,0)


        def IN(self):
            return self.getToken(ora2epasParser.IN, 0)

        def bounds_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Bounds_clauseContext,0)


        def sql_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Sql_statementContext,0)


        def SAVE(self):
            return self.getToken(ora2epasParser.SAVE, 0)

        def EXCEPTIONS(self):
            return self.getToken(ora2epasParser.EXCEPTIONS, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_forall_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForall_statement" ):
                listener.enterForall_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForall_statement" ):
                listener.exitForall_statement(self)




    def forall_statement(self):

        localctx = ora2epasParser.Forall_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_forall_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2226
            self.match(ora2epasParser.FORALL)
            self.state = 2227
            self.index_name()
            self.state = 2228
            self.match(ora2epasParser.IN)
            self.state = 2229
            self.bounds_clause()
            self.state = 2230
            self.sql_statement()
            self.state = 2233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.SAVE:
                self.state = 2231
                self.match(ora2epasParser.SAVE)
                self.state = 2232
                self.match(ora2epasParser.EXCEPTIONS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bounds_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lower_bound(self):
            return self.getTypedRuleContext(ora2epasParser.Lower_boundContext,0)


        def upper_bound(self):
            return self.getTypedRuleContext(ora2epasParser.Upper_boundContext,0)


        def INDICES(self):
            return self.getToken(ora2epasParser.INDICES, 0)

        def OF(self):
            return self.getToken(ora2epasParser.OF, 0)

        def collection_name(self):
            return self.getTypedRuleContext(ora2epasParser.Collection_nameContext,0)


        def between_bound(self):
            return self.getTypedRuleContext(ora2epasParser.Between_boundContext,0)


        def VALUES(self):
            return self.getToken(ora2epasParser.VALUES, 0)

        def index_name(self):
            return self.getTypedRuleContext(ora2epasParser.Index_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_bounds_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBounds_clause" ):
                listener.enterBounds_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBounds_clause" ):
                listener.exitBounds_clause(self)




    def bounds_clause(self):

        localctx = ora2epasParser.Bounds_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_bounds_clause)
        self._la = 0 # Token type
        try:
            self.state = 2248
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2235
                self.lower_bound()
                self.state = 2236
                self.match(ora2epasParser.DOUBLE_PERIOD)
                self.state = 2237
                self.upper_bound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2239
                self.match(ora2epasParser.INDICES)
                self.state = 2240
                self.match(ora2epasParser.OF)
                self.state = 2241
                self.collection_name()
                self.state = 2243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.BETWEEN:
                    self.state = 2242
                    self.between_bound()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2245
                self.match(ora2epasParser.VALUES)
                self.state = 2246
                self.match(ora2epasParser.OF)
                self.state = 2247
                self.index_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Between_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(ora2epasParser.BETWEEN, 0)

        def lower_bound(self):
            return self.getTypedRuleContext(ora2epasParser.Lower_boundContext,0)


        def AND(self):
            return self.getToken(ora2epasParser.AND, 0)

        def upper_bound(self):
            return self.getTypedRuleContext(ora2epasParser.Upper_boundContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_between_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween_bound" ):
                listener.enterBetween_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween_bound" ):
                listener.exitBetween_bound(self)




    def between_bound(self):

        localctx = ora2epasParser.Between_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_between_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2250
            self.match(ora2epasParser.BETWEEN)
            self.state = 2251
            self.lower_bound()
            self.state = 2252
            self.match(ora2epasParser.AND)
            self.state = 2253
            self.upper_bound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lower_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self):
            return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_lower_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLower_bound" ):
                listener.enterLower_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLower_bound" ):
                listener.exitLower_bound(self)




    def lower_bound(self):

        localctx = ora2epasParser.Lower_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_lower_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2255
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Upper_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self):
            return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_upper_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpper_bound" ):
                listener.enterUpper_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpper_bound" ):
                listener.exitUpper_bound(self)




    def upper_bound(self):

        localctx = ora2epasParser.Upper_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_upper_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2257
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Null_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(ora2epasParser.NULL, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_null_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_statement" ):
                listener.enterNull_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_statement" ):
                listener.exitNull_statement(self)




    def null_statement(self):

        localctx = ora2epasParser.Null_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_null_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2259
            self.match(ora2epasParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(ora2epasParser.RAISE, 0)

        def exception_name(self):
            return self.getTypedRuleContext(ora2epasParser.Exception_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_raise_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_statement" ):
                listener.enterRaise_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_statement" ):
                listener.exitRaise_statement(self)




    def raise_statement(self):

        localctx = ora2epasParser.Raise_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_raise_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2261
            self.match(ora2epasParser.RAISE)
            self.state = 2263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (ora2epasParser.DELIMITED_ID - 522)) | (1 << (ora2epasParser.INTRODUCER - 522)) | (1 << (ora2epasParser.REGULAR_ID - 522)))) != 0):
                self.state = 2262
                self.exception_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(ora2epasParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_return_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)




    def return_statement(self):

        localctx = ora2epasParser.Return_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_return_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2265
            self.match(ora2epasParser.RETURN)
            self.state = 2267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ALL) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ANY) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CASE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COALESCE) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ora2epasParser.CONNECT_BY_ROOT - 65)) | (1 << (ora2epasParser.CONSTANT - 65)) | (1 << (ora2epasParser.CONSTRAINT - 65)) | (1 << (ora2epasParser.CONSTRAINTS - 65)) | (1 << (ora2epasParser.CONSTRUCTOR - 65)) | (1 << (ora2epasParser.CONTENT - 65)) | (1 << (ora2epasParser.CONTEXT - 65)) | (1 << (ora2epasParser.CONTINUE - 65)) | (1 << (ora2epasParser.CONVERT - 65)) | (1 << (ora2epasParser.CORRUPT_XID - 65)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 65)) | (1 << (ora2epasParser.COST - 65)) | (1 << (ora2epasParser.COUNT - 65)) | (1 << (ora2epasParser.CROSS - 65)) | (1 << (ora2epasParser.CUBE - 65)) | (1 << (ora2epasParser.CURRENT_USER - 65)) | (1 << (ora2epasParser.CURSOR - 65)) | (1 << (ora2epasParser.CUSTOMDATUM - 65)) | (1 << (ora2epasParser.CYCLE - 65)) | (1 << (ora2epasParser.DATA - 65)) | (1 << (ora2epasParser.DATABASE - 65)) | (1 << (ora2epasParser.DATE - 65)) | (1 << (ora2epasParser.DAY - 65)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 65)) | (1 << (ora2epasParser.DBTIMEZONE - 65)) | (1 << (ora2epasParser.DDL - 65)) | (1 << (ora2epasParser.DEBUG - 65)) | (1 << (ora2epasParser.DEC - 65)) | (1 << (ora2epasParser.DECIMAL - 65)) | (1 << (ora2epasParser.DECOMPOSE - 65)) | (1 << (ora2epasParser.DECREMENT - 65)) | (1 << (ora2epasParser.DEFAULT - 65)) | (1 << (ora2epasParser.DEFAULTS - 65)) | (1 << (ora2epasParser.DEFERRED - 65)) | (1 << (ora2epasParser.DEFINER - 65)) | (1 << (ora2epasParser.DETERMINISTIC - 65)) | (1 << (ora2epasParser.DIMENSION - 65)) | (1 << (ora2epasParser.DISABLE - 65)) | (1 << (ora2epasParser.DISASSOCIATE - 65)) | (1 << (ora2epasParser.DISTINCT - 65)) | (1 << (ora2epasParser.DOCUMENT - 65)) | (1 << (ora2epasParser.DOUBLE - 65)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (ora2epasParser.EACH - 65)) | (1 << (ora2epasParser.ELEMENT - 65)) | (1 << (ora2epasParser.EMPTY - 65)) | (1 << (ora2epasParser.ENABLE - 65)) | (1 << (ora2epasParser.ENCODING - 65)) | (1 << (ora2epasParser.ENTITYESCAPING - 65)) | (1 << (ora2epasParser.ERR - 65)) | (1 << (ora2epasParser.ERRORS - 65)) | (1 << (ora2epasParser.ESCAPE - 65)) | (1 << (ora2epasParser.EVALNAME - 65)) | (1 << (ora2epasParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (ora2epasParser.EXCEPTION_INIT - 129)) | (1 << (ora2epasParser.EXCEPTIONS - 129)) | (1 << (ora2epasParser.EXCLUDE - 129)) | (1 << (ora2epasParser.EXECUTE - 129)) | (1 << (ora2epasParser.EXISTS - 129)) | (1 << (ora2epasParser.EXIT - 129)) | (1 << (ora2epasParser.EXPLAIN - 129)) | (1 << (ora2epasParser.EXTERNAL - 129)) | (1 << (ora2epasParser.EXTRACT - 129)) | (1 << (ora2epasParser.FAILURE - 129)) | (1 << (ora2epasParser.FALSE - 129)) | (1 << (ora2epasParser.FINAL - 129)) | (1 << (ora2epasParser.FIRST - 129)) | (1 << (ora2epasParser.FIRST_VALUE - 129)) | (1 << (ora2epasParser.FLOAT - 129)) | (1 << (ora2epasParser.FOLLOWING - 129)) | (1 << (ora2epasParser.FOLLOWS - 129)) | (1 << (ora2epasParser.FORALL - 129)) | (1 << (ora2epasParser.FORCE - 129)) | (1 << (ora2epasParser.FULL - 129)) | (1 << (ora2epasParser.FUNCTION - 129)) | (1 << (ora2epasParser.GROUPING - 129)) | (1 << (ora2epasParser.HASH - 129)) | (1 << (ora2epasParser.HIDE - 129)) | (1 << (ora2epasParser.HOUR - 129)) | (1 << (ora2epasParser.IGNORE - 129)) | (1 << (ora2epasParser.IMMEDIATE - 129)) | (1 << (ora2epasParser.INCLUDE - 129)) | (1 << (ora2epasParser.INCLUDING - 129)) | (1 << (ora2epasParser.INCREMENT - 129)) | (1 << (ora2epasParser.INDENT - 129)) | (1 << (ora2epasParser.INDEXED - 129)) | (1 << (ora2epasParser.INDICATOR - 129)) | (1 << (ora2epasParser.INDICES - 129)) | (1 << (ora2epasParser.INFINITE - 129)) | (1 << (ora2epasParser.INLINE - 129)) | (1 << (ora2epasParser.INNER - 129)) | (1 << (ora2epasParser.INOUT - 129)) | (1 << (ora2epasParser.INSTANTIABLE - 129)) | (1 << (ora2epasParser.INSTEAD - 129)) | (1 << (ora2epasParser.INT - 129)) | (1 << (ora2epasParser.INTEGER - 129)) | (1 << (ora2epasParser.INTERVAL - 129)) | (1 << (ora2epasParser.INVALIDATE - 129)) | (1 << (ora2epasParser.ISOLATION - 129)) | (1 << (ora2epasParser.ITERATE - 129)) | (1 << (ora2epasParser.JAVA - 129)) | (1 << (ora2epasParser.JOIN - 129)) | (1 << (ora2epasParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (ora2epasParser.LANGUAGE - 193)) | (1 << (ora2epasParser.LAST - 193)) | (1 << (ora2epasParser.LAST_VALUE - 193)) | (1 << (ora2epasParser.LEADING - 193)) | (1 << (ora2epasParser.LEFT - 193)) | (1 << (ora2epasParser.LEVEL - 193)) | (1 << (ora2epasParser.LIBRARY - 193)) | (1 << (ora2epasParser.LIKE2 - 193)) | (1 << (ora2epasParser.LIKE4 - 193)) | (1 << (ora2epasParser.LIKEC - 193)) | (1 << (ora2epasParser.LIMIT - 193)) | (1 << (ora2epasParser.LOCAL - 193)) | (1 << (ora2epasParser.LOCKED - 193)) | (1 << (ora2epasParser.LOG - 193)) | (1 << (ora2epasParser.LOGOFF - 193)) | (1 << (ora2epasParser.LOGON - 193)) | (1 << (ora2epasParser.LONG - 193)) | (1 << (ora2epasParser.LOOP - 193)) | (1 << (ora2epasParser.MAIN - 193)) | (1 << (ora2epasParser.MAP - 193)) | (1 << (ora2epasParser.MATCHED - 193)) | (1 << (ora2epasParser.MAXVALUE - 193)) | (1 << (ora2epasParser.MEASURES - 193)) | (1 << (ora2epasParser.MEMBER - 193)) | (1 << (ora2epasParser.MERGE - 193)) | (1 << (ora2epasParser.MINUTE - 193)) | (1 << (ora2epasParser.MINVALUE - 193)) | (1 << (ora2epasParser.MLSLABEL - 193)) | (1 << (ora2epasParser.MODEL - 193)) | (1 << (ora2epasParser.MODIFY - 193)) | (1 << (ora2epasParser.MONTH - 193)) | (1 << (ora2epasParser.MULTISET - 193)) | (1 << (ora2epasParser.NAME - 193)) | (1 << (ora2epasParser.NAN - 193)) | (1 << (ora2epasParser.NATURAL - 193)) | (1 << (ora2epasParser.NATURALN - 193)) | (1 << (ora2epasParser.NAV - 193)) | (1 << (ora2epasParser.NCHAR - 193)) | (1 << (ora2epasParser.NCHAR_CS - 193)) | (1 << (ora2epasParser.NCLOB - 193)) | (1 << (ora2epasParser.NESTED - 193)) | (1 << (ora2epasParser.NEW - 193)) | (1 << (ora2epasParser.NO - 193)) | (1 << (ora2epasParser.NOAUDIT - 193)) | (1 << (ora2epasParser.NOCOPY - 193)) | (1 << (ora2epasParser.NOCYCLE - 193)) | (1 << (ora2epasParser.NOENTITYESCAPING - 193)) | (1 << (ora2epasParser.NONE - 193)) | (1 << (ora2epasParser.NOSCHEMACHECK - 193)) | (1 << (ora2epasParser.NOT - 193)) | (1 << (ora2epasParser.NULL - 193)) | (1 << (ora2epasParser.NULLS - 193)) | (1 << (ora2epasParser.NUMBER - 193)) | (1 << (ora2epasParser.NUMERIC - 193)) | (1 << (ora2epasParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (ora2epasParser.OBJECT - 257)) | (1 << (ora2epasParser.OFF - 257)) | (1 << (ora2epasParser.OID - 257)) | (1 << (ora2epasParser.OLD - 257)) | (1 << (ora2epasParser.ONLY - 257)) | (1 << (ora2epasParser.OPEN - 257)) | (1 << (ora2epasParser.ORADATA - 257)) | (1 << (ora2epasParser.ORDINALITY - 257)) | (1 << (ora2epasParser.OSERROR - 257)) | (1 << (ora2epasParser.OUT - 257)) | (1 << (ora2epasParser.OUTER - 257)) | (1 << (ora2epasParser.OVER - 257)) | (1 << (ora2epasParser.OVERRIDING - 257)) | (1 << (ora2epasParser.PACKAGE - 257)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 257)) | (1 << (ora2epasParser.PARAMETERS - 257)) | (1 << (ora2epasParser.PARENT - 257)) | (1 << (ora2epasParser.PARTITION - 257)) | (1 << (ora2epasParser.PASSING - 257)) | (1 << (ora2epasParser.PATH - 257)) | (1 << (ora2epasParser.PIPELINED - 257)) | (1 << (ora2epasParser.PLAN - 257)) | (1 << (ora2epasParser.PLS_INTEGER - 257)) | (1 << (ora2epasParser.POSITIVE - 257)) | (1 << (ora2epasParser.POSITIVEN - 257)) | (1 << (ora2epasParser.PRAGMA - 257)) | (1 << (ora2epasParser.PRECEDING - 257)) | (1 << (ora2epasParser.PRECISION - 257)) | (1 << (ora2epasParser.PRESENT - 257)) | (1 << (ora2epasParser.PRIOR - 257)) | (1 << (ora2epasParser.RAISE - 257)) | (1 << (ora2epasParser.RANGE - 257)) | (1 << (ora2epasParser.RAW - 257)) | (1 << (ora2epasParser.READ - 257)) | (1 << (ora2epasParser.REAL - 257)) | (1 << (ora2epasParser.RECORD - 257)) | (1 << (ora2epasParser.REF - 257)) | (1 << (ora2epasParser.REFERENCE - 257)) | (1 << (ora2epasParser.REFERENCING - 257)) | (1 << (ora2epasParser.REJECT - 257)) | (1 << (ora2epasParser.RENAME - 257)) | (1 << (ora2epasParser.REPLACE - 257)) | (1 << (ora2epasParser.RESPECT - 257)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 257)) | (1 << (ora2epasParser.RESULT - 257)) | (1 << (ora2epasParser.RETURN - 257)) | (1 << (ora2epasParser.RETURNING - 257)) | (1 << (ora2epasParser.REUSE - 257)) | (1 << (ora2epasParser.REVERSE - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (ora2epasParser.RIGHT - 321)) | (1 << (ora2epasParser.ROLLBACK - 321)) | (1 << (ora2epasParser.ROLLUP - 321)) | (1 << (ora2epasParser.ROW - 321)) | (1 << (ora2epasParser.ROWID - 321)) | (1 << (ora2epasParser.ROWS - 321)) | (1 << (ora2epasParser.RULES - 321)) | (1 << (ora2epasParser.SAMPLE - 321)) | (1 << (ora2epasParser.SAVE - 321)) | (1 << (ora2epasParser.SAVEPOINT - 321)) | (1 << (ora2epasParser.SCHEMA - 321)) | (1 << (ora2epasParser.SCHEMACHECK - 321)) | (1 << (ora2epasParser.SCN - 321)) | (1 << (ora2epasParser.SECOND - 321)) | (1 << (ora2epasParser.SEED - 321)) | (1 << (ora2epasParser.SEGMENT - 321)) | (1 << (ora2epasParser.SELF - 321)) | (1 << (ora2epasParser.SEQUENTIAL - 321)) | (1 << (ora2epasParser.SERIALIZABLE - 321)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 321)) | (1 << (ora2epasParser.SERVERERROR - 321)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 321)) | (1 << (ora2epasParser.SET - 321)) | (1 << (ora2epasParser.SETS - 321)) | (1 << (ora2epasParser.SETTINGS - 321)) | (1 << (ora2epasParser.SHOW - 321)) | (1 << (ora2epasParser.SHUTDOWN - 321)) | (1 << (ora2epasParser.SIBLINGS - 321)) | (1 << (ora2epasParser.SIGNTYPE - 321)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 321)) | (1 << (ora2epasParser.SINGLE - 321)) | (1 << (ora2epasParser.SKIP_ - 321)) | (1 << (ora2epasParser.SMALLINT - 321)) | (1 << (ora2epasParser.SNAPSHOT - 321)) | (1 << (ora2epasParser.SOME - 321)) | (1 << (ora2epasParser.SPECIFICATION - 321)) | (1 << (ora2epasParser.SQLDATA - 321)) | (1 << (ora2epasParser.SQLERROR - 321)) | (1 << (ora2epasParser.STANDALONE - 321)) | (1 << (ora2epasParser.STARTUP - 321)) | (1 << (ora2epasParser.STATEMENT - 321)) | (1 << (ora2epasParser.STATEMENT_ID - 321)) | (1 << (ora2epasParser.STATIC - 321)) | (1 << (ora2epasParser.STATISTICS - 321)) | (1 << (ora2epasParser.STRING - 321)) | (1 << (ora2epasParser.SUBMULTISET - 321)) | (1 << (ora2epasParser.SUBPARTITION - 321)) | (1 << (ora2epasParser.SUBSTITUTABLE - 321)) | (1 << (ora2epasParser.SUBTYPE - 321)) | (1 << (ora2epasParser.SUCCESS - 321)) | (1 << (ora2epasParser.SUSPEND - 321)) | (1 << (ora2epasParser.TIME - 321)) | (1 << (ora2epasParser.TIMESTAMP - 321)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 385)) | (1 << (ora2epasParser.TIMEZONE_ABBR - 385)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 385)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 385)) | (1 << (ora2epasParser.TIMEZONE_REGION - 385)) | (1 << (ora2epasParser.TRAILING - 385)) | (1 << (ora2epasParser.TRANSACTION - 385)) | (1 << (ora2epasParser.TRANSLATE - 385)) | (1 << (ora2epasParser.TREAT - 385)) | (1 << (ora2epasParser.TRIGGER - 385)) | (1 << (ora2epasParser.TRUE - 385)) | (1 << (ora2epasParser.TRUNCATE - 385)) | (1 << (ora2epasParser.TYPE - 385)) | (1 << (ora2epasParser.UNBOUNDED - 385)) | (1 << (ora2epasParser.UNDER - 385)) | (1 << (ora2epasParser.UNLIMITED - 385)) | (1 << (ora2epasParser.UNTIL - 385)) | (1 << (ora2epasParser.UPDATED - 385)) | (1 << (ora2epasParser.UPSERT - 385)) | (1 << (ora2epasParser.UROWID - 385)) | (1 << (ora2epasParser.USE - 385)) | (1 << (ora2epasParser.VALIDATE - 385)) | (1 << (ora2epasParser.VALUE - 385)) | (1 << (ora2epasParser.VARIABLE - 385)) | (1 << (ora2epasParser.VARRAY - 385)) | (1 << (ora2epasParser.VARYING - 385)) | (1 << (ora2epasParser.VERSION - 385)) | (1 << (ora2epasParser.VERSIONS - 385)) | (1 << (ora2epasParser.WAIT - 385)) | (1 << (ora2epasParser.WARNING - 385)) | (1 << (ora2epasParser.WELLFORMED - 385)) | (1 << (ora2epasParser.WHENEVER - 385)) | (1 << (ora2epasParser.WHILE - 385)) | (1 << (ora2epasParser.WITHIN - 385)) | (1 << (ora2epasParser.WORK - 385)) | (1 << (ora2epasParser.WRITE - 385)) | (1 << (ora2epasParser.XML - 385)) | (1 << (ora2epasParser.XMLAGG - 385)) | (1 << (ora2epasParser.XMLATTRIBUTES - 385)) | (1 << (ora2epasParser.XMLCAST - 385)) | (1 << (ora2epasParser.XMLCOLATTVAL - 385)) | (1 << (ora2epasParser.XMLELEMENT - 385)) | (1 << (ora2epasParser.XMLEXISTS - 385)) | (1 << (ora2epasParser.XMLFOREST - 385)) | (1 << (ora2epasParser.XMLNAMESPACES - 385)) | (1 << (ora2epasParser.XMLPARSE - 385)) | (1 << (ora2epasParser.XMLPI - 385)) | (1 << (ora2epasParser.XMLQUERY - 385)) | (1 << (ora2epasParser.XMLROOT - 385)) | (1 << (ora2epasParser.XMLSERIALIZE - 385)) | (1 << (ora2epasParser.XMLTABLE - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (ora2epasParser.YEAR - 449)) | (1 << (ora2epasParser.YES - 449)) | (1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 449)) | (1 << (ora2epasParser.ZONE - 449)) | (1 << (ora2epasParser.PREDICTION - 449)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 449)) | (1 << (ora2epasParser.PREDICTION_COST - 449)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 449)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 449)) | (1 << (ora2epasParser.PREDICTION_SET - 449)) | (1 << (ora2epasParser.CUME_DIST - 449)) | (1 << (ora2epasParser.DENSE_RANK - 449)) | (1 << (ora2epasParser.LISTAGG - 449)) | (1 << (ora2epasParser.PERCENT_RANK - 449)) | (1 << (ora2epasParser.PERCENTILE_CONT - 449)) | (1 << (ora2epasParser.PERCENTILE_DISC - 449)) | (1 << (ora2epasParser.RANK - 449)) | (1 << (ora2epasParser.AVG - 449)) | (1 << (ora2epasParser.CORR - 449)) | (1 << (ora2epasParser.COVAR_ - 449)) | (1 << (ora2epasParser.DECODE - 449)) | (1 << (ora2epasParser.LAG - 449)) | (1 << (ora2epasParser.LEAD - 449)) | (1 << (ora2epasParser.MAX - 449)) | (1 << (ora2epasParser.MEDIAN - 449)) | (1 << (ora2epasParser.MIN - 449)) | (1 << (ora2epasParser.NTILE - 449)) | (1 << (ora2epasParser.NVL - 449)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 449)) | (1 << (ora2epasParser.REGR_ - 449)) | (1 << (ora2epasParser.ROUND - 449)) | (1 << (ora2epasParser.ROW_NUMBER - 449)) | (1 << (ora2epasParser.SUBSTR - 449)) | (1 << (ora2epasParser.TO_CHAR - 449)) | (1 << (ora2epasParser.TRIM - 449)) | (1 << (ora2epasParser.SUM - 449)) | (1 << (ora2epasParser.STDDEV - 449)) | (1 << (ora2epasParser.VAR_ - 449)) | (1 << (ora2epasParser.VARIANCE - 449)) | (1 << (ora2epasParser.DBMS_ALERT - 449)) | (1 << (ora2epasParser.DBMS_AQADM - 449)) | (1 << (ora2epasParser.DBMS_AQ - 449)) | (1 << (ora2epasParser.DBMS_CRYPTO - 449)) | (1 << (ora2epasParser.DBMS_JOB - 449)) | (1 << (ora2epasParser.DBMS_LOB - 449)) | (1 << (ora2epasParser.DBMS_LOCK - 449)) | (1 << (ora2epasParser.DBMS_MVIEW - 449)) | (1 << (ora2epasParser.DBMS_OUTPUT - 449)) | (1 << (ora2epasParser.DBMS_PIPE - 449)) | (1 << (ora2epasParser.DBMS_PROFILER - 449)) | (1 << (ora2epasParser.DBMS_RANDOM - 449)) | (1 << (ora2epasParser.DBMS_RLS - 449)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 449)) | (1 << (ora2epasParser.DBMS_SESSION - 449)) | (1 << (ora2epasParser.DBMS_SQL - 449)) | (1 << (ora2epasParser.DBMS_UTILITY - 449)) | (1 << (ora2epasParser.EMP_ADMIN - 449)) | (1 << (ora2epasParser.UTL_ENCODE - 449)) | (1 << (ora2epasParser.UTL_FILE - 449)) | (1 << (ora2epasParser.UTL_HTTP - 449)) | (1 << (ora2epasParser.UTL_MAIL - 449)) | (1 << (ora2epasParser.UTL_RAW - 449)) | (1 << (ora2epasParser.UTL_SMTP - 449)) | (1 << (ora2epasParser.UTL_TCP - 449)))) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & ((1 << (ora2epasParser.UTL_URL - 513)) | (1 << (ora2epasParser.NATIONAL_CHAR_STRING_LIT - 513)) | (1 << (ora2epasParser.UNSIGNED_INTEGER - 513)) | (1 << (ora2epasParser.APPROXIMATE_NUM_LIT - 513)) | (1 << (ora2epasParser.CHAR_STRING - 513)) | (1 << (ora2epasParser.DELIMITED_ID - 513)) | (1 << (ora2epasParser.LEFT_PAREN - 513)) | (1 << (ora2epasParser.PLUS_SIGN - 513)) | (1 << (ora2epasParser.MINUS_SIGN - 513)) | (1 << (ora2epasParser.BINDVAR - 513)) | (1 << (ora2epasParser.COLON - 513)) | (1 << (ora2epasParser.INTRODUCER - 513)) | (1 << (ora2epasParser.REGULAR_ID - 513)))) != 0):
                self.state = 2266
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routine_name(self):
            return self.getTypedRuleContext(ora2epasParser.Routine_nameContext,0)


        def CALL(self):
            return self.getToken(ora2epasParser.CALL, 0)

        def function_argument(self):
            return self.getTypedRuleContext(ora2epasParser.Function_argumentContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)




    def function_call(self):

        localctx = ora2epasParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2270
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.state = 2269
                self.match(ora2epasParser.CALL)


            self.state = 2272
            self.routine_name()
            self.state = 2274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LEFT_PAREN:
                self.state = 2273
                self.function_argument()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(ora2epasParser.BEGIN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(ora2epasParser.Seq_of_statementsContext,0)


        def END(self):
            return self.getToken(ora2epasParser.END, 0)

        def EXCEPTION(self):
            return self.getToken(ora2epasParser.EXCEPTION, 0)

        def label_name(self):
            return self.getTypedRuleContext(ora2epasParser.Label_nameContext,0)


        def exception_handler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Exception_handlerContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Exception_handlerContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)




    def body(self):

        localctx = ora2epasParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2276
            self.match(ora2epasParser.BEGIN)
            self.state = 2277
            self.seq_of_statements()
            self.state = 2284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.EXCEPTION:
                self.state = 2278
                self.match(ora2epasParser.EXCEPTION)
                self.state = 2280 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2279
                    self.exception_handler()
                    self.state = 2282 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==ora2epasParser.WHEN):
                        break



            self.state = 2286
            self.match(ora2epasParser.END)
            self.state = 2288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.state = 2287
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exception_handlerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(ora2epasParser.WHEN, 0)

        def exception_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Exception_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Exception_nameContext,i)


        def THEN(self):
            return self.getToken(ora2epasParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(ora2epasParser.Seq_of_statementsContext,0)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.OR)
            else:
                return self.getToken(ora2epasParser.OR, i)

        def getRuleIndex(self):
            return ora2epasParser.RULE_exception_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_handler" ):
                listener.enterException_handler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_handler" ):
                listener.exitException_handler(self)




    def exception_handler(self):

        localctx = ora2epasParser.Exception_handlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_exception_handler)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2290
            self.match(ora2epasParser.WHEN)
            self.state = 2291
            self.exception_name()
            self.state = 2296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.OR:
                self.state = 2292
                self.match(ora2epasParser.OR)
                self.state = 2293
                self.exception_name()
                self.state = 2298
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2299
            self.match(ora2epasParser.THEN)
            self.state = 2300
            self.seq_of_statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body(self):
            return self.getTypedRuleContext(ora2epasParser.BodyContext,0)


        def DECLARE(self):
            return self.getToken(ora2epasParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Declare_specContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_trigger_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_block" ):
                listener.enterTrigger_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_block" ):
                listener.exitTrigger_block(self)




    def trigger_block(self):

        localctx = ora2epasParser.Trigger_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_trigger_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECLARE - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.PROCEDURE - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (ora2epasParser.DELIMITED_ID - 522)) | (1 << (ora2epasParser.INTRODUCER - 522)) | (1 << (ora2epasParser.REGULAR_ID - 522)))) != 0):
                self.state = 2303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.DECLARE:
                    self.state = 2302
                    self.match(ora2epasParser.DECLARE)


                self.state = 2306 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2305
                    self.declare_spec()
                    self.state = 2308 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.PROCEDURE - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (ora2epasParser.DELIMITED_ID - 522)) | (1 << (ora2epasParser.INTRODUCER - 522)) | (1 << (ora2epasParser.REGULAR_ID - 522)))) != 0)):
                        break



            self.state = 2312
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body(self):
            return self.getTypedRuleContext(ora2epasParser.BodyContext,0)


        def DECLARE(self):
            return self.getToken(ora2epasParser.DECLARE, 0)

        def declare_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Declare_specContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Declare_specContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = ora2epasParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.DECLARE:
                self.state = 2314
                self.match(ora2epasParser.DECLARE)


            self.state = 2318 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2317
                self.declare_spec()
                self.state = 2320 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.PROCEDURE - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or ((((_la - 522)) & ~0x3f) == 0 and ((1 << (_la - 522)) & ((1 << (ora2epasParser.DELIMITED_ID - 522)) | (1 << (ora2epasParser.INTRODUCER - 522)) | (1 << (ora2epasParser.REGULAR_ID - 522)))) != 0)):
                    break

            self.state = 2322
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def execute_immediate(self):
            return self.getTypedRuleContext(ora2epasParser.Execute_immediateContext,0)


        def sql_statements(self):
            return self.getTypedRuleContext(ora2epasParser.Sql_statementsContext,0)


        def cursor_manipulation_statements(self):
            return self.getTypedRuleContext(ora2epasParser.Cursor_manipulation_statementsContext,0)


        def transaction_control_statements(self):
            return self.getTypedRuleContext(ora2epasParser.Transaction_control_statementsContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_sql_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_statement" ):
                listener.enterSql_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_statement" ):
                listener.exitSql_statement(self)




    def sql_statement(self):

        localctx = ora2epasParser.Sql_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_sql_statement)
        try:
            self.state = 2328
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2324
                self.execute_immediate()
                pass
            elif token in [ora2epasParser.DELETE, ora2epasParser.INSERT, ora2epasParser.SELECT, ora2epasParser.UPDATE, ora2epasParser.WITH, ora2epasParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2325
                self.sql_statements()
                pass
            elif token in [ora2epasParser.CLOSE, ora2epasParser.FETCH, ora2epasParser.OPEN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2326
                self.cursor_manipulation_statements()
                pass
            elif token in [ora2epasParser.COMMIT, ora2epasParser.ROLLBACK, ora2epasParser.SAVEPOINT, ora2epasParser.SET]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2327
                self.transaction_control_statements()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_immediateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(ora2epasParser.EXECUTE, 0)

        def IMMEDIATE(self):
            return self.getToken(ora2epasParser.IMMEDIATE, 0)

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def into_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Into_clauseContext,0)


        def using_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Using_clauseContext,0)


        def dynamic_returning_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Dynamic_returning_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_execute_immediate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_immediate" ):
                listener.enterExecute_immediate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_immediate" ):
                listener.exitExecute_immediate(self)




    def execute_immediate(self):

        localctx = ora2epasParser.Execute_immediateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_execute_immediate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2330
            self.match(ora2epasParser.EXECUTE)
            self.state = 2331
            self.match(ora2epasParser.IMMEDIATE)
            self.state = 2332
            self.expression()
            self.state = 2342
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.BULK, ora2epasParser.INTO]:
                self.state = 2333
                self.into_clause()
                self.state = 2335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.USING:
                    self.state = 2334
                    self.using_clause()


                pass
            elif token in [ora2epasParser.USING]:
                self.state = 2337
                self.using_clause()
                self.state = 2339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.RETURN or _la==ora2epasParser.RETURNING:
                    self.state = 2338
                    self.dynamic_returning_clause()


                pass
            elif token in [ora2epasParser.RETURN, ora2epasParser.RETURNING]:
                self.state = 2341
                self.dynamic_returning_clause()
                pass
            elif token in [ora2epasParser.EOF, ora2epasParser.SAVE, ora2epasParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dynamic_returning_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def into_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Into_clauseContext,0)


        def RETURNING(self):
            return self.getToken(ora2epasParser.RETURNING, 0)

        def RETURN(self):
            return self.getToken(ora2epasParser.RETURN, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_dynamic_returning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamic_returning_clause" ):
                listener.enterDynamic_returning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamic_returning_clause" ):
                listener.exitDynamic_returning_clause(self)




    def dynamic_returning_clause(self):

        localctx = ora2epasParser.Dynamic_returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_dynamic_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2344
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.RETURN or _la==ora2epasParser.RETURNING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2345
            self.into_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Update_statementContext,0)


        def delete_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Insert_statementContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_sql_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_statements" ):
                listener.enterSql_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_statements" ):
                listener.exitSql_statements(self)




    def sql_statements(self):

        localctx = ora2epasParser.Sql_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_sql_statements)
        try:
            self.state = 2351
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.SELECT, ora2epasParser.WITH, ora2epasParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2347
                self.select_statement()
                pass
            elif token in [ora2epasParser.UPDATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2348
                self.update_statement()
                pass
            elif token in [ora2epasParser.DELETE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2349
                self.delete_statement()
                pass
            elif token in [ora2epasParser.INSERT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2350
                self.insert_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_manipulation_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def close_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Close_statementContext,0)


        def open_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Open_statementContext,0)


        def fetch_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Fetch_statementContext,0)


        def open_for_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Open_for_statementContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_cursor_manipulation_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_manipulation_statements" ):
                listener.enterCursor_manipulation_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_manipulation_statements" ):
                listener.exitCursor_manipulation_statements(self)




    def cursor_manipulation_statements(self):

        localctx = ora2epasParser.Cursor_manipulation_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_cursor_manipulation_statements)
        try:
            self.state = 2357
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2353
                self.close_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2354
                self.open_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2355
                self.fetch_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2356
                self.open_for_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Close_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(ora2epasParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(ora2epasParser.Cursor_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_close_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClose_statement" ):
                listener.enterClose_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClose_statement" ):
                listener.exitClose_statement(self)




    def close_statement(self):

        localctx = ora2epasParser.Close_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_close_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2359
            self.match(ora2epasParser.CLOSE)
            self.state = 2360
            self.cursor_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Open_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(ora2epasParser.OPEN, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(ora2epasParser.Cursor_nameContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(ora2epasParser.Expression_listContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_open_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_statement" ):
                listener.enterOpen_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_statement" ):
                listener.exitOpen_statement(self)




    def open_statement(self):

        localctx = ora2epasParser.Open_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_open_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2362
            self.match(ora2epasParser.OPEN)
            self.state = 2363
            self.cursor_name()
            self.state = 2365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LEFT_PAREN:
                self.state = 2364
                self.expression_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.it1 = None # Token

        def FETCH(self):
            return self.getToken(ora2epasParser.FETCH, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(ora2epasParser.Cursor_nameContext,0)


        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Variable_nameContext,i)


        def BULK(self):
            return self.getToken(ora2epasParser.BULK, 0)

        def COLLECT(self):
            return self.getToken(ora2epasParser.COLLECT, 0)

        def INTO(self):
            return self.getToken(ora2epasParser.INTO, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_fetch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_statement" ):
                listener.enterFetch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_statement" ):
                listener.exitFetch_statement(self)




    def fetch_statement(self):

        localctx = ora2epasParser.Fetch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_fetch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2367
            self.match(ora2epasParser.FETCH)
            self.state = 2368
            self.cursor_name()
            self.state = 2389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.INTO]:
                self.state = 2369
                localctx.it1 = self.match(ora2epasParser.INTO)
                self.state = 2370
                self.variable_name()
                self.state = 2375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 2371
                    self.match(ora2epasParser.COMMA)
                    self.state = 2372
                    self.variable_name()
                    self.state = 2377
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [ora2epasParser.BULK]:
                self.state = 2378
                self.match(ora2epasParser.BULK)
                self.state = 2379
                self.match(ora2epasParser.COLLECT)
                self.state = 2380
                self.match(ora2epasParser.INTO)
                self.state = 2381
                self.variable_name()
                self.state = 2386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 2382
                    self.match(ora2epasParser.COMMA)
                    self.state = 2383
                    self.variable_name()
                    self.state = 2388
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Open_for_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(ora2epasParser.OPEN, 0)

        def variable_name(self):
            return self.getTypedRuleContext(ora2epasParser.Variable_nameContext,0)


        def FOR(self):
            return self.getToken(ora2epasParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Select_statementContext,0)


        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def using_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Using_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_open_for_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_for_statement" ):
                listener.enterOpen_for_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_for_statement" ):
                listener.exitOpen_for_statement(self)




    def open_for_statement(self):

        localctx = ora2epasParser.Open_for_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_open_for_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2391
            self.match(ora2epasParser.OPEN)
            self.state = 2392
            self.variable_name()
            self.state = 2393
            self.match(ora2epasParser.FOR)
            self.state = 2396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.state = 2394
                self.select_statement()
                pass

            elif la_ == 2:
                self.state = 2395
                self.expression()
                pass


            self.state = 2399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.USING:
                self.state = 2398
                self.using_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_control_statementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_transaction_command(self):
            return self.getTypedRuleContext(ora2epasParser.Set_transaction_commandContext,0)


        def set_constraint_command(self):
            return self.getTypedRuleContext(ora2epasParser.Set_constraint_commandContext,0)


        def commit_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Commit_statementContext,0)


        def rollback_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Rollback_statementContext,0)


        def savepoint_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Savepoint_statementContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_transaction_control_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_control_statements" ):
                listener.enterTransaction_control_statements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_control_statements" ):
                listener.exitTransaction_control_statements(self)




    def transaction_control_statements(self):

        localctx = ora2epasParser.Transaction_control_statementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_transaction_control_statements)
        try:
            self.state = 2406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2401
                self.set_transaction_command()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2402
                self.set_constraint_command()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2403
                self.commit_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2404
                self.rollback_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2405
                self.savepoint_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_transaction_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(ora2epasParser.SET, 0)

        def TRANSACTION(self):
            return self.getToken(ora2epasParser.TRANSACTION, 0)

        def READ(self):
            return self.getToken(ora2epasParser.READ, 0)

        def ISOLATION(self):
            return self.getToken(ora2epasParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(ora2epasParser.LEVEL, 0)

        def USE(self):
            return self.getToken(ora2epasParser.USE, 0)

        def ROLLBACK(self):
            return self.getToken(ora2epasParser.ROLLBACK, 0)

        def SEGMENT(self):
            return self.getToken(ora2epasParser.SEGMENT, 0)

        def rollback_segment_name(self):
            return self.getTypedRuleContext(ora2epasParser.Rollback_segment_nameContext,0)


        def NAME(self):
            return self.getToken(ora2epasParser.NAME, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(ora2epasParser.Quoted_stringContext,0)


        def ONLY(self):
            return self.getToken(ora2epasParser.ONLY, 0)

        def WRITE(self):
            return self.getToken(ora2epasParser.WRITE, 0)

        def SERIALIZABLE(self):
            return self.getToken(ora2epasParser.SERIALIZABLE, 0)

        def COMMITTED(self):
            return self.getToken(ora2epasParser.COMMITTED, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_set_transaction_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_transaction_command" ):
                listener.enterSet_transaction_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_transaction_command" ):
                listener.exitSet_transaction_command(self)




    def set_transaction_command(self):

        localctx = ora2epasParser.Set_transaction_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_set_transaction_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2408
            self.match(ora2epasParser.SET)
            self.state = 2409
            self.match(ora2epasParser.TRANSACTION)
            self.state = 2423
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.READ]:
                self.state = 2410
                self.match(ora2epasParser.READ)
                self.state = 2411
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.ONLY or _la==ora2epasParser.WRITE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [ora2epasParser.ISOLATION]:
                self.state = 2412
                self.match(ora2epasParser.ISOLATION)
                self.state = 2413
                self.match(ora2epasParser.LEVEL)
                self.state = 2417
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ora2epasParser.SERIALIZABLE]:
                    self.state = 2414
                    self.match(ora2epasParser.SERIALIZABLE)
                    pass
                elif token in [ora2epasParser.READ]:
                    self.state = 2415
                    self.match(ora2epasParser.READ)
                    self.state = 2416
                    self.match(ora2epasParser.COMMITTED)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [ora2epasParser.USE]:
                self.state = 2419
                self.match(ora2epasParser.USE)
                self.state = 2420
                self.match(ora2epasParser.ROLLBACK)
                self.state = 2421
                self.match(ora2epasParser.SEGMENT)
                self.state = 2422
                self.rollback_segment_name()
                pass
            elif token in [ora2epasParser.EOF, ora2epasParser.NAME, ora2epasParser.SAVE, ora2epasParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 2427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.NAME:
                self.state = 2425
                self.match(ora2epasParser.NAME)
                self.state = 2426
                self.quoted_string()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_constraint_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(ora2epasParser.SET, 0)

        def CONSTRAINT(self):
            return self.getToken(ora2epasParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(ora2epasParser.CONSTRAINTS, 0)

        def IMMEDIATE(self):
            return self.getToken(ora2epasParser.IMMEDIATE, 0)

        def DEFERRED(self):
            return self.getToken(ora2epasParser.DEFERRED, 0)

        def ALL(self):
            return self.getToken(ora2epasParser.ALL, 0)

        def constraint_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Constraint_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Constraint_nameContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_set_constraint_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_constraint_command" ):
                listener.enterSet_constraint_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_constraint_command" ):
                listener.exitSet_constraint_command(self)




    def set_constraint_command(self):

        localctx = ora2epasParser.Set_constraint_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_set_constraint_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2429
            self.match(ora2epasParser.SET)
            self.state = 2430
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.CONSTRAINT or _la==ora2epasParser.CONSTRAINTS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2440
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.ALL]:
                self.state = 2431
                self.match(ora2epasParser.ALL)
                pass
            elif token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.state = 2432
                self.constraint_name()
                self.state = 2437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 2433
                    self.match(ora2epasParser.COMMA)
                    self.state = 2434
                    self.constraint_name()
                    self.state = 2439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 2442
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.DEFERRED or _la==ora2epasParser.IMMEDIATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Commit_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT(self):
            return self.getToken(ora2epasParser.COMMIT, 0)

        def WORK(self):
            return self.getToken(ora2epasParser.WORK, 0)

        def COMMENT(self):
            return self.getToken(ora2epasParser.COMMENT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ExpressionContext,i)


        def FORCE(self):
            return self.getToken(ora2epasParser.FORCE, 0)

        def write_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Write_clauseContext,0)


        def CORRUPT_XID(self):
            return self.getToken(ora2epasParser.CORRUPT_XID, 0)

        def CORRUPT_XID_ALL(self):
            return self.getToken(ora2epasParser.CORRUPT_XID_ALL, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_commit_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_statement" ):
                listener.enterCommit_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_statement" ):
                listener.exitCommit_statement(self)




    def commit_statement(self):

        localctx = ora2epasParser.Commit_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_commit_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2444
            self.match(ora2epasParser.COMMIT)
            self.state = 2446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.WORK:
                self.state = 2445
                self.match(ora2epasParser.WORK)


            self.state = 2461
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.COMMENT]:
                self.state = 2448
                self.match(ora2epasParser.COMMENT)
                self.state = 2449
                self.expression()
                pass
            elif token in [ora2epasParser.FORCE]:
                self.state = 2450
                self.match(ora2epasParser.FORCE)
                self.state = 2459
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
                if la_ == 1:
                    self.state = 2451
                    self.match(ora2epasParser.CORRUPT_XID)
                    self.state = 2452
                    self.expression()
                    pass

                elif la_ == 2:
                    self.state = 2453
                    self.match(ora2epasParser.CORRUPT_XID_ALL)
                    pass

                elif la_ == 3:
                    self.state = 2454
                    self.expression()
                    self.state = 2457
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ora2epasParser.COMMA:
                        self.state = 2455
                        self.match(ora2epasParser.COMMA)
                        self.state = 2456
                        self.expression()


                    pass


                pass
            elif token in [ora2epasParser.EOF, ora2epasParser.SAVE, ora2epasParser.WRITE, ora2epasParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 2464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.WRITE:
                self.state = 2463
                self.write_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Write_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(ora2epasParser.WRITE, 0)

        def WAIT(self):
            return self.getToken(ora2epasParser.WAIT, 0)

        def NOWAIT(self):
            return self.getToken(ora2epasParser.NOWAIT, 0)

        def IMMEDIATE(self):
            return self.getToken(ora2epasParser.IMMEDIATE, 0)

        def BATCH(self):
            return self.getToken(ora2epasParser.BATCH, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_write_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_clause" ):
                listener.enterWrite_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_clause" ):
                listener.exitWrite_clause(self)




    def write_clause(self):

        localctx = ora2epasParser.Write_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_write_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2466
            self.match(ora2epasParser.WRITE)
            self.state = 2468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.NOWAIT or _la==ora2epasParser.WAIT:
                self.state = 2467
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.NOWAIT or _la==ora2epasParser.WAIT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.BATCH or _la==ora2epasParser.IMMEDIATE:
                self.state = 2470
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.BATCH or _la==ora2epasParser.IMMEDIATE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rollback_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(ora2epasParser.ROLLBACK, 0)

        def WORK(self):
            return self.getToken(ora2epasParser.WORK, 0)

        def TO(self):
            return self.getToken(ora2epasParser.TO, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(ora2epasParser.Savepoint_nameContext,0)


        def FORCE(self):
            return self.getToken(ora2epasParser.FORCE, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(ora2epasParser.Quoted_stringContext,0)


        def SAVEPOINT(self):
            return self.getToken(ora2epasParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_rollback_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_statement" ):
                listener.enterRollback_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_statement" ):
                listener.exitRollback_statement(self)




    def rollback_statement(self):

        localctx = ora2epasParser.Rollback_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_rollback_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2473
            self.match(ora2epasParser.ROLLBACK)
            self.state = 2475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.WORK:
                self.state = 2474
                self.match(ora2epasParser.WORK)


            self.state = 2484
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.TO]:
                self.state = 2477
                self.match(ora2epasParser.TO)
                self.state = 2479
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                if la_ == 1:
                    self.state = 2478
                    self.match(ora2epasParser.SAVEPOINT)


                self.state = 2481
                self.savepoint_name()
                pass
            elif token in [ora2epasParser.FORCE]:
                self.state = 2482
                self.match(ora2epasParser.FORCE)
                self.state = 2483
                self.quoted_string()
                pass
            elif token in [ora2epasParser.EOF, ora2epasParser.SAVE, ora2epasParser.SEMICOLON]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Savepoint_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT(self):
            return self.getToken(ora2epasParser.SAVEPOINT, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(ora2epasParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_savepoint_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_statement" ):
                listener.enterSavepoint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_statement" ):
                listener.exitSavepoint_statement(self)




    def savepoint_statement(self):

        localctx = ora2epasParser.Savepoint_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_savepoint_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2486
            self.match(ora2epasParser.SAVEPOINT)
            self.state = 2487
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Explain_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(ora2epasParser.EXPLAIN, 0)

        def PLAN(self):
            return self.getToken(ora2epasParser.PLAN, 0)

        def FOR(self):
            return self.getToken(ora2epasParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Update_statementContext,0)


        def delete_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Insert_statementContext,0)


        def merge_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Merge_statementContext,0)


        def SET(self):
            return self.getToken(ora2epasParser.SET, 0)

        def STATEMENT_ID(self):
            return self.getToken(ora2epasParser.STATEMENT_ID, 0)

        def quoted_string(self):
            return self.getTypedRuleContext(ora2epasParser.Quoted_stringContext,0)


        def INTO(self):
            return self.getToken(ora2epasParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(ora2epasParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_explain_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_statement" ):
                listener.enterExplain_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_statement" ):
                listener.exitExplain_statement(self)




    def explain_statement(self):

        localctx = ora2epasParser.Explain_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_explain_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2489
            self.match(ora2epasParser.EXPLAIN)
            self.state = 2490
            self.match(ora2epasParser.PLAN)
            self.state = 2495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.SET:
                self.state = 2491
                self.match(ora2epasParser.SET)
                self.state = 2492
                self.match(ora2epasParser.STATEMENT_ID)
                self.state = 2493
                self.match(ora2epasParser.EQUALS_OP)
                self.state = 2494
                self.quoted_string()


            self.state = 2499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.INTO:
                self.state = 2497
                self.match(ora2epasParser.INTO)
                self.state = 2498
                self.tableview_name()


            self.state = 2501
            self.match(ora2epasParser.FOR)
            self.state = 2507
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.SELECT, ora2epasParser.WITH, ora2epasParser.LEFT_PAREN]:
                self.state = 2502
                self.select_statement()
                pass
            elif token in [ora2epasParser.UPDATE]:
                self.state = 2503
                self.update_statement()
                pass
            elif token in [ora2epasParser.DELETE]:
                self.state = 2504
                self.delete_statement()
                pass
            elif token in [ora2epasParser.INSERT]:
                self.state = 2505
                self.insert_statement()
                pass
            elif token in [ora2epasParser.MERGE]:
                self.state = 2506
                self.merge_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(ora2epasParser.SubqueryContext,0)


        def subquery_factoring_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Subquery_factoring_clauseContext,0)


        def for_update_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.For_update_clauseContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.For_update_clauseContext,i)


        def order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Order_by_clauseContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Order_by_clauseContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)




    def select_statement(self):

        localctx = ora2epasParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.WITH:
                self.state = 2509
                self.subquery_factoring_clause()


            self.state = 2512
            self.subquery()
            self.state = 2517
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,252,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2515
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ora2epasParser.FOR]:
                        self.state = 2513
                        self.for_update_clause()
                        pass
                    elif token in [ora2epasParser.ORDER]:
                        self.state = 2514
                        self.order_by_clause()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2519
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subquery_factoring_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(ora2epasParser.WITH, 0)

        def factoring_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Factoring_elementContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Factoring_elementContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_subquery_factoring_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_factoring_clause" ):
                listener.enterSubquery_factoring_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_factoring_clause" ):
                listener.exitSubquery_factoring_clause(self)




    def subquery_factoring_clause(self):

        localctx = ora2epasParser.Subquery_factoring_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_subquery_factoring_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2520
            self.match(ora2epasParser.WITH)
            self.state = 2521
            self.factoring_element()
            self.state = 2526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 2522
                self.match(ora2epasParser.COMMA)
                self.state = 2523
                self.factoring_element()
                self.state = 2528
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factoring_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_name(self):
            return self.getTypedRuleContext(ora2epasParser.Query_nameContext,0)


        def AS(self):
            return self.getToken(ora2epasParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(ora2epasParser.SubqueryContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_nameContext,i)


        def order_by_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Order_by_clauseContext,0)


        def search_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Search_clauseContext,0)


        def cycle_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Cycle_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_factoring_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactoring_element" ):
                listener.enterFactoring_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactoring_element" ):
                listener.exitFactoring_element(self)




    def factoring_element(self):

        localctx = ora2epasParser.Factoring_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_factoring_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2529
            self.query_name()
            self.state = 2541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LEFT_PAREN:
                self.state = 2530
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 2531
                self.column_name()
                self.state = 2536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 2532
                    self.match(ora2epasParser.COMMA)
                    self.state = 2533
                    self.column_name()
                    self.state = 2538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2539
                self.match(ora2epasParser.RIGHT_PAREN)


            self.state = 2543
            self.match(ora2epasParser.AS)
            self.state = 2544
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 2545
            self.subquery()
            self.state = 2547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.ORDER:
                self.state = 2546
                self.order_by_clause()


            self.state = 2549
            self.match(ora2epasParser.RIGHT_PAREN)
            self.state = 2551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.SEARCH:
                self.state = 2550
                self.search_clause()


            self.state = 2554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.CYCLE:
                self.state = 2553
                self.cycle_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEARCH(self):
            return self.getToken(ora2epasParser.SEARCH, 0)

        def FIRST(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.FIRST)
            else:
                return self.getToken(ora2epasParser.FIRST, i)

        def BY(self):
            return self.getToken(ora2epasParser.BY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_nameContext,i)


        def SET(self):
            return self.getToken(ora2epasParser.SET, 0)

        def DEPTH(self):
            return self.getToken(ora2epasParser.DEPTH, 0)

        def BREADTH(self):
            return self.getToken(ora2epasParser.BREADTH, 0)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.ASC)
            else:
                return self.getToken(ora2epasParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.DESC)
            else:
                return self.getToken(ora2epasParser.DESC, i)

        def NULLS(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.NULLS)
            else:
                return self.getToken(ora2epasParser.NULLS, i)

        def LAST(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.LAST)
            else:
                return self.getToken(ora2epasParser.LAST, i)

        def getRuleIndex(self):
            return ora2epasParser.RULE_search_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_clause" ):
                listener.enterSearch_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_clause" ):
                listener.exitSearch_clause(self)




    def search_clause(self):

        localctx = ora2epasParser.Search_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_search_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2556
            self.match(ora2epasParser.SEARCH)
            self.state = 2557
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.BREADTH or _la==ora2epasParser.DEPTH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2558
            self.match(ora2epasParser.FIRST)
            self.state = 2559
            self.match(ora2epasParser.BY)
            self.state = 2560
            self.column_name()
            self.state = 2562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.ASC:
                self.state = 2561
                self.match(ora2epasParser.ASC)


            self.state = 2565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.DESC:
                self.state = 2564
                self.match(ora2epasParser.DESC)


            self.state = 2569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.state = 2567
                self.match(ora2epasParser.NULLS)
                self.state = 2568
                self.match(ora2epasParser.FIRST)


            self.state = 2573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.NULLS:
                self.state = 2571
                self.match(ora2epasParser.NULLS)
                self.state = 2572
                self.match(ora2epasParser.LAST)


            self.state = 2593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 2575
                self.match(ora2epasParser.COMMA)
                self.state = 2576
                self.column_name()
                self.state = 2578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.ASC:
                    self.state = 2577
                    self.match(ora2epasParser.ASC)


                self.state = 2581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.DESC:
                    self.state = 2580
                    self.match(ora2epasParser.DESC)


                self.state = 2585
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
                if la_ == 1:
                    self.state = 2583
                    self.match(ora2epasParser.NULLS)
                    self.state = 2584
                    self.match(ora2epasParser.FIRST)


                self.state = 2589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.NULLS:
                    self.state = 2587
                    self.match(ora2epasParser.NULLS)
                    self.state = 2588
                    self.match(ora2epasParser.LAST)


                self.state = 2595
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2596
            self.match(ora2epasParser.SET)
            self.state = 2597
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cycle_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CYCLE(self):
            return self.getToken(ora2epasParser.CYCLE, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_nameContext,i)


        def SET(self):
            return self.getToken(ora2epasParser.SET, 0)

        def TO(self):
            return self.getToken(ora2epasParser.TO, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ExpressionContext,i)


        def DEFAULT(self):
            return self.getToken(ora2epasParser.DEFAULT, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_cycle_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCycle_clause" ):
                listener.enterCycle_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCycle_clause" ):
                listener.exitCycle_clause(self)




    def cycle_clause(self):

        localctx = ora2epasParser.Cycle_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_cycle_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2599
            self.match(ora2epasParser.CYCLE)
            self.state = 2600
            self.column_name()
            self.state = 2605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 2601
                self.match(ora2epasParser.COMMA)
                self.state = 2602
                self.column_name()
                self.state = 2607
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2608
            self.match(ora2epasParser.SET)
            self.state = 2609
            self.column_name()
            self.state = 2610
            self.match(ora2epasParser.TO)
            self.state = 2611
            self.expression()
            self.state = 2612
            self.match(ora2epasParser.DEFAULT)
            self.state = 2613
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery_basic_elements(self):
            return self.getTypedRuleContext(ora2epasParser.Subquery_basic_elementsContext,0)


        def subquery_operation_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Subquery_operation_partContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Subquery_operation_partContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = ora2epasParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2615
            self.subquery_basic_elements()
            self.state = 2619
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,269,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2616
                    self.subquery_operation_part() 
                self.state = 2621
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,269,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subquery_operation_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery_basic_elements(self):
            return self.getTypedRuleContext(ora2epasParser.Subquery_basic_elementsContext,0)


        def UNION(self):
            return self.getToken(ora2epasParser.UNION, 0)

        def INTERSECT(self):
            return self.getToken(ora2epasParser.INTERSECT, 0)

        def MINUS(self):
            return self.getToken(ora2epasParser.MINUS, 0)

        def ALL(self):
            return self.getToken(ora2epasParser.ALL, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_subquery_operation_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_operation_part" ):
                listener.enterSubquery_operation_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_operation_part" ):
                listener.exitSubquery_operation_part(self)




    def subquery_operation_part(self):

        localctx = ora2epasParser.Subquery_operation_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_subquery_operation_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2628
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.UNION]:
                self.state = 2622
                self.match(ora2epasParser.UNION)
                self.state = 2624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.ALL:
                    self.state = 2623
                    self.match(ora2epasParser.ALL)


                pass
            elif token in [ora2epasParser.INTERSECT]:
                self.state = 2626
                self.match(ora2epasParser.INTERSECT)
                pass
            elif token in [ora2epasParser.MINUS]:
                self.state = 2627
                self.match(ora2epasParser.MINUS)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2630
            self.subquery_basic_elements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subquery_basic_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_block(self):
            return self.getTypedRuleContext(ora2epasParser.Query_blockContext,0)


        def subquery(self):
            return self.getTypedRuleContext(ora2epasParser.SubqueryContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_subquery_basic_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_basic_elements" ):
                listener.enterSubquery_basic_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_basic_elements" ):
                listener.exitSubquery_basic_elements(self)




    def subquery_basic_elements(self):

        localctx = ora2epasParser.Subquery_basic_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_subquery_basic_elements)
        try:
            self.state = 2637
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2632
                self.query_block()
                pass
            elif token in [ora2epasParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2633
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 2634
                self.subquery()
                self.state = 2635
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(ora2epasParser.SELECT, 0)

        def from_clause(self):
            return self.getTypedRuleContext(ora2epasParser.From_clauseContext,0)


        def selected_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Selected_elementContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Selected_elementContext,i)


        def into_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Into_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Where_clauseContext,0)


        def hierarchical_query_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Hierarchical_query_clauseContext,0)


        def group_by_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Group_by_clauseContext,0)


        def model_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Model_clauseContext,0)


        def DISTINCT(self):
            return self.getToken(ora2epasParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(ora2epasParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(ora2epasParser.ALL, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_query_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_block" ):
                listener.enterQuery_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_block" ):
                listener.exitQuery_block(self)




    def query_block(self):

        localctx = ora2epasParser.Query_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_query_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2639
            self.match(ora2epasParser.SELECT)
            self.state = 2641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.state = 2640
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.ALL or _la==ora2epasParser.DISTINCT or _la==ora2epasParser.UNIQUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.ASTERISK]:
                self.state = 2643
                self.match(ora2epasParser.ASTERISK)
                pass
            elif token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ALL, ora2epasParser.ANALYZE, ora2epasParser.ANY, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CASE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COALESCE, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONNECT_BY_ROOT, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DATE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DISTINCT, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXISTS, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FALSE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NOT, ora2epasParser.NULL, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.PRIOR, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUE, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.DECODE, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.NVL, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROUND, ora2epasParser.ROW_NUMBER, ora2epasParser.SUBSTR, ora2epasParser.TO_CHAR, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.NATIONAL_CHAR_STRING_LIT, ora2epasParser.UNSIGNED_INTEGER, ora2epasParser.APPROXIMATE_NUM_LIT, ora2epasParser.CHAR_STRING, ora2epasParser.DELIMITED_ID, ora2epasParser.LEFT_PAREN, ora2epasParser.PLUS_SIGN, ora2epasParser.MINUS_SIGN, ora2epasParser.BINDVAR, ora2epasParser.COLON, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.state = 2644
                self.selected_element()
                self.state = 2649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 2645
                    self.match(ora2epasParser.COMMA)
                    self.state = 2646
                    self.selected_element()
                    self.state = 2651
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 2655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.BULK or _la==ora2epasParser.INTO:
                self.state = 2654
                self.into_clause()


            self.state = 2657
            self.from_clause()
            self.state = 2659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.state = 2658
                self.where_clause()


            self.state = 2662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.state = 2661
                self.hierarchical_query_clause()


            self.state = 2665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.state = 2664
                self.group_by_clause()


            self.state = 2668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.state = 2667
                self.model_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selected_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list_elements(self):
            return self.getTypedRuleContext(ora2epasParser.Select_list_elementsContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(ora2epasParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_selected_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_element" ):
                listener.enterSelected_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_element" ):
                listener.exitSelected_element(self)




    def selected_element(self):

        localctx = ora2epasParser.Selected_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_selected_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2670
            self.select_list_elements()
            self.state = 2672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.state = 2671
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class From_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(ora2epasParser.FROM, 0)

        def table_ref_list(self):
            return self.getTypedRuleContext(ora2epasParser.Table_ref_listContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = ora2epasParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2674
            self.match(ora2epasParser.FROM)
            self.state = 2675
            self.table_ref_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_list_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(ora2epasParser.Tableview_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_select_list_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list_elements" ):
                listener.enterSelect_list_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list_elements" ):
                listener.exitSelect_list_elements(self)




    def select_list_elements(self):

        localctx = ora2epasParser.Select_list_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_select_list_elements)
        try:
            self.state = 2682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2677
                self.tableview_name()
                self.state = 2678
                self.match(ora2epasParser.PERIOD)
                self.state = 2679
                self.match(ora2epasParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2681
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_ref_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Table_refContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Table_refContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_table_ref_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref_list" ):
                listener.enterTable_ref_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref_list" ):
                listener.exitTable_ref_list(self)




    def table_ref_list(self):

        localctx = ora2epasParser.Table_ref_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_table_ref_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2684
            self.table_ref()
            self.state = 2689
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,283,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2685
                    self.match(ora2epasParser.COMMA)
                    self.state = 2686
                    self.table_ref() 
                self.state = 2691
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,283,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_ref_aux(self):
            return self.getTypedRuleContext(ora2epasParser.Table_ref_auxContext,0)


        def join_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Join_clauseContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Join_clauseContext,i)


        def pivot_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Pivot_clauseContext,0)


        def unpivot_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Unpivot_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_table_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref" ):
                listener.enterTable_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref" ):
                listener.exitTable_ref(self)




    def table_ref(self):

        localctx = ora2epasParser.Table_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_table_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2692
            self.table_ref_aux()
            self.state = 2696
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,284,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2693
                    self.join_clause() 
                self.state = 2698
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,284,self._ctx)

            self.state = 2701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.state = 2699
                self.pivot_clause()

            elif la_ == 2:
                self.state = 2700
                self.unpivot_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_ref_auxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_ref_aux_internal(self):
            return self.getTypedRuleContext(ora2epasParser.Table_ref_aux_internalContext,0)


        def flashback_query_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Flashback_query_clauseContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Flashback_query_clauseContext,i)


        def table_alias(self):
            return self.getTypedRuleContext(ora2epasParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_table_ref_aux

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref_aux" ):
                listener.enterTable_ref_aux(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref_aux" ):
                listener.exitTable_ref_aux(self)




    def table_ref_aux(self):

        localctx = ora2epasParser.Table_ref_auxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_table_ref_aux)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2703
            self.table_ref_aux_internal()
            self.state = 2707
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,286,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2704
                    self.flashback_query_clause() 
                self.state = 2709
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,286,self._ctx)

            self.state = 2711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.state = 2710
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_ref_aux_internalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ora2epasParser.RULE_table_ref_aux_internal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Table_ref_aux_internal_threeContext(Table_ref_aux_internalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ora2epasParser.Table_ref_aux_internalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ONLY(self):
            return self.getToken(ora2epasParser.ONLY, 0)
        def dml_table_expression_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Dml_table_expression_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref_aux_internal_three" ):
                listener.enterTable_ref_aux_internal_three(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref_aux_internal_three" ):
                listener.exitTable_ref_aux_internal_three(self)


    class Table_ref_aux_internal_oneContext(Table_ref_aux_internalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ora2epasParser.Table_ref_aux_internalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dml_table_expression_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Dml_table_expression_clauseContext,0)

        def pivot_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Pivot_clauseContext,0)

        def unpivot_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Unpivot_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref_aux_internal_one" ):
                listener.enterTable_ref_aux_internal_one(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref_aux_internal_one" ):
                listener.exitTable_ref_aux_internal_one(self)


    class Table_ref_aux_internal_twoContext(Table_ref_aux_internalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ora2epasParser.Table_ref_aux_internalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_ref(self):
            return self.getTypedRuleContext(ora2epasParser.Table_refContext,0)

        def subquery_operation_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Subquery_operation_partContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Subquery_operation_partContext,i)

        def pivot_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Pivot_clauseContext,0)

        def unpivot_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Unpivot_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_ref_aux_internal_two" ):
                listener.enterTable_ref_aux_internal_two(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_ref_aux_internal_two" ):
                listener.exitTable_ref_aux_internal_two(self)



    def table_ref_aux_internal(self):

        localctx = ora2epasParser.Table_ref_aux_internalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_table_ref_aux_internal)
        self._la = 0 # Token type
        try:
            self.state = 2736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                localctx = ora2epasParser.Table_ref_aux_internal_oneContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2713
                self.dml_table_expression_clause()
                self.state = 2716
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
                if la_ == 1:
                    self.state = 2714
                    self.pivot_clause()

                elif la_ == 2:
                    self.state = 2715
                    self.unpivot_clause()


                pass

            elif la_ == 2:
                localctx = ora2epasParser.Table_ref_aux_internal_twoContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2718
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 2719
                self.table_ref()
                self.state = 2723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.INTERSECT or _la==ora2epasParser.MINUS or _la==ora2epasParser.UNION:
                    self.state = 2720
                    self.subquery_operation_part()
                    self.state = 2725
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2726
                self.match(ora2epasParser.RIGHT_PAREN)
                self.state = 2729
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                if la_ == 1:
                    self.state = 2727
                    self.pivot_clause()

                elif la_ == 2:
                    self.state = 2728
                    self.unpivot_clause()


                pass

            elif la_ == 3:
                localctx = ora2epasParser.Table_ref_aux_internal_threeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2731
                self.match(ora2epasParser.ONLY)
                self.state = 2732
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 2733
                self.dml_table_expression_clause()
                self.state = 2734
                self.match(ora2epasParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(ora2epasParser.JOIN, 0)

        def table_ref_aux(self):
            return self.getTypedRuleContext(ora2epasParser.Table_ref_auxContext,0)


        def query_partition_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Query_partition_clauseContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Query_partition_clauseContext,i)


        def INNER(self):
            return self.getToken(ora2epasParser.INNER, 0)

        def outer_join_type(self):
            return self.getTypedRuleContext(ora2epasParser.Outer_join_typeContext,0)


        def join_on_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Join_on_partContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Join_on_partContext,i)


        def join_using_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Join_using_partContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Join_using_partContext,i)


        def CROSS(self):
            return self.getToken(ora2epasParser.CROSS, 0)

        def NATURAL(self):
            return self.getToken(ora2epasParser.NATURAL, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = ora2epasParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.PARTITION:
                self.state = 2738
                self.query_partition_clause()


            self.state = 2742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.CROSS or _la==ora2epasParser.NATURAL:
                self.state = 2741
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.CROSS or _la==ora2epasParser.NATURAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2746
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.INNER]:
                self.state = 2744
                self.match(ora2epasParser.INNER)
                pass
            elif token in [ora2epasParser.FULL, ora2epasParser.LEFT, ora2epasParser.RIGHT]:
                self.state = 2745
                self.outer_join_type()
                pass
            elif token in [ora2epasParser.JOIN]:
                pass
            else:
                pass
            self.state = 2748
            self.match(ora2epasParser.JOIN)
            self.state = 2749
            self.table_ref_aux()
            self.state = 2751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 2750
                self.query_partition_clause()


            self.state = 2757
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,297,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2755
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ora2epasParser.ON]:
                        self.state = 2753
                        self.join_on_part()
                        pass
                    elif token in [ora2epasParser.USING]:
                        self.state = 2754
                        self.join_using_part()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2759
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,297,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_on_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(ora2epasParser.ON, 0)

        def condition(self):
            return self.getTypedRuleContext(ora2epasParser.ConditionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_join_on_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_on_part" ):
                listener.enterJoin_on_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_on_part" ):
                listener.exitJoin_on_part(self)




    def join_on_part(self):

        localctx = ora2epasParser.Join_on_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_join_on_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2760
            self.match(ora2epasParser.ON)
            self.state = 2761
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_using_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(ora2epasParser.USING, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_nameContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_join_using_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_using_part" ):
                listener.enterJoin_using_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_using_part" ):
                listener.exitJoin_using_part(self)




    def join_using_part(self):

        localctx = ora2epasParser.Join_using_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_join_using_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2763
            self.match(ora2epasParser.USING)
            self.state = 2764
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 2765
            self.column_name()
            self.state = 2770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 2766
                self.match(ora2epasParser.COMMA)
                self.state = 2767
                self.column_name()
                self.state = 2772
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2773
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Outer_join_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FULL(self):
            return self.getToken(ora2epasParser.FULL, 0)

        def LEFT(self):
            return self.getToken(ora2epasParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(ora2epasParser.RIGHT, 0)

        def OUTER(self):
            return self.getToken(ora2epasParser.OUTER, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_outer_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuter_join_type" ):
                listener.enterOuter_join_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuter_join_type" ):
                listener.exitOuter_join_type(self)




    def outer_join_type(self):

        localctx = ora2epasParser.Outer_join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_outer_join_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2775
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.FULL or _la==ora2epasParser.LEFT or _la==ora2epasParser.RIGHT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.OUTER:
                self.state = 2776
                self.match(ora2epasParser.OUTER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_partition_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(ora2epasParser.PARTITION, 0)

        def BY(self):
            return self.getToken(ora2epasParser.BY, 0)

        def subquery(self):
            return self.getTypedRuleContext(ora2epasParser.SubqueryContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(ora2epasParser.Expression_listContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ExpressionContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_query_partition_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_partition_clause" ):
                listener.enterQuery_partition_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_partition_clause" ):
                listener.exitQuery_partition_clause(self)




    def query_partition_clause(self):

        localctx = ora2epasParser.Query_partition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_query_partition_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2779
            self.match(ora2epasParser.PARTITION)
            self.state = 2780
            self.match(ora2epasParser.BY)
            self.state = 2794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2781
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 2782
                self.subquery()
                self.state = 2783
                self.match(ora2epasParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 2785
                self.expression_list()
                pass

            elif la_ == 3:
                self.state = 2786
                self.expression()
                self.state = 2791
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,300,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2787
                        self.match(ora2epasParser.COMMA)
                        self.state = 2788
                        self.expression() 
                    self.state = 2793
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,300,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flashback_query_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSIONS(self):
            return self.getToken(ora2epasParser.VERSIONS, 0)

        def BETWEEN(self):
            return self.getToken(ora2epasParser.BETWEEN, 0)

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def SCN(self):
            return self.getToken(ora2epasParser.SCN, 0)

        def TIMESTAMP(self):
            return self.getToken(ora2epasParser.TIMESTAMP, 0)

        def AS(self):
            return self.getToken(ora2epasParser.AS, 0)

        def OF(self):
            return self.getToken(ora2epasParser.OF, 0)

        def SNAPSHOT(self):
            return self.getToken(ora2epasParser.SNAPSHOT, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_flashback_query_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlashback_query_clause" ):
                listener.enterFlashback_query_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlashback_query_clause" ):
                listener.exitFlashback_query_clause(self)




    def flashback_query_clause(self):

        localctx = ora2epasParser.Flashback_query_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_flashback_query_clause)
        self._la = 0 # Token type
        try:
            self.state = 2804
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.VERSIONS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2796
                self.match(ora2epasParser.VERSIONS)
                self.state = 2797
                self.match(ora2epasParser.BETWEEN)
                self.state = 2798
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.SCN or _la==ora2epasParser.TIMESTAMP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2799
                self.expression()
                pass
            elif token in [ora2epasParser.AS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2800
                self.match(ora2epasParser.AS)
                self.state = 2801
                self.match(ora2epasParser.OF)
                self.state = 2802
                _la = self._input.LA(1)
                if not(((((_la - 333)) & ~0x3f) == 0 and ((1 << (_la - 333)) & ((1 << (ora2epasParser.SCN - 333)) | (1 << (ora2epasParser.SNAPSHOT - 333)) | (1 << (ora2epasParser.TIMESTAMP - 333)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2803
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIVOT(self):
            return self.getToken(ora2epasParser.PIVOT, 0)

        def pivot_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Pivot_elementContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Pivot_elementContext,i)


        def pivot_for_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Pivot_for_clauseContext,0)


        def pivot_in_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Pivot_in_clauseContext,0)


        def XML(self):
            return self.getToken(ora2epasParser.XML, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_pivot_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_clause" ):
                listener.enterPivot_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_clause" ):
                listener.exitPivot_clause(self)




    def pivot_clause(self):

        localctx = ora2epasParser.Pivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_pivot_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2806
            self.match(ora2epasParser.PIVOT)
            self.state = 2808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.XML:
                self.state = 2807
                self.match(ora2epasParser.XML)


            self.state = 2810
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 2811
            self.pivot_element()
            self.state = 2816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 2812
                self.match(ora2epasParser.COMMA)
                self.state = 2813
                self.pivot_element()
                self.state = 2818
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2819
            self.pivot_for_clause()
            self.state = 2820
            self.pivot_in_clause()
            self.state = 2821
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function_name(self):
            return self.getTypedRuleContext(ora2epasParser.Aggregate_function_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(ora2epasParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_pivot_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_element" ):
                listener.enterPivot_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_element" ):
                listener.exitPivot_element(self)




    def pivot_element(self):

        localctx = ora2epasParser.Pivot_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_pivot_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2823
            self.aggregate_function_name()
            self.state = 2824
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 2825
            self.expression()
            self.state = 2826
            self.match(ora2epasParser.RIGHT_PAREN)
            self.state = 2828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.AS) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)) | (1 << (ora2epasParser.NATIONAL_CHAR_STRING_LIT - 451)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (ora2epasParser.CHAR_STRING - 521)) | (1 << (ora2epasParser.DELIMITED_ID - 521)) | (1 << (ora2epasParser.INTRODUCER - 521)) | (1 << (ora2epasParser.REGULAR_ID - 521)))) != 0):
                self.state = 2827
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_for_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(ora2epasParser.FOR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_nameContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_pivot_for_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_for_clause" ):
                listener.enterPivot_for_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_for_clause" ):
                listener.exitPivot_for_clause(self)




    def pivot_for_clause(self):

        localctx = ora2epasParser.Pivot_for_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_pivot_for_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2830
            self.match(ora2epasParser.FOR)
            self.state = 2843
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.state = 2831
                self.column_name()
                pass
            elif token in [ora2epasParser.LEFT_PAREN]:
                self.state = 2832
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 2833
                self.column_name()
                self.state = 2838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 2834
                    self.match(ora2epasParser.COMMA)
                    self.state = 2835
                    self.column_name()
                    self.state = 2840
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2841
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_in_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(ora2epasParser.IN, 0)

        def subquery(self):
            return self.getTypedRuleContext(ora2epasParser.SubqueryContext,0)


        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.ANY)
            else:
                return self.getToken(ora2epasParser.ANY, i)

        def pivot_in_clause_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Pivot_in_clause_elementContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Pivot_in_clause_elementContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_pivot_in_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_in_clause" ):
                listener.enterPivot_in_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_in_clause" ):
                listener.exitPivot_in_clause(self)




    def pivot_in_clause(self):

        localctx = ora2epasParser.Pivot_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_pivot_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2845
            self.match(ora2epasParser.IN)
            self.state = 2846
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 2864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.state = 2847
                self.subquery()
                pass

            elif la_ == 2:
                self.state = 2848
                self.match(ora2epasParser.ANY)
                self.state = 2853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 2849
                    self.match(ora2epasParser.COMMA)
                    self.state = 2850
                    self.match(ora2epasParser.ANY)
                    self.state = 2855
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2856
                self.pivot_in_clause_element()
                self.state = 2861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 2857
                    self.match(ora2epasParser.COMMA)
                    self.state = 2858
                    self.pivot_in_clause_element()
                    self.state = 2863
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2866
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_in_clause_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pivot_in_clause_elements(self):
            return self.getTypedRuleContext(ora2epasParser.Pivot_in_clause_elementsContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(ora2epasParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_pivot_in_clause_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_in_clause_element" ):
                listener.enterPivot_in_clause_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_in_clause_element" ):
                listener.exitPivot_in_clause_element(self)




    def pivot_in_clause_element(self):

        localctx = ora2epasParser.Pivot_in_clause_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_pivot_in_clause_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2868
            self.pivot_in_clause_elements()
            self.state = 2870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.AS) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)) | (1 << (ora2epasParser.NATIONAL_CHAR_STRING_LIT - 451)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (ora2epasParser.CHAR_STRING - 521)) | (1 << (ora2epasParser.DELIMITED_ID - 521)) | (1 << (ora2epasParser.INTRODUCER - 521)) | (1 << (ora2epasParser.REGULAR_ID - 521)))) != 0):
                self.state = 2869
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pivot_in_clause_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(ora2epasParser.Expression_listContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_pivot_in_clause_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_in_clause_elements" ):
                listener.enterPivot_in_clause_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_in_clause_elements" ):
                listener.exitPivot_in_clause_elements(self)




    def pivot_in_clause_elements(self):

        localctx = ora2epasParser.Pivot_in_clause_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_pivot_in_clause_elements)
        try:
            self.state = 2874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2872
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2873
                self.expression_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unpivot_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNPIVOT(self):
            return self.getToken(ora2epasParser.UNPIVOT, 0)

        def pivot_for_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Pivot_for_clauseContext,0)


        def unpivot_in_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Unpivot_in_clauseContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_nameContext,i)


        def NULLS(self):
            return self.getToken(ora2epasParser.NULLS, 0)

        def INCLUDE(self):
            return self.getToken(ora2epasParser.INCLUDE, 0)

        def EXCLUDE(self):
            return self.getToken(ora2epasParser.EXCLUDE, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_unpivot_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_clause" ):
                listener.enterUnpivot_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_clause" ):
                listener.exitUnpivot_clause(self)




    def unpivot_clause(self):

        localctx = ora2epasParser.Unpivot_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_unpivot_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2876
            self.match(ora2epasParser.UNPIVOT)
            self.state = 2879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.EXCLUDE or _la==ora2epasParser.INCLUDE:
                self.state = 2877
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.EXCLUDE or _la==ora2epasParser.INCLUDE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2878
                self.match(ora2epasParser.NULLS)


            self.state = 2881
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 2894
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.state = 2882
                self.column_name()
                pass
            elif token in [ora2epasParser.LEFT_PAREN]:
                self.state = 2883
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 2884
                self.column_name()
                self.state = 2889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 2885
                    self.match(ora2epasParser.COMMA)
                    self.state = 2886
                    self.column_name()
                    self.state = 2891
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2892
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2896
            self.pivot_for_clause()
            self.state = 2897
            self.unpivot_in_clause()
            self.state = 2898
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unpivot_in_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(ora2epasParser.IN, 0)

        def unpivot_in_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Unpivot_in_elementsContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Unpivot_in_elementsContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_unpivot_in_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_in_clause" ):
                listener.enterUnpivot_in_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_in_clause" ):
                listener.exitUnpivot_in_clause(self)




    def unpivot_in_clause(self):

        localctx = ora2epasParser.Unpivot_in_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_unpivot_in_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2900
            self.match(ora2epasParser.IN)
            self.state = 2901
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 2902
            self.unpivot_in_elements()
            self.state = 2907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 2903
                self.match(ora2epasParser.COMMA)
                self.state = 2904
                self.unpivot_in_elements()
                self.state = 2909
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2910
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unpivot_in_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_nameContext,i)


        def AS(self):
            return self.getToken(ora2epasParser.AS, 0)

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ConstantContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ConstantContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_unpivot_in_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_in_elements" ):
                listener.enterUnpivot_in_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_in_elements" ):
                listener.exitUnpivot_in_elements(self)




    def unpivot_in_elements(self):

        localctx = ora2epasParser.Unpivot_in_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_unpivot_in_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2924
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.state = 2912
                self.column_name()
                pass
            elif token in [ora2epasParser.LEFT_PAREN]:
                self.state = 2913
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 2914
                self.column_name()
                self.state = 2919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 2915
                    self.match(ora2epasParser.COMMA)
                    self.state = 2916
                    self.column_name()
                    self.state = 2921
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2922
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.AS:
                self.state = 2926
                self.match(ora2epasParser.AS)
                self.state = 2939
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ora2epasParser.DATE, ora2epasParser.DBTIMEZONE, ora2epasParser.DEFAULT, ora2epasParser.FALSE, ora2epasParser.INTERVAL, ora2epasParser.MAXVALUE, ora2epasParser.MINVALUE, ora2epasParser.NULL, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.TIMESTAMP, ora2epasParser.TRUE, ora2epasParser.NATIONAL_CHAR_STRING_LIT, ora2epasParser.UNSIGNED_INTEGER, ora2epasParser.APPROXIMATE_NUM_LIT, ora2epasParser.CHAR_STRING]:
                    self.state = 2927
                    self.constant()
                    pass
                elif token in [ora2epasParser.LEFT_PAREN]:
                    self.state = 2928
                    self.match(ora2epasParser.LEFT_PAREN)
                    self.state = 2929
                    self.constant()
                    self.state = 2934
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ora2epasParser.COMMA:
                        self.state = 2930
                        self.match(ora2epasParser.COMMA)
                        self.state = 2931
                        self.constant()
                        self.state = 2936
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2937
                    self.match(ora2epasParser.RIGHT_PAREN)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Hierarchical_query_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT(self):
            return self.getToken(ora2epasParser.CONNECT, 0)

        def BY(self):
            return self.getToken(ora2epasParser.BY, 0)

        def condition(self):
            return self.getTypedRuleContext(ora2epasParser.ConditionContext,0)


        def NOCYCLE(self):
            return self.getToken(ora2epasParser.NOCYCLE, 0)

        def start_part(self):
            return self.getTypedRuleContext(ora2epasParser.Start_partContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_hierarchical_query_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHierarchical_query_clause" ):
                listener.enterHierarchical_query_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHierarchical_query_clause" ):
                listener.exitHierarchical_query_clause(self)




    def hierarchical_query_clause(self):

        localctx = ora2epasParser.Hierarchical_query_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_hierarchical_query_clause)
        try:
            self.state = 2960
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.CONNECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2943
                self.match(ora2epasParser.CONNECT)
                self.state = 2944
                self.match(ora2epasParser.BY)
                self.state = 2946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
                if la_ == 1:
                    self.state = 2945
                    self.match(ora2epasParser.NOCYCLE)


                self.state = 2948
                self.condition()
                self.state = 2950
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
                if la_ == 1:
                    self.state = 2949
                    self.start_part()


                pass
            elif token in [ora2epasParser.START]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2952
                self.start_part()
                self.state = 2953
                self.match(ora2epasParser.CONNECT)
                self.state = 2954
                self.match(ora2epasParser.BY)
                self.state = 2956
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
                if la_ == 1:
                    self.state = 2955
                    self.match(ora2epasParser.NOCYCLE)


                self.state = 2958
                self.condition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Start_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(ora2epasParser.START, 0)

        def WITH(self):
            return self.getToken(ora2epasParser.WITH, 0)

        def condition(self):
            return self.getTypedRuleContext(ora2epasParser.ConditionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_start_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_part" ):
                listener.enterStart_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_part" ):
                listener.exitStart_part(self)




    def start_part(self):

        localctx = ora2epasParser.Start_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_start_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2962
            self.match(ora2epasParser.START)
            self.state = 2963
            self.match(ora2epasParser.WITH)
            self.state = 2964
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(ora2epasParser.GROUP, 0)

        def BY(self):
            return self.getToken(ora2epasParser.BY, 0)

        def group_by_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Group_by_elementsContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Group_by_elementsContext,i)


        def having_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Having_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)




    def group_by_clause(self):

        localctx = ora2epasParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_group_by_clause)
        try:
            self.state = 2992
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.GROUP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2966
                self.match(ora2epasParser.GROUP)
                self.state = 2967
                self.match(ora2epasParser.BY)
                self.state = 2968
                self.group_by_elements()
                self.state = 2973
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,326,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2969
                        self.match(ora2epasParser.COMMA)
                        self.state = 2970
                        self.group_by_elements() 
                    self.state = 2975
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,326,self._ctx)

                self.state = 2977
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
                if la_ == 1:
                    self.state = 2976
                    self.having_clause()


                pass
            elif token in [ora2epasParser.HAVING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2979
                self.having_clause()
                self.state = 2990
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
                if la_ == 1:
                    self.state = 2980
                    self.match(ora2epasParser.GROUP)
                    self.state = 2981
                    self.match(ora2epasParser.BY)
                    self.state = 2982
                    self.group_by_elements()
                    self.state = 2987
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,328,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2983
                            self.match(ora2epasParser.COMMA)
                            self.state = 2984
                            self.group_by_elements() 
                        self.state = 2989
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,328,self._ctx)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grouping_sets_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Grouping_sets_clauseContext,0)


        def rollup_cube_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Rollup_cube_clauseContext,0)


        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_group_by_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_elements" ):
                listener.enterGroup_by_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_elements" ):
                listener.exitGroup_by_elements(self)




    def group_by_elements(self):

        localctx = ora2epasParser.Group_by_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_group_by_elements)
        try:
            self.state = 2997
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2994
                self.grouping_sets_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2995
                self.rollup_cube_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2996
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rollup_cube_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grouping_sets_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Grouping_sets_elementsContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Grouping_sets_elementsContext,i)


        def ROLLUP(self):
            return self.getToken(ora2epasParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(ora2epasParser.CUBE, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_rollup_cube_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup_cube_clause" ):
                listener.enterRollup_cube_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup_cube_clause" ):
                listener.exitRollup_cube_clause(self)




    def rollup_cube_clause(self):

        localctx = ora2epasParser.Rollup_cube_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_rollup_cube_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2999
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.CUBE or _la==ora2epasParser.ROLLUP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3000
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 3001
            self.grouping_sets_elements()
            self.state = 3006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 3002
                self.match(ora2epasParser.COMMA)
                self.state = 3003
                self.grouping_sets_elements()
                self.state = 3008
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3009
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grouping_sets_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPING(self):
            return self.getToken(ora2epasParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(ora2epasParser.SETS, 0)

        def grouping_sets_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Grouping_sets_elementsContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Grouping_sets_elementsContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_grouping_sets_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_clause" ):
                listener.enterGrouping_sets_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_clause" ):
                listener.exitGrouping_sets_clause(self)




    def grouping_sets_clause(self):

        localctx = ora2epasParser.Grouping_sets_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_grouping_sets_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3011
            self.match(ora2epasParser.GROUPING)
            self.state = 3012
            self.match(ora2epasParser.SETS)
            self.state = 3013
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 3014
            self.grouping_sets_elements()
            self.state = 3019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 3015
                self.match(ora2epasParser.COMMA)
                self.state = 3016
                self.grouping_sets_elements()
                self.state = 3021
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3022
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grouping_sets_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rollup_cube_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Rollup_cube_clauseContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(ora2epasParser.Expression_listContext,0)


        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_grouping_sets_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_elements" ):
                listener.enterGrouping_sets_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_elements" ):
                listener.exitGrouping_sets_elements(self)




    def grouping_sets_elements(self):

        localctx = ora2epasParser.Grouping_sets_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_grouping_sets_elements)
        try:
            self.state = 3027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3024
                self.rollup_cube_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3025
                self.expression_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3026
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Having_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(ora2epasParser.HAVING, 0)

        def condition(self):
            return self.getTypedRuleContext(ora2epasParser.ConditionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = ora2epasParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3029
            self.match(ora2epasParser.HAVING)
            self.state = 3030
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODEL(self):
            return self.getToken(ora2epasParser.MODEL, 0)

        def main_model(self):
            return self.getTypedRuleContext(ora2epasParser.Main_modelContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Cell_reference_optionsContext,i)


        def return_rows_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Return_rows_clauseContext,0)


        def reference_model(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Reference_modelContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Reference_modelContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_model_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_clause" ):
                listener.enterModel_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_clause" ):
                listener.exitModel_clause(self)




    def model_clause(self):

        localctx = ora2epasParser.Model_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_model_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3032
            self.match(ora2epasParser.MODEL)
            self.state = 3036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.IGNORE or _la==ora2epasParser.KEEP or _la==ora2epasParser.UNIQUE:
                self.state = 3033
                self.cell_reference_options()
                self.state = 3038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.RETURN:
                self.state = 3039
                self.return_rows_clause()


            self.state = 3045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.REFERENCE:
                self.state = 3042
                self.reference_model()
                self.state = 3047
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3048
            self.main_model()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cell_reference_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAV(self):
            return self.getToken(ora2epasParser.NAV, 0)

        def IGNORE(self):
            return self.getToken(ora2epasParser.IGNORE, 0)

        def KEEP(self):
            return self.getToken(ora2epasParser.KEEP, 0)

        def UNIQUE(self):
            return self.getToken(ora2epasParser.UNIQUE, 0)

        def DIMENSION(self):
            return self.getToken(ora2epasParser.DIMENSION, 0)

        def SINGLE(self):
            return self.getToken(ora2epasParser.SINGLE, 0)

        def REFERENCE(self):
            return self.getToken(ora2epasParser.REFERENCE, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_cell_reference_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCell_reference_options" ):
                listener.enterCell_reference_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCell_reference_options" ):
                listener.exitCell_reference_options(self)




    def cell_reference_options(self):

        localctx = ora2epasParser.Cell_reference_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_cell_reference_options)
        self._la = 0 # Token type
        try:
            self.state = 3058
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.IGNORE, ora2epasParser.KEEP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3050
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.IGNORE or _la==ora2epasParser.KEEP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3051
                self.match(ora2epasParser.NAV)
                pass
            elif token in [ora2epasParser.UNIQUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3052
                self.match(ora2epasParser.UNIQUE)
                self.state = 3056
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ora2epasParser.DIMENSION]:
                    self.state = 3053
                    self.match(ora2epasParser.DIMENSION)
                    pass
                elif token in [ora2epasParser.SINGLE]:
                    self.state = 3054
                    self.match(ora2epasParser.SINGLE)
                    self.state = 3055
                    self.match(ora2epasParser.REFERENCE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_rows_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(ora2epasParser.RETURN, 0)

        def ROWS(self):
            return self.getToken(ora2epasParser.ROWS, 0)

        def UPDATED(self):
            return self.getToken(ora2epasParser.UPDATED, 0)

        def ALL(self):
            return self.getToken(ora2epasParser.ALL, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_return_rows_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_rows_clause" ):
                listener.enterReturn_rows_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_rows_clause" ):
                listener.exitReturn_rows_clause(self)




    def return_rows_clause(self):

        localctx = ora2epasParser.Return_rows_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_return_rows_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3060
            self.match(ora2epasParser.RETURN)
            self.state = 3061
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.ALL or _la==ora2epasParser.UPDATED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3062
            self.match(ora2epasParser.ROWS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reference_modelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(ora2epasParser.REFERENCE, 0)

        def reference_model_name(self):
            return self.getTypedRuleContext(ora2epasParser.Reference_model_nameContext,0)


        def ON(self):
            return self.getToken(ora2epasParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(ora2epasParser.SubqueryContext,0)


        def model_column_clauses(self):
            return self.getTypedRuleContext(ora2epasParser.Model_column_clausesContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Cell_reference_optionsContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_reference_model

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_model" ):
                listener.enterReference_model(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_model" ):
                listener.exitReference_model(self)




    def reference_model(self):

        localctx = ora2epasParser.Reference_modelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_reference_model)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3064
            self.match(ora2epasParser.REFERENCE)
            self.state = 3065
            self.reference_model_name()
            self.state = 3066
            self.match(ora2epasParser.ON)
            self.state = 3067
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 3068
            self.subquery()
            self.state = 3069
            self.match(ora2epasParser.RIGHT_PAREN)
            self.state = 3070
            self.model_column_clauses()
            self.state = 3074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.IGNORE or _la==ora2epasParser.KEEP or _la==ora2epasParser.UNIQUE:
                self.state = 3071
                self.cell_reference_options()
                self.state = 3076
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Main_modelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_column_clauses(self):
            return self.getTypedRuleContext(ora2epasParser.Model_column_clausesContext,0)


        def model_rules_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Model_rules_clauseContext,0)


        def MAIN(self):
            return self.getToken(ora2epasParser.MAIN, 0)

        def main_model_name(self):
            return self.getTypedRuleContext(ora2epasParser.Main_model_nameContext,0)


        def cell_reference_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Cell_reference_optionsContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Cell_reference_optionsContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_main_model

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain_model" ):
                listener.enterMain_model(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain_model" ):
                listener.exitMain_model(self)




    def main_model(self):

        localctx = ora2epasParser.Main_modelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_main_model)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.MAIN:
                self.state = 3077
                self.match(ora2epasParser.MAIN)
                self.state = 3078
                self.main_model_name()


            self.state = 3081
            self.model_column_clauses()
            self.state = 3085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.IGNORE or _la==ora2epasParser.KEEP or _la==ora2epasParser.UNIQUE:
                self.state = 3082
                self.cell_reference_options()
                self.state = 3087
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3088
            self.model_rules_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_column_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIMENSION(self):
            return self.getToken(ora2epasParser.DIMENSION, 0)

        def BY(self):
            return self.getToken(ora2epasParser.BY, 0)

        def model_column_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Model_column_listContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Model_column_listContext,i)


        def MEASURES(self):
            return self.getToken(ora2epasParser.MEASURES, 0)

        def model_column_partition_part(self):
            return self.getTypedRuleContext(ora2epasParser.Model_column_partition_partContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_model_column_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column_clauses" ):
                listener.enterModel_column_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column_clauses" ):
                listener.exitModel_column_clauses(self)




    def model_column_clauses(self):

        localctx = ora2epasParser.Model_column_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_model_column_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.PARTITION:
                self.state = 3090
                self.model_column_partition_part()


            self.state = 3093
            self.match(ora2epasParser.DIMENSION)
            self.state = 3094
            self.match(ora2epasParser.BY)
            self.state = 3095
            self.model_column_list()
            self.state = 3096
            self.match(ora2epasParser.MEASURES)
            self.state = 3097
            self.model_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_column_partition_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(ora2epasParser.PARTITION, 0)

        def BY(self):
            return self.getToken(ora2epasParser.BY, 0)

        def model_column_list(self):
            return self.getTypedRuleContext(ora2epasParser.Model_column_listContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_model_column_partition_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column_partition_part" ):
                listener.enterModel_column_partition_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column_partition_part" ):
                listener.exitModel_column_partition_part(self)




    def model_column_partition_part(self):

        localctx = ora2epasParser.Model_column_partition_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_model_column_partition_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3099
            self.match(ora2epasParser.PARTITION)
            self.state = 3100
            self.match(ora2epasParser.BY)
            self.state = 3101
            self.model_column_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_column_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Model_columnContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Model_columnContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_model_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column_list" ):
                listener.enterModel_column_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column_list" ):
                listener.exitModel_column_list(self)




    def model_column_list(self):

        localctx = ora2epasParser.Model_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_model_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3103
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 3104
            self.model_column()
            self.state = 3109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 3105
                self.match(ora2epasParser.COMMA)
                self.state = 3106
                self.model_column()
                self.state = 3111
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3112
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def query_block(self):
            return self.getTypedRuleContext(ora2epasParser.Query_blockContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(ora2epasParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_model_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_column" ):
                listener.enterModel_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_column" ):
                listener.exitModel_column(self)




    def model_column(self):

        localctx = ora2epasParser.Model_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_model_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3116
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ALL, ora2epasParser.ANALYZE, ora2epasParser.ANY, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CASE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COALESCE, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONNECT_BY_ROOT, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DATE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DISTINCT, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXISTS, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FALSE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NOT, ora2epasParser.NULL, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.PRIOR, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUE, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.DECODE, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.NVL, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROUND, ora2epasParser.ROW_NUMBER, ora2epasParser.SUBSTR, ora2epasParser.TO_CHAR, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.NATIONAL_CHAR_STRING_LIT, ora2epasParser.UNSIGNED_INTEGER, ora2epasParser.APPROXIMATE_NUM_LIT, ora2epasParser.CHAR_STRING, ora2epasParser.DELIMITED_ID, ora2epasParser.LEFT_PAREN, ora2epasParser.PLUS_SIGN, ora2epasParser.MINUS_SIGN, ora2epasParser.BINDVAR, ora2epasParser.COLON, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.state = 3114
                self.expression()
                pass
            elif token in [ora2epasParser.SELECT]:
                self.state = 3115
                self.query_block()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.AS) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)) | (1 << (ora2epasParser.NATIONAL_CHAR_STRING_LIT - 451)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (ora2epasParser.CHAR_STRING - 521)) | (1 << (ora2epasParser.DELIMITED_ID - 521)) | (1 << (ora2epasParser.INTRODUCER - 521)) | (1 << (ora2epasParser.REGULAR_ID - 521)))) != 0):
                self.state = 3118
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_rules_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_rules_part(self):
            return self.getTypedRuleContext(ora2epasParser.Model_rules_partContext,0)


        def model_rules_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Model_rules_elementContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Model_rules_elementContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_model_rules_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_rules_clause" ):
                listener.enterModel_rules_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_rules_clause" ):
                listener.exitModel_rules_clause(self)




    def model_rules_clause(self):

        localctx = ora2epasParser.Model_rules_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_model_rules_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.RULES:
                self.state = 3121
                self.model_rules_part()


            self.state = 3124
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 3133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ALL) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ANY) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CASE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COALESCE) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ora2epasParser.CONNECT_BY_ROOT - 65)) | (1 << (ora2epasParser.CONSTANT - 65)) | (1 << (ora2epasParser.CONSTRAINT - 65)) | (1 << (ora2epasParser.CONSTRAINTS - 65)) | (1 << (ora2epasParser.CONSTRUCTOR - 65)) | (1 << (ora2epasParser.CONTENT - 65)) | (1 << (ora2epasParser.CONTEXT - 65)) | (1 << (ora2epasParser.CONTINUE - 65)) | (1 << (ora2epasParser.CONVERT - 65)) | (1 << (ora2epasParser.CORRUPT_XID - 65)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 65)) | (1 << (ora2epasParser.COST - 65)) | (1 << (ora2epasParser.COUNT - 65)) | (1 << (ora2epasParser.CROSS - 65)) | (1 << (ora2epasParser.CUBE - 65)) | (1 << (ora2epasParser.CURRENT_USER - 65)) | (1 << (ora2epasParser.CURSOR - 65)) | (1 << (ora2epasParser.CUSTOMDATUM - 65)) | (1 << (ora2epasParser.CYCLE - 65)) | (1 << (ora2epasParser.DATA - 65)) | (1 << (ora2epasParser.DATABASE - 65)) | (1 << (ora2epasParser.DATE - 65)) | (1 << (ora2epasParser.DAY - 65)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 65)) | (1 << (ora2epasParser.DBTIMEZONE - 65)) | (1 << (ora2epasParser.DDL - 65)) | (1 << (ora2epasParser.DEBUG - 65)) | (1 << (ora2epasParser.DEC - 65)) | (1 << (ora2epasParser.DECIMAL - 65)) | (1 << (ora2epasParser.DECOMPOSE - 65)) | (1 << (ora2epasParser.DECREMENT - 65)) | (1 << (ora2epasParser.DEFAULT - 65)) | (1 << (ora2epasParser.DEFAULTS - 65)) | (1 << (ora2epasParser.DEFERRED - 65)) | (1 << (ora2epasParser.DEFINER - 65)) | (1 << (ora2epasParser.DETERMINISTIC - 65)) | (1 << (ora2epasParser.DIMENSION - 65)) | (1 << (ora2epasParser.DISABLE - 65)) | (1 << (ora2epasParser.DISASSOCIATE - 65)) | (1 << (ora2epasParser.DISTINCT - 65)) | (1 << (ora2epasParser.DOCUMENT - 65)) | (1 << (ora2epasParser.DOUBLE - 65)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (ora2epasParser.EACH - 65)) | (1 << (ora2epasParser.ELEMENT - 65)) | (1 << (ora2epasParser.EMPTY - 65)) | (1 << (ora2epasParser.ENABLE - 65)) | (1 << (ora2epasParser.ENCODING - 65)) | (1 << (ora2epasParser.ENTITYESCAPING - 65)) | (1 << (ora2epasParser.ERR - 65)) | (1 << (ora2epasParser.ERRORS - 65)) | (1 << (ora2epasParser.ESCAPE - 65)) | (1 << (ora2epasParser.EVALNAME - 65)) | (1 << (ora2epasParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (ora2epasParser.EXCEPTION_INIT - 129)) | (1 << (ora2epasParser.EXCEPTIONS - 129)) | (1 << (ora2epasParser.EXCLUDE - 129)) | (1 << (ora2epasParser.EXECUTE - 129)) | (1 << (ora2epasParser.EXISTS - 129)) | (1 << (ora2epasParser.EXIT - 129)) | (1 << (ora2epasParser.EXPLAIN - 129)) | (1 << (ora2epasParser.EXTERNAL - 129)) | (1 << (ora2epasParser.EXTRACT - 129)) | (1 << (ora2epasParser.FAILURE - 129)) | (1 << (ora2epasParser.FALSE - 129)) | (1 << (ora2epasParser.FINAL - 129)) | (1 << (ora2epasParser.FIRST - 129)) | (1 << (ora2epasParser.FIRST_VALUE - 129)) | (1 << (ora2epasParser.FLOAT - 129)) | (1 << (ora2epasParser.FOLLOWING - 129)) | (1 << (ora2epasParser.FOLLOWS - 129)) | (1 << (ora2epasParser.FORALL - 129)) | (1 << (ora2epasParser.FORCE - 129)) | (1 << (ora2epasParser.FULL - 129)) | (1 << (ora2epasParser.FUNCTION - 129)) | (1 << (ora2epasParser.GROUPING - 129)) | (1 << (ora2epasParser.HASH - 129)) | (1 << (ora2epasParser.HIDE - 129)) | (1 << (ora2epasParser.HOUR - 129)) | (1 << (ora2epasParser.IGNORE - 129)) | (1 << (ora2epasParser.IMMEDIATE - 129)) | (1 << (ora2epasParser.INCLUDE - 129)) | (1 << (ora2epasParser.INCLUDING - 129)) | (1 << (ora2epasParser.INCREMENT - 129)) | (1 << (ora2epasParser.INDENT - 129)) | (1 << (ora2epasParser.INDEXED - 129)) | (1 << (ora2epasParser.INDICATOR - 129)) | (1 << (ora2epasParser.INDICES - 129)) | (1 << (ora2epasParser.INFINITE - 129)) | (1 << (ora2epasParser.INLINE - 129)) | (1 << (ora2epasParser.INNER - 129)) | (1 << (ora2epasParser.INOUT - 129)) | (1 << (ora2epasParser.INSTANTIABLE - 129)) | (1 << (ora2epasParser.INSTEAD - 129)) | (1 << (ora2epasParser.INT - 129)) | (1 << (ora2epasParser.INTEGER - 129)) | (1 << (ora2epasParser.INTERVAL - 129)) | (1 << (ora2epasParser.INVALIDATE - 129)) | (1 << (ora2epasParser.ISOLATION - 129)) | (1 << (ora2epasParser.ITERATE - 129)) | (1 << (ora2epasParser.JAVA - 129)) | (1 << (ora2epasParser.JOIN - 129)) | (1 << (ora2epasParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (ora2epasParser.LANGUAGE - 193)) | (1 << (ora2epasParser.LAST - 193)) | (1 << (ora2epasParser.LAST_VALUE - 193)) | (1 << (ora2epasParser.LEADING - 193)) | (1 << (ora2epasParser.LEFT - 193)) | (1 << (ora2epasParser.LEVEL - 193)) | (1 << (ora2epasParser.LIBRARY - 193)) | (1 << (ora2epasParser.LIKE2 - 193)) | (1 << (ora2epasParser.LIKE4 - 193)) | (1 << (ora2epasParser.LIKEC - 193)) | (1 << (ora2epasParser.LIMIT - 193)) | (1 << (ora2epasParser.LOCAL - 193)) | (1 << (ora2epasParser.LOCKED - 193)) | (1 << (ora2epasParser.LOG - 193)) | (1 << (ora2epasParser.LOGOFF - 193)) | (1 << (ora2epasParser.LOGON - 193)) | (1 << (ora2epasParser.LONG - 193)) | (1 << (ora2epasParser.LOOP - 193)) | (1 << (ora2epasParser.MAIN - 193)) | (1 << (ora2epasParser.MAP - 193)) | (1 << (ora2epasParser.MATCHED - 193)) | (1 << (ora2epasParser.MAXVALUE - 193)) | (1 << (ora2epasParser.MEASURES - 193)) | (1 << (ora2epasParser.MEMBER - 193)) | (1 << (ora2epasParser.MERGE - 193)) | (1 << (ora2epasParser.MINUTE - 193)) | (1 << (ora2epasParser.MINVALUE - 193)) | (1 << (ora2epasParser.MLSLABEL - 193)) | (1 << (ora2epasParser.MODEL - 193)) | (1 << (ora2epasParser.MODIFY - 193)) | (1 << (ora2epasParser.MONTH - 193)) | (1 << (ora2epasParser.MULTISET - 193)) | (1 << (ora2epasParser.NAME - 193)) | (1 << (ora2epasParser.NAN - 193)) | (1 << (ora2epasParser.NATURAL - 193)) | (1 << (ora2epasParser.NATURALN - 193)) | (1 << (ora2epasParser.NAV - 193)) | (1 << (ora2epasParser.NCHAR - 193)) | (1 << (ora2epasParser.NCHAR_CS - 193)) | (1 << (ora2epasParser.NCLOB - 193)) | (1 << (ora2epasParser.NESTED - 193)) | (1 << (ora2epasParser.NEW - 193)) | (1 << (ora2epasParser.NO - 193)) | (1 << (ora2epasParser.NOAUDIT - 193)) | (1 << (ora2epasParser.NOCOPY - 193)) | (1 << (ora2epasParser.NOCYCLE - 193)) | (1 << (ora2epasParser.NOENTITYESCAPING - 193)) | (1 << (ora2epasParser.NONE - 193)) | (1 << (ora2epasParser.NOSCHEMACHECK - 193)) | (1 << (ora2epasParser.NULL - 193)) | (1 << (ora2epasParser.NULLS - 193)) | (1 << (ora2epasParser.NUMBER - 193)) | (1 << (ora2epasParser.NUMERIC - 193)) | (1 << (ora2epasParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (ora2epasParser.OBJECT - 257)) | (1 << (ora2epasParser.OFF - 257)) | (1 << (ora2epasParser.OID - 257)) | (1 << (ora2epasParser.OLD - 257)) | (1 << (ora2epasParser.ONLY - 257)) | (1 << (ora2epasParser.OPEN - 257)) | (1 << (ora2epasParser.ORADATA - 257)) | (1 << (ora2epasParser.ORDINALITY - 257)) | (1 << (ora2epasParser.OSERROR - 257)) | (1 << (ora2epasParser.OUT - 257)) | (1 << (ora2epasParser.OUTER - 257)) | (1 << (ora2epasParser.OVER - 257)) | (1 << (ora2epasParser.OVERRIDING - 257)) | (1 << (ora2epasParser.PACKAGE - 257)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 257)) | (1 << (ora2epasParser.PARAMETERS - 257)) | (1 << (ora2epasParser.PARENT - 257)) | (1 << (ora2epasParser.PARTITION - 257)) | (1 << (ora2epasParser.PASSING - 257)) | (1 << (ora2epasParser.PATH - 257)) | (1 << (ora2epasParser.PIPELINED - 257)) | (1 << (ora2epasParser.PLAN - 257)) | (1 << (ora2epasParser.PLS_INTEGER - 257)) | (1 << (ora2epasParser.POSITIVE - 257)) | (1 << (ora2epasParser.POSITIVEN - 257)) | (1 << (ora2epasParser.PRAGMA - 257)) | (1 << (ora2epasParser.PRECEDING - 257)) | (1 << (ora2epasParser.PRECISION - 257)) | (1 << (ora2epasParser.PRESENT - 257)) | (1 << (ora2epasParser.PRIOR - 257)) | (1 << (ora2epasParser.RAISE - 257)) | (1 << (ora2epasParser.RANGE - 257)) | (1 << (ora2epasParser.RAW - 257)) | (1 << (ora2epasParser.READ - 257)) | (1 << (ora2epasParser.REAL - 257)) | (1 << (ora2epasParser.RECORD - 257)) | (1 << (ora2epasParser.REF - 257)) | (1 << (ora2epasParser.REFERENCE - 257)) | (1 << (ora2epasParser.REFERENCING - 257)) | (1 << (ora2epasParser.REJECT - 257)) | (1 << (ora2epasParser.RENAME - 257)) | (1 << (ora2epasParser.REPLACE - 257)) | (1 << (ora2epasParser.RESPECT - 257)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 257)) | (1 << (ora2epasParser.RESULT - 257)) | (1 << (ora2epasParser.RETURN - 257)) | (1 << (ora2epasParser.RETURNING - 257)) | (1 << (ora2epasParser.REUSE - 257)) | (1 << (ora2epasParser.REVERSE - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (ora2epasParser.RIGHT - 321)) | (1 << (ora2epasParser.ROLLBACK - 321)) | (1 << (ora2epasParser.ROLLUP - 321)) | (1 << (ora2epasParser.ROW - 321)) | (1 << (ora2epasParser.ROWID - 321)) | (1 << (ora2epasParser.ROWS - 321)) | (1 << (ora2epasParser.RULES - 321)) | (1 << (ora2epasParser.SAMPLE - 321)) | (1 << (ora2epasParser.SAVE - 321)) | (1 << (ora2epasParser.SAVEPOINT - 321)) | (1 << (ora2epasParser.SCHEMA - 321)) | (1 << (ora2epasParser.SCHEMACHECK - 321)) | (1 << (ora2epasParser.SCN - 321)) | (1 << (ora2epasParser.SECOND - 321)) | (1 << (ora2epasParser.SEED - 321)) | (1 << (ora2epasParser.SEGMENT - 321)) | (1 << (ora2epasParser.SELF - 321)) | (1 << (ora2epasParser.SEQUENTIAL - 321)) | (1 << (ora2epasParser.SERIALIZABLE - 321)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 321)) | (1 << (ora2epasParser.SERVERERROR - 321)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 321)) | (1 << (ora2epasParser.SET - 321)) | (1 << (ora2epasParser.SETS - 321)) | (1 << (ora2epasParser.SETTINGS - 321)) | (1 << (ora2epasParser.SHOW - 321)) | (1 << (ora2epasParser.SHUTDOWN - 321)) | (1 << (ora2epasParser.SIBLINGS - 321)) | (1 << (ora2epasParser.SIGNTYPE - 321)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 321)) | (1 << (ora2epasParser.SINGLE - 321)) | (1 << (ora2epasParser.SKIP_ - 321)) | (1 << (ora2epasParser.SMALLINT - 321)) | (1 << (ora2epasParser.SNAPSHOT - 321)) | (1 << (ora2epasParser.SOME - 321)) | (1 << (ora2epasParser.SPECIFICATION - 321)) | (1 << (ora2epasParser.SQLDATA - 321)) | (1 << (ora2epasParser.SQLERROR - 321)) | (1 << (ora2epasParser.STANDALONE - 321)) | (1 << (ora2epasParser.STARTUP - 321)) | (1 << (ora2epasParser.STATEMENT - 321)) | (1 << (ora2epasParser.STATEMENT_ID - 321)) | (1 << (ora2epasParser.STATIC - 321)) | (1 << (ora2epasParser.STATISTICS - 321)) | (1 << (ora2epasParser.STRING - 321)) | (1 << (ora2epasParser.SUBMULTISET - 321)) | (1 << (ora2epasParser.SUBPARTITION - 321)) | (1 << (ora2epasParser.SUBSTITUTABLE - 321)) | (1 << (ora2epasParser.SUBTYPE - 321)) | (1 << (ora2epasParser.SUCCESS - 321)) | (1 << (ora2epasParser.SUSPEND - 321)) | (1 << (ora2epasParser.TIME - 321)) | (1 << (ora2epasParser.TIMESTAMP - 321)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 385)) | (1 << (ora2epasParser.TIMEZONE_ABBR - 385)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 385)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 385)) | (1 << (ora2epasParser.TIMEZONE_REGION - 385)) | (1 << (ora2epasParser.TRAILING - 385)) | (1 << (ora2epasParser.TRANSACTION - 385)) | (1 << (ora2epasParser.TRANSLATE - 385)) | (1 << (ora2epasParser.TREAT - 385)) | (1 << (ora2epasParser.TRIGGER - 385)) | (1 << (ora2epasParser.TRUE - 385)) | (1 << (ora2epasParser.TRUNCATE - 385)) | (1 << (ora2epasParser.TYPE - 385)) | (1 << (ora2epasParser.UNBOUNDED - 385)) | (1 << (ora2epasParser.UNDER - 385)) | (1 << (ora2epasParser.UNLIMITED - 385)) | (1 << (ora2epasParser.UNTIL - 385)) | (1 << (ora2epasParser.UPDATE - 385)) | (1 << (ora2epasParser.UPDATED - 385)) | (1 << (ora2epasParser.UPSERT - 385)) | (1 << (ora2epasParser.UROWID - 385)) | (1 << (ora2epasParser.USE - 385)) | (1 << (ora2epasParser.VALIDATE - 385)) | (1 << (ora2epasParser.VALUE - 385)) | (1 << (ora2epasParser.VARIABLE - 385)) | (1 << (ora2epasParser.VARRAY - 385)) | (1 << (ora2epasParser.VARYING - 385)) | (1 << (ora2epasParser.VERSION - 385)) | (1 << (ora2epasParser.VERSIONS - 385)) | (1 << (ora2epasParser.WAIT - 385)) | (1 << (ora2epasParser.WARNING - 385)) | (1 << (ora2epasParser.WELLFORMED - 385)) | (1 << (ora2epasParser.WHENEVER - 385)) | (1 << (ora2epasParser.WHILE - 385)) | (1 << (ora2epasParser.WITHIN - 385)) | (1 << (ora2epasParser.WORK - 385)) | (1 << (ora2epasParser.WRITE - 385)) | (1 << (ora2epasParser.XML - 385)) | (1 << (ora2epasParser.XMLAGG - 385)) | (1 << (ora2epasParser.XMLATTRIBUTES - 385)) | (1 << (ora2epasParser.XMLCAST - 385)) | (1 << (ora2epasParser.XMLCOLATTVAL - 385)) | (1 << (ora2epasParser.XMLELEMENT - 385)) | (1 << (ora2epasParser.XMLEXISTS - 385)) | (1 << (ora2epasParser.XMLFOREST - 385)) | (1 << (ora2epasParser.XMLNAMESPACES - 385)) | (1 << (ora2epasParser.XMLPARSE - 385)) | (1 << (ora2epasParser.XMLPI - 385)) | (1 << (ora2epasParser.XMLQUERY - 385)) | (1 << (ora2epasParser.XMLROOT - 385)) | (1 << (ora2epasParser.XMLSERIALIZE - 385)) | (1 << (ora2epasParser.XMLTABLE - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (ora2epasParser.YEAR - 449)) | (1 << (ora2epasParser.YES - 449)) | (1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 449)) | (1 << (ora2epasParser.ZONE - 449)) | (1 << (ora2epasParser.PREDICTION - 449)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 449)) | (1 << (ora2epasParser.PREDICTION_COST - 449)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 449)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 449)) | (1 << (ora2epasParser.PREDICTION_SET - 449)) | (1 << (ora2epasParser.CUME_DIST - 449)) | (1 << (ora2epasParser.DENSE_RANK - 449)) | (1 << (ora2epasParser.LISTAGG - 449)) | (1 << (ora2epasParser.PERCENT_RANK - 449)) | (1 << (ora2epasParser.PERCENTILE_CONT - 449)) | (1 << (ora2epasParser.PERCENTILE_DISC - 449)) | (1 << (ora2epasParser.RANK - 449)) | (1 << (ora2epasParser.AVG - 449)) | (1 << (ora2epasParser.CORR - 449)) | (1 << (ora2epasParser.COVAR_ - 449)) | (1 << (ora2epasParser.DECODE - 449)) | (1 << (ora2epasParser.LAG - 449)) | (1 << (ora2epasParser.LEAD - 449)) | (1 << (ora2epasParser.MAX - 449)) | (1 << (ora2epasParser.MEDIAN - 449)) | (1 << (ora2epasParser.MIN - 449)) | (1 << (ora2epasParser.NTILE - 449)) | (1 << (ora2epasParser.NVL - 449)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 449)) | (1 << (ora2epasParser.REGR_ - 449)) | (1 << (ora2epasParser.ROUND - 449)) | (1 << (ora2epasParser.ROW_NUMBER - 449)) | (1 << (ora2epasParser.SUBSTR - 449)) | (1 << (ora2epasParser.TO_CHAR - 449)) | (1 << (ora2epasParser.TRIM - 449)) | (1 << (ora2epasParser.SUM - 449)) | (1 << (ora2epasParser.STDDEV - 449)) | (1 << (ora2epasParser.VAR_ - 449)) | (1 << (ora2epasParser.VARIANCE - 449)) | (1 << (ora2epasParser.DBMS_ALERT - 449)) | (1 << (ora2epasParser.DBMS_AQADM - 449)) | (1 << (ora2epasParser.DBMS_AQ - 449)) | (1 << (ora2epasParser.DBMS_CRYPTO - 449)) | (1 << (ora2epasParser.DBMS_JOB - 449)) | (1 << (ora2epasParser.DBMS_LOB - 449)) | (1 << (ora2epasParser.DBMS_LOCK - 449)) | (1 << (ora2epasParser.DBMS_MVIEW - 449)) | (1 << (ora2epasParser.DBMS_OUTPUT - 449)) | (1 << (ora2epasParser.DBMS_PIPE - 449)) | (1 << (ora2epasParser.DBMS_PROFILER - 449)) | (1 << (ora2epasParser.DBMS_RANDOM - 449)) | (1 << (ora2epasParser.DBMS_RLS - 449)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 449)) | (1 << (ora2epasParser.DBMS_SESSION - 449)) | (1 << (ora2epasParser.DBMS_SQL - 449)) | (1 << (ora2epasParser.DBMS_UTILITY - 449)) | (1 << (ora2epasParser.EMP_ADMIN - 449)) | (1 << (ora2epasParser.UTL_ENCODE - 449)) | (1 << (ora2epasParser.UTL_FILE - 449)) | (1 << (ora2epasParser.UTL_HTTP - 449)) | (1 << (ora2epasParser.UTL_MAIL - 449)) | (1 << (ora2epasParser.UTL_RAW - 449)) | (1 << (ora2epasParser.UTL_SMTP - 449)) | (1 << (ora2epasParser.UTL_TCP - 449)))) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & ((1 << (ora2epasParser.UTL_URL - 513)) | (1 << (ora2epasParser.NATIONAL_CHAR_STRING_LIT - 513)) | (1 << (ora2epasParser.UNSIGNED_INTEGER - 513)) | (1 << (ora2epasParser.APPROXIMATE_NUM_LIT - 513)) | (1 << (ora2epasParser.CHAR_STRING - 513)) | (1 << (ora2epasParser.DELIMITED_ID - 513)) | (1 << (ora2epasParser.LEFT_PAREN - 513)) | (1 << (ora2epasParser.PLUS_SIGN - 513)) | (1 << (ora2epasParser.MINUS_SIGN - 513)) | (1 << (ora2epasParser.BINDVAR - 513)) | (1 << (ora2epasParser.COLON - 513)) | (1 << (ora2epasParser.INTRODUCER - 513)) | (1 << (ora2epasParser.REGULAR_ID - 513)))) != 0):
                self.state = 3125
                self.model_rules_element()
                self.state = 3130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 3126
                    self.match(ora2epasParser.COMMA)
                    self.state = 3127
                    self.model_rules_element()
                    self.state = 3132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3135
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_rules_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULES(self):
            return self.getToken(ora2epasParser.RULES, 0)

        def UPDATE(self):
            return self.getToken(ora2epasParser.UPDATE, 0)

        def UPSERT(self):
            return self.getToken(ora2epasParser.UPSERT, 0)

        def ORDER(self):
            return self.getToken(ora2epasParser.ORDER, 0)

        def model_iterate_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Model_iterate_clauseContext,0)


        def AUTOMATIC(self):
            return self.getToken(ora2epasParser.AUTOMATIC, 0)

        def SEQUENTIAL(self):
            return self.getToken(ora2epasParser.SEQUENTIAL, 0)

        def ALL(self):
            return self.getToken(ora2epasParser.ALL, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_model_rules_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_rules_part" ):
                listener.enterModel_rules_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_rules_part" ):
                listener.exitModel_rules_part(self)




    def model_rules_part(self):

        localctx = ora2epasParser.Model_rules_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_model_rules_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3137
            self.match(ora2epasParser.RULES)
            self.state = 3143
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.UPDATE]:
                self.state = 3138
                self.match(ora2epasParser.UPDATE)
                pass
            elif token in [ora2epasParser.UPSERT]:
                self.state = 3139
                self.match(ora2epasParser.UPSERT)
                self.state = 3141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.ALL:
                    self.state = 3140
                    self.match(ora2epasParser.ALL)


                pass
            elif token in [ora2epasParser.AUTOMATIC, ora2epasParser.ITERATE, ora2epasParser.SEQUENTIAL, ora2epasParser.LEFT_PAREN]:
                pass
            else:
                pass
            self.state = 3147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.AUTOMATIC or _la==ora2epasParser.SEQUENTIAL:
                self.state = 3145
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.AUTOMATIC or _la==ora2epasParser.SEQUENTIAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3146
                self.match(ora2epasParser.ORDER)


            self.state = 3150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.ITERATE:
                self.state = 3149
                self.model_iterate_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_rules_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cell_assignment(self):
            return self.getTypedRuleContext(ora2epasParser.Cell_assignmentContext,0)


        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def UPDATE(self):
            return self.getToken(ora2epasParser.UPDATE, 0)

        def UPSERT(self):
            return self.getToken(ora2epasParser.UPSERT, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Order_by_clauseContext,0)


        def ALL(self):
            return self.getToken(ora2epasParser.ALL, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_model_rules_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_rules_element" ):
                listener.enterModel_rules_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_rules_element" ):
                listener.exitModel_rules_element(self)




    def model_rules_element(self):

        localctx = ora2epasParser.Model_rules_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_model_rules_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3157
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                self.state = 3152
                self.match(ora2epasParser.UPDATE)

            elif la_ == 2:
                self.state = 3153
                self.match(ora2epasParser.UPSERT)
                self.state = 3155
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
                if la_ == 1:
                    self.state = 3154
                    self.match(ora2epasParser.ALL)




            self.state = 3159
            self.cell_assignment()
            self.state = 3161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.ORDER:
                self.state = 3160
                self.order_by_clause()


            self.state = 3163
            self.match(ora2epasParser.EQUALS_OP)
            self.state = 3164
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cell_assignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Model_expressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_cell_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCell_assignment" ):
                listener.enterCell_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCell_assignment" ):
                listener.exitCell_assignment(self)




    def cell_assignment(self):

        localctx = ora2epasParser.Cell_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_cell_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3166
            self.model_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_iterate_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITERATE(self):
            return self.getToken(ora2epasParser.ITERATE, 0)

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def until_part(self):
            return self.getTypedRuleContext(ora2epasParser.Until_partContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_model_iterate_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_iterate_clause" ):
                listener.enterModel_iterate_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_iterate_clause" ):
                listener.exitModel_iterate_clause(self)




    def model_iterate_clause(self):

        localctx = ora2epasParser.Model_iterate_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_model_iterate_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3168
            self.match(ora2epasParser.ITERATE)
            self.state = 3169
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 3170
            self.expression()
            self.state = 3171
            self.match(ora2epasParser.RIGHT_PAREN)
            self.state = 3173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.UNTIL:
                self.state = 3172
                self.until_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Until_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNTIL(self):
            return self.getToken(ora2epasParser.UNTIL, 0)

        def condition(self):
            return self.getTypedRuleContext(ora2epasParser.ConditionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_until_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntil_part" ):
                listener.enterUntil_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntil_part" ):
                listener.exitUntil_part(self)




    def until_part(self):

        localctx = ora2epasParser.Until_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_until_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3175
            self.match(ora2epasParser.UNTIL)
            self.state = 3176
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 3177
            self.condition()
            self.state = 3178
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(ora2epasParser.ORDER, 0)

        def BY(self):
            return self.getToken(ora2epasParser.BY, 0)

        def order_by_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Order_by_elementsContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Order_by_elementsContext,i)


        def SIBLINGS(self):
            return self.getToken(ora2epasParser.SIBLINGS, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)




    def order_by_clause(self):

        localctx = ora2epasParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3180
            self.match(ora2epasParser.ORDER)
            self.state = 3182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.SIBLINGS:
                self.state = 3181
                self.match(ora2epasParser.SIBLINGS)


            self.state = 3184
            self.match(ora2epasParser.BY)
            self.state = 3185
            self.order_by_elements()
            self.state = 3190
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,359,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3186
                    self.match(ora2epasParser.COMMA)
                    self.state = 3187
                    self.order_by_elements() 
                self.state = 3192
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,359,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(ora2epasParser.NULLS, 0)

        def ASC(self):
            return self.getToken(ora2epasParser.ASC, 0)

        def DESC(self):
            return self.getToken(ora2epasParser.DESC, 0)

        def FIRST(self):
            return self.getToken(ora2epasParser.FIRST, 0)

        def LAST(self):
            return self.getToken(ora2epasParser.LAST, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_order_by_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_elements" ):
                listener.enterOrder_by_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_elements" ):
                listener.exitOrder_by_elements(self)




    def order_by_elements(self):

        localctx = ora2epasParser.Order_by_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_order_by_elements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3193
            self.expression()
            self.state = 3195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
            if la_ == 1:
                self.state = 3194
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.ASC or _la==ora2epasParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                self.state = 3197
                self.match(ora2epasParser.NULLS)
                self.state = 3198
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.FIRST or _la==ora2epasParser.LAST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_update_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(ora2epasParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(ora2epasParser.UPDATE, 0)

        def for_update_of_part(self):
            return self.getTypedRuleContext(ora2epasParser.For_update_of_partContext,0)


        def for_update_options(self):
            return self.getTypedRuleContext(ora2epasParser.For_update_optionsContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_for_update_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_update_clause" ):
                listener.enterFor_update_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_update_clause" ):
                listener.exitFor_update_clause(self)




    def for_update_clause(self):

        localctx = ora2epasParser.For_update_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_for_update_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3201
            self.match(ora2epasParser.FOR)
            self.state = 3202
            self.match(ora2epasParser.UPDATE)
            self.state = 3204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
            if la_ == 1:
                self.state = 3203
                self.for_update_of_part()


            self.state = 3207
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.state = 3206
                self.for_update_options()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_update_of_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(ora2epasParser.OF, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_nameContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_for_update_of_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_update_of_part" ):
                listener.enterFor_update_of_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_update_of_part" ):
                listener.exitFor_update_of_part(self)




    def for_update_of_part(self):

        localctx = ora2epasParser.For_update_of_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_for_update_of_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3209
            self.match(ora2epasParser.OF)
            self.state = 3210
            self.column_name()
            self.state = 3215
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,364,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3211
                    self.match(ora2epasParser.COMMA)
                    self.state = 3212
                    self.column_name() 
                self.state = 3217
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,364,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_update_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKIP_(self):
            return self.getToken(ora2epasParser.SKIP_, 0)

        def LOCKED(self):
            return self.getToken(ora2epasParser.LOCKED, 0)

        def NOWAIT(self):
            return self.getToken(ora2epasParser.NOWAIT, 0)

        def WAIT(self):
            return self.getToken(ora2epasParser.WAIT, 0)

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_for_update_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_update_options" ):
                listener.enterFor_update_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_update_options" ):
                listener.exitFor_update_options(self)




    def for_update_options(self):

        localctx = ora2epasParser.For_update_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_for_update_options)
        try:
            self.state = 3223
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.SKIP_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3218
                self.match(ora2epasParser.SKIP_)
                self.state = 3219
                self.match(ora2epasParser.LOCKED)
                pass
            elif token in [ora2epasParser.NOWAIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3220
                self.match(ora2epasParser.NOWAIT)
                pass
            elif token in [ora2epasParser.WAIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3221
                self.match(ora2epasParser.WAIT)
                self.state = 3222
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(ora2epasParser.UPDATE, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(ora2epasParser.General_table_refContext,0)


        def update_set_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Update_set_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Where_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Static_returning_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_update_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statement" ):
                listener.enterUpdate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statement" ):
                listener.exitUpdate_statement(self)




    def update_statement(self):

        localctx = ora2epasParser.Update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_update_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3225
            self.match(ora2epasParser.UPDATE)
            self.state = 3226
            self.general_table_ref()
            self.state = 3227
            self.update_set_clause()
            self.state = 3229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
            if la_ == 1:
                self.state = 3228
                self.where_clause()


            self.state = 3232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
            if la_ == 1:
                self.state = 3231
                self.static_returning_clause()


            self.state = 3235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.state = 3234
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_set_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(ora2epasParser.SET, 0)

        def column_based_update_set_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_based_update_set_clauseContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_based_update_set_clauseContext,i)


        def VALUE(self):
            return self.getToken(ora2epasParser.VALUE, 0)

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_update_set_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_set_clause" ):
                listener.enterUpdate_set_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_set_clause" ):
                listener.exitUpdate_set_clause(self)




    def update_set_clause(self):

        localctx = ora2epasParser.Update_set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_update_set_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3237
            self.match(ora2epasParser.SET)
            self.state = 3253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
            if la_ == 1:
                self.state = 3238
                self.column_based_update_set_clause()
                self.state = 3243
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,369,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3239
                        self.match(ora2epasParser.COMMA)
                        self.state = 3240
                        self.column_based_update_set_clause() 
                    self.state = 3245
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,369,self._ctx)

                pass

            elif la_ == 2:
                self.state = 3246
                self.match(ora2epasParser.VALUE)
                self.state = 3247
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 3248
                self.identifier()
                self.state = 3249
                self.match(ora2epasParser.RIGHT_PAREN)
                self.state = 3250
                self.match(ora2epasParser.EQUALS_OP)
                self.state = 3251
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_based_update_set_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_nameContext,i)


        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def subquery(self):
            return self.getTypedRuleContext(ora2epasParser.SubqueryContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_column_based_update_set_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_based_update_set_clause" ):
                listener.enterColumn_based_update_set_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_based_update_set_clause" ):
                listener.exitColumn_based_update_set_clause(self)




    def column_based_update_set_clause(self):

        localctx = ora2epasParser.Column_based_update_set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_column_based_update_set_clause)
        self._la = 0 # Token type
        try:
            self.state = 3272
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3255
                self.column_name()
                self.state = 3256
                self.match(ora2epasParser.EQUALS_OP)
                self.state = 3257
                self.expression()
                pass
            elif token in [ora2epasParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3259
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 3260
                self.column_name()
                self.state = 3265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 3261
                    self.match(ora2epasParser.COMMA)
                    self.state = 3262
                    self.column_name()
                    self.state = 3267
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3268
                self.match(ora2epasParser.RIGHT_PAREN)
                self.state = 3269
                self.match(ora2epasParser.EQUALS_OP)
                self.state = 3270
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(ora2epasParser.DELETE, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(ora2epasParser.General_table_refContext,0)


        def FROM(self):
            return self.getToken(ora2epasParser.FROM, 0)

        def where_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Where_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Static_returning_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_delete_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement" ):
                listener.enterDelete_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement" ):
                listener.exitDelete_statement(self)




    def delete_statement(self):

        localctx = ora2epasParser.Delete_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_delete_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3274
            self.match(ora2epasParser.DELETE)
            self.state = 3276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.FROM:
                self.state = 3275
                self.match(ora2epasParser.FROM)


            self.state = 3278
            self.general_table_ref()
            self.state = 3280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
            if la_ == 1:
                self.state = 3279
                self.where_clause()


            self.state = 3283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
            if la_ == 1:
                self.state = 3282
                self.static_returning_clause()


            self.state = 3286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,376,self._ctx)
            if la_ == 1:
                self.state = 3285
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(ora2epasParser.INSERT, 0)

        def single_table_insert(self):
            return self.getTypedRuleContext(ora2epasParser.Single_table_insertContext,0)


        def multi_table_insert(self):
            return self.getTypedRuleContext(ora2epasParser.Multi_table_insertContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_insert_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement" ):
                listener.enterInsert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement" ):
                listener.exitInsert_statement(self)




    def insert_statement(self):

        localctx = ora2epasParser.Insert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_insert_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3288
            self.match(ora2epasParser.INSERT)
            self.state = 3291
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.INTO]:
                self.state = 3289
                self.single_table_insert()
                pass
            elif token in [ora2epasParser.ALL, ora2epasParser.FIRST, ora2epasParser.WHEN]:
                self.state = 3290
                self.multi_table_insert()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_table_insertContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_into_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Insert_into_clauseContext,0)


        def values_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Values_clauseContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Select_statementContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Error_logging_clauseContext,0)


        def static_returning_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Static_returning_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_single_table_insert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_table_insert" ):
                listener.enterSingle_table_insert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_table_insert" ):
                listener.exitSingle_table_insert(self)




    def single_table_insert(self):

        localctx = ora2epasParser.Single_table_insertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_single_table_insert)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3293
            self.insert_into_clause()
            self.state = 3299
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.VALUES]:
                self.state = 3294
                self.values_clause()
                self.state = 3296
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
                if la_ == 1:
                    self.state = 3295
                    self.static_returning_clause()


                pass
            elif token in [ora2epasParser.SELECT, ora2epasParser.WITH, ora2epasParser.LEFT_PAREN]:
                self.state = 3298
                self.select_statement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
            if la_ == 1:
                self.state = 3301
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multi_table_insertContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Select_statementContext,0)


        def ALL(self):
            return self.getToken(ora2epasParser.ALL, 0)

        def conditional_insert_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Conditional_insert_clauseContext,0)


        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_multi_table_insert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_table_insert" ):
                listener.enterMulti_table_insert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_table_insert" ):
                listener.exitMulti_table_insert(self)




    def multi_table_insert(self):

        localctx = ora2epasParser.Multi_table_insertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_multi_table_insert)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.state = 3304
                self.match(ora2epasParser.ALL)
                self.state = 3306 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3305
                    self.multi_table_element()
                    self.state = 3308 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==ora2epasParser.INTO):
                        break

                pass

            elif la_ == 2:
                self.state = 3310
                self.conditional_insert_clause()
                pass


            self.state = 3313
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multi_table_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insert_into_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Insert_into_clauseContext,0)


        def values_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Values_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_multi_table_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_table_element" ):
                listener.enterMulti_table_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_table_element" ):
                listener.exitMulti_table_element(self)




    def multi_table_element(self):

        localctx = ora2epasParser.Multi_table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_multi_table_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3315
            self.insert_into_clause()
            self.state = 3317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.VALUES:
                self.state = 3316
                self.values_clause()


            self.state = 3320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LOG:
                self.state = 3319
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_insert_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditional_insert_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Conditional_insert_when_partContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Conditional_insert_when_partContext,i)


        def conditional_insert_else_part(self):
            return self.getTypedRuleContext(ora2epasParser.Conditional_insert_else_partContext,0)


        def ALL(self):
            return self.getToken(ora2epasParser.ALL, 0)

        def FIRST(self):
            return self.getToken(ora2epasParser.FIRST, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_conditional_insert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_insert_clause" ):
                listener.enterConditional_insert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_insert_clause" ):
                listener.exitConditional_insert_clause(self)




    def conditional_insert_clause(self):

        localctx = ora2epasParser.Conditional_insert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_conditional_insert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.ALL or _la==ora2epasParser.FIRST:
                self.state = 3322
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.ALL or _la==ora2epasParser.FIRST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3326 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3325
                self.conditional_insert_when_part()
                self.state = 3328 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ora2epasParser.WHEN):
                    break

            self.state = 3331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.ELSE:
                self.state = 3330
                self.conditional_insert_else_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_insert_when_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(ora2epasParser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(ora2epasParser.ConditionContext,0)


        def THEN(self):
            return self.getToken(ora2epasParser.THEN, 0)

        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_conditional_insert_when_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_insert_when_part" ):
                listener.enterConditional_insert_when_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_insert_when_part" ):
                listener.exitConditional_insert_when_part(self)




    def conditional_insert_when_part(self):

        localctx = ora2epasParser.Conditional_insert_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_conditional_insert_when_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3333
            self.match(ora2epasParser.WHEN)
            self.state = 3334
            self.condition()
            self.state = 3335
            self.match(ora2epasParser.THEN)
            self.state = 3337 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3336
                self.multi_table_element()
                self.state = 3339 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ora2epasParser.INTO):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_insert_else_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ora2epasParser.ELSE, 0)

        def multi_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Multi_table_elementContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Multi_table_elementContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_conditional_insert_else_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditional_insert_else_part" ):
                listener.enterConditional_insert_else_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditional_insert_else_part" ):
                listener.exitConditional_insert_else_part(self)




    def conditional_insert_else_part(self):

        localctx = ora2epasParser.Conditional_insert_else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_conditional_insert_else_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3341
            self.match(ora2epasParser.ELSE)
            self.state = 3343 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3342
                self.multi_table_element()
                self.state = 3345 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ora2epasParser.INTO):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_into_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(ora2epasParser.INTO, 0)

        def general_table_ref(self):
            return self.getTypedRuleContext(ora2epasParser.General_table_refContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_nameContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_insert_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_into_clause" ):
                listener.enterInsert_into_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_into_clause" ):
                listener.exitInsert_into_clause(self)




    def insert_into_clause(self):

        localctx = ora2epasParser.Insert_into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_insert_into_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3347
            self.match(ora2epasParser.INTO)
            self.state = 3348
            self.general_table_ref()
            self.state = 3360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,391,self._ctx)
            if la_ == 1:
                self.state = 3349
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 3350
                self.column_name()
                self.state = 3355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 3351
                    self.match(ora2epasParser.COMMA)
                    self.state = 3352
                    self.column_name()
                    self.state = 3357
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3358
                self.match(ora2epasParser.RIGHT_PAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Values_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(ora2epasParser.VALUES, 0)

        def expression_list(self):
            return self.getTypedRuleContext(ora2epasParser.Expression_listContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_values_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_clause" ):
                listener.enterValues_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_clause" ):
                listener.exitValues_clause(self)




    def values_clause(self):

        localctx = ora2epasParser.Values_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_values_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3362
            self.match(ora2epasParser.VALUES)
            self.state = 3363
            self.expression_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(ora2epasParser.MERGE, 0)

        def INTO(self):
            return self.getToken(ora2epasParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(ora2epasParser.Tableview_nameContext,0)


        def USING(self):
            return self.getToken(ora2epasParser.USING, 0)

        def selected_tableview(self):
            return self.getTypedRuleContext(ora2epasParser.Selected_tableviewContext,0)


        def ON(self):
            return self.getToken(ora2epasParser.ON, 0)

        def condition(self):
            return self.getTypedRuleContext(ora2epasParser.ConditionContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(ora2epasParser.Table_aliasContext,0)


        def merge_update_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Merge_update_clauseContext,0)


        def merge_insert_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Merge_insert_clauseContext,0)


        def error_logging_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Error_logging_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_merge_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_statement" ):
                listener.enterMerge_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_statement" ):
                listener.exitMerge_statement(self)




    def merge_statement(self):

        localctx = ora2epasParser.Merge_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_merge_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3365
            self.match(ora2epasParser.MERGE)
            self.state = 3366
            self.match(ora2epasParser.INTO)
            self.state = 3367
            self.tableview_name()
            self.state = 3369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)) | (1 << (ora2epasParser.NATIONAL_CHAR_STRING_LIT - 451)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (ora2epasParser.CHAR_STRING - 521)) | (1 << (ora2epasParser.DELIMITED_ID - 521)) | (1 << (ora2epasParser.INTRODUCER - 521)) | (1 << (ora2epasParser.REGULAR_ID - 521)))) != 0):
                self.state = 3368
                self.table_alias()


            self.state = 3371
            self.match(ora2epasParser.USING)
            self.state = 3372
            self.selected_tableview()
            self.state = 3373
            self.match(ora2epasParser.ON)
            self.state = 3374
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 3375
            self.condition()
            self.state = 3376
            self.match(ora2epasParser.RIGHT_PAREN)
            self.state = 3385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.state = 3377
                self.merge_update_clause()
                self.state = 3379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.WHEN:
                    self.state = 3378
                    self.merge_insert_clause()



            elif la_ == 2:
                self.state = 3381
                self.merge_insert_clause()
                self.state = 3383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.WHEN:
                    self.state = 3382
                    self.merge_update_clause()




            self.state = 3388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LOG:
                self.state = 3387
                self.error_logging_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_update_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(ora2epasParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(ora2epasParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(ora2epasParser.THEN, 0)

        def UPDATE(self):
            return self.getToken(ora2epasParser.UPDATE, 0)

        def SET(self):
            return self.getToken(ora2epasParser.SET, 0)

        def merge_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Merge_elementContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Merge_elementContext,i)


        def where_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Where_clauseContext,0)


        def merge_update_delete_part(self):
            return self.getTypedRuleContext(ora2epasParser.Merge_update_delete_partContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_merge_update_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_update_clause" ):
                listener.enterMerge_update_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_update_clause" ):
                listener.exitMerge_update_clause(self)




    def merge_update_clause(self):

        localctx = ora2epasParser.Merge_update_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_merge_update_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3390
            self.match(ora2epasParser.WHEN)
            self.state = 3391
            self.match(ora2epasParser.MATCHED)
            self.state = 3392
            self.match(ora2epasParser.THEN)
            self.state = 3393
            self.match(ora2epasParser.UPDATE)
            self.state = 3394
            self.match(ora2epasParser.SET)
            self.state = 3395
            self.merge_element()
            self.state = 3400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 3396
                self.match(ora2epasParser.COMMA)
                self.state = 3397
                self.merge_element()
                self.state = 3402
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.WHERE:
                self.state = 3403
                self.where_clause()


            self.state = 3407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.DELETE:
                self.state = 3406
                self.merge_update_delete_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(ora2epasParser.Column_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_merge_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_element" ):
                listener.enterMerge_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_element" ):
                listener.exitMerge_element(self)




    def merge_element(self):

        localctx = ora2epasParser.Merge_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_merge_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3409
            self.column_name()
            self.state = 3410
            self.match(ora2epasParser.EQUALS_OP)
            self.state = 3411
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_update_delete_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(ora2epasParser.DELETE, 0)

        def where_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_merge_update_delete_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_update_delete_part" ):
                listener.enterMerge_update_delete_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_update_delete_part" ):
                listener.exitMerge_update_delete_part(self)




    def merge_update_delete_part(self):

        localctx = ora2epasParser.Merge_update_delete_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_merge_update_delete_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3413
            self.match(ora2epasParser.DELETE)
            self.state = 3414
            self.where_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_insert_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(ora2epasParser.WHEN, 0)

        def NOT(self):
            return self.getToken(ora2epasParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(ora2epasParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(ora2epasParser.THEN, 0)

        def INSERT(self):
            return self.getToken(ora2epasParser.INSERT, 0)

        def VALUES(self):
            return self.getToken(ora2epasParser.VALUES, 0)

        def expression_list(self):
            return self.getTypedRuleContext(ora2epasParser.Expression_listContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_nameContext,i)


        def where_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_merge_insert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_insert_clause" ):
                listener.enterMerge_insert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_insert_clause" ):
                listener.exitMerge_insert_clause(self)




    def merge_insert_clause(self):

        localctx = ora2epasParser.Merge_insert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_merge_insert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3416
            self.match(ora2epasParser.WHEN)
            self.state = 3417
            self.match(ora2epasParser.NOT)
            self.state = 3418
            self.match(ora2epasParser.MATCHED)
            self.state = 3419
            self.match(ora2epasParser.THEN)
            self.state = 3420
            self.match(ora2epasParser.INSERT)
            self.state = 3432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.LEFT_PAREN:
                self.state = 3421
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 3422
                self.column_name()
                self.state = 3427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 3423
                    self.match(ora2epasParser.COMMA)
                    self.state = 3424
                    self.column_name()
                    self.state = 3429
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3430
                self.match(ora2epasParser.RIGHT_PAREN)


            self.state = 3434
            self.match(ora2epasParser.VALUES)
            self.state = 3435
            self.expression_list()
            self.state = 3437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.WHERE:
                self.state = 3436
                self.where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Selected_tableviewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(ora2epasParser.Tableview_nameContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Select_statementContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(ora2epasParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_selected_tableview

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_tableview" ):
                listener.enterSelected_tableview(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_tableview" ):
                listener.exitSelected_tableview(self)




    def selected_tableview(self):

        localctx = ora2epasParser.Selected_tableviewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_selected_tableview)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.state = 3439
                self.tableview_name()
                pass
            elif token in [ora2epasParser.LEFT_PAREN]:
                self.state = 3440
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 3441
                self.select_statement()
                self.state = 3442
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)) | (1 << (ora2epasParser.NATIONAL_CHAR_STRING_LIT - 451)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (ora2epasParser.CHAR_STRING - 521)) | (1 << (ora2epasParser.DELIMITED_ID - 521)) | (1 << (ora2epasParser.INTRODUCER - 521)) | (1 << (ora2epasParser.REGULAR_ID - 521)))) != 0):
                self.state = 3446
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lock_table_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(ora2epasParser.LOCK, 0)

        def TABLE(self):
            return self.getToken(ora2epasParser.TABLE, 0)

        def lock_table_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Lock_table_elementContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Lock_table_elementContext,i)


        def IN(self):
            return self.getToken(ora2epasParser.IN, 0)

        def lock_mode(self):
            return self.getTypedRuleContext(ora2epasParser.Lock_modeContext,0)


        def MODE(self):
            return self.getToken(ora2epasParser.MODE, 0)

        def wait_nowait_part(self):
            return self.getTypedRuleContext(ora2epasParser.Wait_nowait_partContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_lock_table_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_table_statement" ):
                listener.enterLock_table_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_table_statement" ):
                listener.exitLock_table_statement(self)




    def lock_table_statement(self):

        localctx = ora2epasParser.Lock_table_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_lock_table_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3449
            self.match(ora2epasParser.LOCK)
            self.state = 3450
            self.match(ora2epasParser.TABLE)
            self.state = 3451
            self.lock_table_element()
            self.state = 3456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 3452
                self.match(ora2epasParser.COMMA)
                self.state = 3453
                self.lock_table_element()
                self.state = 3458
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3459
            self.match(ora2epasParser.IN)
            self.state = 3460
            self.lock_mode()
            self.state = 3461
            self.match(ora2epasParser.MODE)
            self.state = 3463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.NOWAIT or _la==ora2epasParser.WAIT:
                self.state = 3462
                self.wait_nowait_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Wait_nowait_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(ora2epasParser.WAIT, 0)

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def NOWAIT(self):
            return self.getToken(ora2epasParser.NOWAIT, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_wait_nowait_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_nowait_part" ):
                listener.enterWait_nowait_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_nowait_part" ):
                listener.exitWait_nowait_part(self)




    def wait_nowait_part(self):

        localctx = ora2epasParser.Wait_nowait_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_wait_nowait_part)
        try:
            self.state = 3468
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.WAIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3465
                self.match(ora2epasParser.WAIT)
                self.state = 3466
                self.expression()
                pass
            elif token in [ora2epasParser.NOWAIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3467
                self.match(ora2epasParser.NOWAIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lock_table_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableview_name(self):
            return self.getTypedRuleContext(ora2epasParser.Tableview_nameContext,0)


        def partition_extension_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Partition_extension_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_lock_table_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_table_element" ):
                listener.enterLock_table_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_table_element" ):
                listener.exitLock_table_element(self)




    def lock_table_element(self):

        localctx = ora2epasParser.Lock_table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_lock_table_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3470
            self.tableview_name()
            self.state = 3472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.PARTITION or _la==ora2epasParser.SUBPARTITION:
                self.state = 3471
                self.partition_extension_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lock_modeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(ora2epasParser.ROW, 0)

        def SHARE(self):
            return self.getToken(ora2epasParser.SHARE, 0)

        def EXCLUSIVE(self):
            return self.getToken(ora2epasParser.EXCLUSIVE, 0)

        def UPDATE(self):
            return self.getToken(ora2epasParser.UPDATE, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_lock_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_mode" ):
                listener.enterLock_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_mode" ):
                listener.exitLock_mode(self)




    def lock_mode(self):

        localctx = ora2epasParser.Lock_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_lock_mode)
        self._la = 0 # Token type
        try:
            self.state = 3486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3474
                self.match(ora2epasParser.ROW)
                self.state = 3475
                self.match(ora2epasParser.SHARE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3476
                self.match(ora2epasParser.ROW)
                self.state = 3477
                self.match(ora2epasParser.EXCLUSIVE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3478
                self.match(ora2epasParser.SHARE)
                self.state = 3480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.UPDATE:
                    self.state = 3479
                    self.match(ora2epasParser.UPDATE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3482
                self.match(ora2epasParser.SHARE)
                self.state = 3483
                self.match(ora2epasParser.ROW)
                self.state = 3484
                self.match(ora2epasParser.EXCLUSIVE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3485
                self.match(ora2epasParser.EXCLUSIVE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class General_table_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_table_expression_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Dml_table_expression_clauseContext,0)


        def ONLY(self):
            return self.getToken(ora2epasParser.ONLY, 0)

        def table_alias(self):
            return self.getTypedRuleContext(ora2epasParser.Table_aliasContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_general_table_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_table_ref" ):
                listener.enterGeneral_table_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_table_ref" ):
                listener.exitGeneral_table_ref(self)




    def general_table_ref(self):

        localctx = ora2epasParser.General_table_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_general_table_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
            if la_ == 1:
                self.state = 3488
                self.dml_table_expression_clause()
                pass

            elif la_ == 2:
                self.state = 3489
                self.match(ora2epasParser.ONLY)
                self.state = 3490
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 3491
                self.dml_table_expression_clause()
                self.state = 3492
                self.match(ora2epasParser.RIGHT_PAREN)
                pass


            self.state = 3497
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,412,self._ctx)
            if la_ == 1:
                self.state = 3496
                self.table_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Static_returning_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ExpressionContext,i)


        def into_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Into_clauseContext,0)


        def RETURNING(self):
            return self.getToken(ora2epasParser.RETURNING, 0)

        def RETURN(self):
            return self.getToken(ora2epasParser.RETURN, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_static_returning_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatic_returning_clause" ):
                listener.enterStatic_returning_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatic_returning_clause" ):
                listener.exitStatic_returning_clause(self)




    def static_returning_clause(self):

        localctx = ora2epasParser.Static_returning_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_static_returning_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3499
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.RETURN or _la==ora2epasParser.RETURNING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3500
            self.expression()
            self.state = 3505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 3501
                self.match(ora2epasParser.COMMA)
                self.state = 3502
                self.expression()
                self.state = 3507
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3508
            self.into_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_logging_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG(self):
            return self.getToken(ora2epasParser.LOG, 0)

        def ERRORS(self):
            return self.getToken(ora2epasParser.ERRORS, 0)

        def error_logging_into_part(self):
            return self.getTypedRuleContext(ora2epasParser.Error_logging_into_partContext,0)


        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def error_logging_reject_part(self):
            return self.getTypedRuleContext(ora2epasParser.Error_logging_reject_partContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_error_logging_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_logging_clause" ):
                listener.enterError_logging_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_logging_clause" ):
                listener.exitError_logging_clause(self)




    def error_logging_clause(self):

        localctx = ora2epasParser.Error_logging_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_error_logging_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3510
            self.match(ora2epasParser.LOG)
            self.state = 3511
            self.match(ora2epasParser.ERRORS)
            self.state = 3513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,414,self._ctx)
            if la_ == 1:
                self.state = 3512
                self.error_logging_into_part()


            self.state = 3516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.state = 3515
                self.expression()


            self.state = 3519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
            if la_ == 1:
                self.state = 3518
                self.error_logging_reject_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_logging_into_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(ora2epasParser.INTO, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(ora2epasParser.Tableview_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_error_logging_into_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_logging_into_part" ):
                listener.enterError_logging_into_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_logging_into_part" ):
                listener.exitError_logging_into_part(self)




    def error_logging_into_part(self):

        localctx = ora2epasParser.Error_logging_into_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_error_logging_into_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3521
            self.match(ora2epasParser.INTO)
            self.state = 3522
            self.tableview_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_logging_reject_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REJECT(self):
            return self.getToken(ora2epasParser.REJECT, 0)

        def LIMIT(self):
            return self.getToken(ora2epasParser.LIMIT, 0)

        def UNLIMITED(self):
            return self.getToken(ora2epasParser.UNLIMITED, 0)

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_error_logging_reject_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_logging_reject_part" ):
                listener.enterError_logging_reject_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_logging_reject_part" ):
                listener.exitError_logging_reject_part(self)




    def error_logging_reject_part(self):

        localctx = ora2epasParser.Error_logging_reject_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_error_logging_reject_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3524
            self.match(ora2epasParser.REJECT)
            self.state = 3525
            self.match(ora2epasParser.LIMIT)
            self.state = 3528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
            if la_ == 1:
                self.state = 3526
                self.match(ora2epasParser.UNLIMITED)
                pass

            elif la_ == 2:
                self.state = 3527
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_table_expression_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_collection_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Table_collection_expressionContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Select_statementContext,0)


        def subquery_restriction_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Subquery_restriction_clauseContext,0)


        def tableview_name(self):
            return self.getTypedRuleContext(ora2epasParser.Tableview_nameContext,0)


        def sample_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Sample_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_dml_table_expression_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_table_expression_clause" ):
                listener.enterDml_table_expression_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_table_expression_clause" ):
                listener.exitDml_table_expression_clause(self)




    def dml_table_expression_clause(self):

        localctx = ora2epasParser.Dml_table_expression_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_dml_table_expression_clause)
        self._la = 0 # Token type
        try:
            self.state = 3542
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.TABLE, ora2epasParser.THE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3530
                self.table_collection_expression()
                pass
            elif token in [ora2epasParser.LEFT_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3531
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 3532
                self.select_statement()
                self.state = 3534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.WITH:
                    self.state = 3533
                    self.subquery_restriction_clause()


                self.state = 3536
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            elif token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3538
                self.tableview_name()
                self.state = 3540
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
                if la_ == 1:
                    self.state = 3539
                    self.sample_clause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_collection_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(ora2epasParser.TABLE, 0)

        def THE(self):
            return self.getToken(ora2epasParser.THE, 0)

        def subquery(self):
            return self.getTypedRuleContext(ora2epasParser.SubqueryContext,0)


        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_table_collection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_collection_expression" ):
                listener.enterTable_collection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_collection_expression" ):
                listener.exitTable_collection_expression(self)




    def table_collection_expression(self):

        localctx = ora2epasParser.Table_collection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_table_collection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3544
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.TABLE or _la==ora2epasParser.THE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                self.state = 3545
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 3546
                self.subquery()
                self.state = 3547
                self.match(ora2epasParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 3549
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 3550
                self.expression()
                self.state = 3551
                self.match(ora2epasParser.RIGHT_PAREN)
                self.state = 3555
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
                if la_ == 1:
                    self.state = 3552
                    self.match(ora2epasParser.LEFT_PAREN)
                    self.state = 3553
                    self.match(ora2epasParser.PLUS_SIGN)
                    self.state = 3554
                    self.match(ora2epasParser.RIGHT_PAREN)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subquery_restriction_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(ora2epasParser.WITH, 0)

        def READ(self):
            return self.getToken(ora2epasParser.READ, 0)

        def ONLY(self):
            return self.getToken(ora2epasParser.ONLY, 0)

        def CHECK(self):
            return self.getToken(ora2epasParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(ora2epasParser.OPTION, 0)

        def CONSTRAINT(self):
            return self.getToken(ora2epasParser.CONSTRAINT, 0)

        def constraint_name(self):
            return self.getTypedRuleContext(ora2epasParser.Constraint_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_subquery_restriction_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_restriction_clause" ):
                listener.enterSubquery_restriction_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_restriction_clause" ):
                listener.exitSubquery_restriction_clause(self)




    def subquery_restriction_clause(self):

        localctx = ora2epasParser.Subquery_restriction_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_subquery_restriction_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3559
            self.match(ora2epasParser.WITH)
            self.state = 3568
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.READ]:
                self.state = 3560
                self.match(ora2epasParser.READ)
                self.state = 3561
                self.match(ora2epasParser.ONLY)
                pass
            elif token in [ora2epasParser.CHECK]:
                self.state = 3562
                self.match(ora2epasParser.CHECK)
                self.state = 3563
                self.match(ora2epasParser.OPTION)
                self.state = 3566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.CONSTRAINT:
                    self.state = 3564
                    self.match(ora2epasParser.CONSTRAINT)
                    self.state = 3565
                    self.constraint_name()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sample_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(ora2epasParser.SAMPLE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ExpressionContext,i)


        def BLOCK(self):
            return self.getToken(ora2epasParser.BLOCK, 0)

        def seed_part(self):
            return self.getTypedRuleContext(ora2epasParser.Seed_partContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_sample_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_clause" ):
                listener.enterSample_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_clause" ):
                listener.exitSample_clause(self)




    def sample_clause(self):

        localctx = ora2epasParser.Sample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_sample_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3570
            self.match(ora2epasParser.SAMPLE)
            self.state = 3572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.BLOCK:
                self.state = 3571
                self.match(ora2epasParser.BLOCK)


            self.state = 3574
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 3575
            self.expression()
            self.state = 3578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.COMMA:
                self.state = 3576
                self.match(ora2epasParser.COMMA)
                self.state = 3577
                self.expression()


            self.state = 3580
            self.match(ora2epasParser.RIGHT_PAREN)
            self.state = 3582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
            if la_ == 1:
                self.state = 3581
                self.seed_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Seed_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEED(self):
            return self.getToken(ora2epasParser.SEED, 0)

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_seed_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSeed_part" ):
                listener.enterSeed_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSeed_part" ):
                listener.exitSeed_part(self)




    def seed_part(self):

        localctx = ora2epasParser.Seed_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_seed_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3584
            self.match(ora2epasParser.SEED)
            self.state = 3585
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 3586
            self.expression()
            self.state = 3587
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR(self):
            return self.getToken(ora2epasParser.CURSOR, 0)

        def subquery(self):
            return self.getTypedRuleContext(ora2epasParser.SubqueryContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_cursor_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_expression" ):
                listener.enterCursor_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_expression" ):
                listener.exitCursor_expression(self)




    def cursor_expression(self):

        localctx = ora2epasParser.Cursor_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_cursor_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3589
            self.match(ora2epasParser.CURSOR)
            self.state = 3590
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 3591
            self.subquery()
            self.state = 3592
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ExpressionContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = ora2epasParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3594
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 3596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ALL) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ANY) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CASE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COALESCE) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ora2epasParser.CONNECT_BY_ROOT - 65)) | (1 << (ora2epasParser.CONSTANT - 65)) | (1 << (ora2epasParser.CONSTRAINT - 65)) | (1 << (ora2epasParser.CONSTRAINTS - 65)) | (1 << (ora2epasParser.CONSTRUCTOR - 65)) | (1 << (ora2epasParser.CONTENT - 65)) | (1 << (ora2epasParser.CONTEXT - 65)) | (1 << (ora2epasParser.CONTINUE - 65)) | (1 << (ora2epasParser.CONVERT - 65)) | (1 << (ora2epasParser.CORRUPT_XID - 65)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 65)) | (1 << (ora2epasParser.COST - 65)) | (1 << (ora2epasParser.COUNT - 65)) | (1 << (ora2epasParser.CROSS - 65)) | (1 << (ora2epasParser.CUBE - 65)) | (1 << (ora2epasParser.CURRENT_USER - 65)) | (1 << (ora2epasParser.CURSOR - 65)) | (1 << (ora2epasParser.CUSTOMDATUM - 65)) | (1 << (ora2epasParser.CYCLE - 65)) | (1 << (ora2epasParser.DATA - 65)) | (1 << (ora2epasParser.DATABASE - 65)) | (1 << (ora2epasParser.DATE - 65)) | (1 << (ora2epasParser.DAY - 65)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 65)) | (1 << (ora2epasParser.DBTIMEZONE - 65)) | (1 << (ora2epasParser.DDL - 65)) | (1 << (ora2epasParser.DEBUG - 65)) | (1 << (ora2epasParser.DEC - 65)) | (1 << (ora2epasParser.DECIMAL - 65)) | (1 << (ora2epasParser.DECOMPOSE - 65)) | (1 << (ora2epasParser.DECREMENT - 65)) | (1 << (ora2epasParser.DEFAULT - 65)) | (1 << (ora2epasParser.DEFAULTS - 65)) | (1 << (ora2epasParser.DEFERRED - 65)) | (1 << (ora2epasParser.DEFINER - 65)) | (1 << (ora2epasParser.DETERMINISTIC - 65)) | (1 << (ora2epasParser.DIMENSION - 65)) | (1 << (ora2epasParser.DISABLE - 65)) | (1 << (ora2epasParser.DISASSOCIATE - 65)) | (1 << (ora2epasParser.DISTINCT - 65)) | (1 << (ora2epasParser.DOCUMENT - 65)) | (1 << (ora2epasParser.DOUBLE - 65)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (ora2epasParser.EACH - 65)) | (1 << (ora2epasParser.ELEMENT - 65)) | (1 << (ora2epasParser.EMPTY - 65)) | (1 << (ora2epasParser.ENABLE - 65)) | (1 << (ora2epasParser.ENCODING - 65)) | (1 << (ora2epasParser.ENTITYESCAPING - 65)) | (1 << (ora2epasParser.ERR - 65)) | (1 << (ora2epasParser.ERRORS - 65)) | (1 << (ora2epasParser.ESCAPE - 65)) | (1 << (ora2epasParser.EVALNAME - 65)) | (1 << (ora2epasParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (ora2epasParser.EXCEPTION_INIT - 129)) | (1 << (ora2epasParser.EXCEPTIONS - 129)) | (1 << (ora2epasParser.EXCLUDE - 129)) | (1 << (ora2epasParser.EXECUTE - 129)) | (1 << (ora2epasParser.EXISTS - 129)) | (1 << (ora2epasParser.EXIT - 129)) | (1 << (ora2epasParser.EXPLAIN - 129)) | (1 << (ora2epasParser.EXTERNAL - 129)) | (1 << (ora2epasParser.EXTRACT - 129)) | (1 << (ora2epasParser.FAILURE - 129)) | (1 << (ora2epasParser.FALSE - 129)) | (1 << (ora2epasParser.FINAL - 129)) | (1 << (ora2epasParser.FIRST - 129)) | (1 << (ora2epasParser.FIRST_VALUE - 129)) | (1 << (ora2epasParser.FLOAT - 129)) | (1 << (ora2epasParser.FOLLOWING - 129)) | (1 << (ora2epasParser.FOLLOWS - 129)) | (1 << (ora2epasParser.FORALL - 129)) | (1 << (ora2epasParser.FORCE - 129)) | (1 << (ora2epasParser.FULL - 129)) | (1 << (ora2epasParser.FUNCTION - 129)) | (1 << (ora2epasParser.GROUPING - 129)) | (1 << (ora2epasParser.HASH - 129)) | (1 << (ora2epasParser.HIDE - 129)) | (1 << (ora2epasParser.HOUR - 129)) | (1 << (ora2epasParser.IGNORE - 129)) | (1 << (ora2epasParser.IMMEDIATE - 129)) | (1 << (ora2epasParser.INCLUDE - 129)) | (1 << (ora2epasParser.INCLUDING - 129)) | (1 << (ora2epasParser.INCREMENT - 129)) | (1 << (ora2epasParser.INDENT - 129)) | (1 << (ora2epasParser.INDEXED - 129)) | (1 << (ora2epasParser.INDICATOR - 129)) | (1 << (ora2epasParser.INDICES - 129)) | (1 << (ora2epasParser.INFINITE - 129)) | (1 << (ora2epasParser.INLINE - 129)) | (1 << (ora2epasParser.INNER - 129)) | (1 << (ora2epasParser.INOUT - 129)) | (1 << (ora2epasParser.INSTANTIABLE - 129)) | (1 << (ora2epasParser.INSTEAD - 129)) | (1 << (ora2epasParser.INT - 129)) | (1 << (ora2epasParser.INTEGER - 129)) | (1 << (ora2epasParser.INTERVAL - 129)) | (1 << (ora2epasParser.INVALIDATE - 129)) | (1 << (ora2epasParser.ISOLATION - 129)) | (1 << (ora2epasParser.ITERATE - 129)) | (1 << (ora2epasParser.JAVA - 129)) | (1 << (ora2epasParser.JOIN - 129)) | (1 << (ora2epasParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (ora2epasParser.LANGUAGE - 193)) | (1 << (ora2epasParser.LAST - 193)) | (1 << (ora2epasParser.LAST_VALUE - 193)) | (1 << (ora2epasParser.LEADING - 193)) | (1 << (ora2epasParser.LEFT - 193)) | (1 << (ora2epasParser.LEVEL - 193)) | (1 << (ora2epasParser.LIBRARY - 193)) | (1 << (ora2epasParser.LIKE2 - 193)) | (1 << (ora2epasParser.LIKE4 - 193)) | (1 << (ora2epasParser.LIKEC - 193)) | (1 << (ora2epasParser.LIMIT - 193)) | (1 << (ora2epasParser.LOCAL - 193)) | (1 << (ora2epasParser.LOCKED - 193)) | (1 << (ora2epasParser.LOG - 193)) | (1 << (ora2epasParser.LOGOFF - 193)) | (1 << (ora2epasParser.LOGON - 193)) | (1 << (ora2epasParser.LONG - 193)) | (1 << (ora2epasParser.LOOP - 193)) | (1 << (ora2epasParser.MAIN - 193)) | (1 << (ora2epasParser.MAP - 193)) | (1 << (ora2epasParser.MATCHED - 193)) | (1 << (ora2epasParser.MAXVALUE - 193)) | (1 << (ora2epasParser.MEASURES - 193)) | (1 << (ora2epasParser.MEMBER - 193)) | (1 << (ora2epasParser.MERGE - 193)) | (1 << (ora2epasParser.MINUTE - 193)) | (1 << (ora2epasParser.MINVALUE - 193)) | (1 << (ora2epasParser.MLSLABEL - 193)) | (1 << (ora2epasParser.MODEL - 193)) | (1 << (ora2epasParser.MODIFY - 193)) | (1 << (ora2epasParser.MONTH - 193)) | (1 << (ora2epasParser.MULTISET - 193)) | (1 << (ora2epasParser.NAME - 193)) | (1 << (ora2epasParser.NAN - 193)) | (1 << (ora2epasParser.NATURAL - 193)) | (1 << (ora2epasParser.NATURALN - 193)) | (1 << (ora2epasParser.NAV - 193)) | (1 << (ora2epasParser.NCHAR - 193)) | (1 << (ora2epasParser.NCHAR_CS - 193)) | (1 << (ora2epasParser.NCLOB - 193)) | (1 << (ora2epasParser.NESTED - 193)) | (1 << (ora2epasParser.NEW - 193)) | (1 << (ora2epasParser.NO - 193)) | (1 << (ora2epasParser.NOAUDIT - 193)) | (1 << (ora2epasParser.NOCOPY - 193)) | (1 << (ora2epasParser.NOCYCLE - 193)) | (1 << (ora2epasParser.NOENTITYESCAPING - 193)) | (1 << (ora2epasParser.NONE - 193)) | (1 << (ora2epasParser.NOSCHEMACHECK - 193)) | (1 << (ora2epasParser.NOT - 193)) | (1 << (ora2epasParser.NULL - 193)) | (1 << (ora2epasParser.NULLS - 193)) | (1 << (ora2epasParser.NUMBER - 193)) | (1 << (ora2epasParser.NUMERIC - 193)) | (1 << (ora2epasParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (ora2epasParser.OBJECT - 257)) | (1 << (ora2epasParser.OFF - 257)) | (1 << (ora2epasParser.OID - 257)) | (1 << (ora2epasParser.OLD - 257)) | (1 << (ora2epasParser.ONLY - 257)) | (1 << (ora2epasParser.OPEN - 257)) | (1 << (ora2epasParser.ORADATA - 257)) | (1 << (ora2epasParser.ORDINALITY - 257)) | (1 << (ora2epasParser.OSERROR - 257)) | (1 << (ora2epasParser.OUT - 257)) | (1 << (ora2epasParser.OUTER - 257)) | (1 << (ora2epasParser.OVER - 257)) | (1 << (ora2epasParser.OVERRIDING - 257)) | (1 << (ora2epasParser.PACKAGE - 257)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 257)) | (1 << (ora2epasParser.PARAMETERS - 257)) | (1 << (ora2epasParser.PARENT - 257)) | (1 << (ora2epasParser.PARTITION - 257)) | (1 << (ora2epasParser.PASSING - 257)) | (1 << (ora2epasParser.PATH - 257)) | (1 << (ora2epasParser.PIPELINED - 257)) | (1 << (ora2epasParser.PLAN - 257)) | (1 << (ora2epasParser.PLS_INTEGER - 257)) | (1 << (ora2epasParser.POSITIVE - 257)) | (1 << (ora2epasParser.POSITIVEN - 257)) | (1 << (ora2epasParser.PRAGMA - 257)) | (1 << (ora2epasParser.PRECEDING - 257)) | (1 << (ora2epasParser.PRECISION - 257)) | (1 << (ora2epasParser.PRESENT - 257)) | (1 << (ora2epasParser.PRIOR - 257)) | (1 << (ora2epasParser.RAISE - 257)) | (1 << (ora2epasParser.RANGE - 257)) | (1 << (ora2epasParser.RAW - 257)) | (1 << (ora2epasParser.READ - 257)) | (1 << (ora2epasParser.REAL - 257)) | (1 << (ora2epasParser.RECORD - 257)) | (1 << (ora2epasParser.REF - 257)) | (1 << (ora2epasParser.REFERENCE - 257)) | (1 << (ora2epasParser.REFERENCING - 257)) | (1 << (ora2epasParser.REJECT - 257)) | (1 << (ora2epasParser.RENAME - 257)) | (1 << (ora2epasParser.REPLACE - 257)) | (1 << (ora2epasParser.RESPECT - 257)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 257)) | (1 << (ora2epasParser.RESULT - 257)) | (1 << (ora2epasParser.RETURN - 257)) | (1 << (ora2epasParser.RETURNING - 257)) | (1 << (ora2epasParser.REUSE - 257)) | (1 << (ora2epasParser.REVERSE - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (ora2epasParser.RIGHT - 321)) | (1 << (ora2epasParser.ROLLBACK - 321)) | (1 << (ora2epasParser.ROLLUP - 321)) | (1 << (ora2epasParser.ROW - 321)) | (1 << (ora2epasParser.ROWID - 321)) | (1 << (ora2epasParser.ROWS - 321)) | (1 << (ora2epasParser.RULES - 321)) | (1 << (ora2epasParser.SAMPLE - 321)) | (1 << (ora2epasParser.SAVE - 321)) | (1 << (ora2epasParser.SAVEPOINT - 321)) | (1 << (ora2epasParser.SCHEMA - 321)) | (1 << (ora2epasParser.SCHEMACHECK - 321)) | (1 << (ora2epasParser.SCN - 321)) | (1 << (ora2epasParser.SECOND - 321)) | (1 << (ora2epasParser.SEED - 321)) | (1 << (ora2epasParser.SEGMENT - 321)) | (1 << (ora2epasParser.SELF - 321)) | (1 << (ora2epasParser.SEQUENTIAL - 321)) | (1 << (ora2epasParser.SERIALIZABLE - 321)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 321)) | (1 << (ora2epasParser.SERVERERROR - 321)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 321)) | (1 << (ora2epasParser.SET - 321)) | (1 << (ora2epasParser.SETS - 321)) | (1 << (ora2epasParser.SETTINGS - 321)) | (1 << (ora2epasParser.SHOW - 321)) | (1 << (ora2epasParser.SHUTDOWN - 321)) | (1 << (ora2epasParser.SIBLINGS - 321)) | (1 << (ora2epasParser.SIGNTYPE - 321)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 321)) | (1 << (ora2epasParser.SINGLE - 321)) | (1 << (ora2epasParser.SKIP_ - 321)) | (1 << (ora2epasParser.SMALLINT - 321)) | (1 << (ora2epasParser.SNAPSHOT - 321)) | (1 << (ora2epasParser.SOME - 321)) | (1 << (ora2epasParser.SPECIFICATION - 321)) | (1 << (ora2epasParser.SQLDATA - 321)) | (1 << (ora2epasParser.SQLERROR - 321)) | (1 << (ora2epasParser.STANDALONE - 321)) | (1 << (ora2epasParser.STARTUP - 321)) | (1 << (ora2epasParser.STATEMENT - 321)) | (1 << (ora2epasParser.STATEMENT_ID - 321)) | (1 << (ora2epasParser.STATIC - 321)) | (1 << (ora2epasParser.STATISTICS - 321)) | (1 << (ora2epasParser.STRING - 321)) | (1 << (ora2epasParser.SUBMULTISET - 321)) | (1 << (ora2epasParser.SUBPARTITION - 321)) | (1 << (ora2epasParser.SUBSTITUTABLE - 321)) | (1 << (ora2epasParser.SUBTYPE - 321)) | (1 << (ora2epasParser.SUCCESS - 321)) | (1 << (ora2epasParser.SUSPEND - 321)) | (1 << (ora2epasParser.TIME - 321)) | (1 << (ora2epasParser.TIMESTAMP - 321)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 385)) | (1 << (ora2epasParser.TIMEZONE_ABBR - 385)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 385)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 385)) | (1 << (ora2epasParser.TIMEZONE_REGION - 385)) | (1 << (ora2epasParser.TRAILING - 385)) | (1 << (ora2epasParser.TRANSACTION - 385)) | (1 << (ora2epasParser.TRANSLATE - 385)) | (1 << (ora2epasParser.TREAT - 385)) | (1 << (ora2epasParser.TRIGGER - 385)) | (1 << (ora2epasParser.TRUE - 385)) | (1 << (ora2epasParser.TRUNCATE - 385)) | (1 << (ora2epasParser.TYPE - 385)) | (1 << (ora2epasParser.UNBOUNDED - 385)) | (1 << (ora2epasParser.UNDER - 385)) | (1 << (ora2epasParser.UNLIMITED - 385)) | (1 << (ora2epasParser.UNTIL - 385)) | (1 << (ora2epasParser.UPDATED - 385)) | (1 << (ora2epasParser.UPSERT - 385)) | (1 << (ora2epasParser.UROWID - 385)) | (1 << (ora2epasParser.USE - 385)) | (1 << (ora2epasParser.VALIDATE - 385)) | (1 << (ora2epasParser.VALUE - 385)) | (1 << (ora2epasParser.VARIABLE - 385)) | (1 << (ora2epasParser.VARRAY - 385)) | (1 << (ora2epasParser.VARYING - 385)) | (1 << (ora2epasParser.VERSION - 385)) | (1 << (ora2epasParser.VERSIONS - 385)) | (1 << (ora2epasParser.WAIT - 385)) | (1 << (ora2epasParser.WARNING - 385)) | (1 << (ora2epasParser.WELLFORMED - 385)) | (1 << (ora2epasParser.WHENEVER - 385)) | (1 << (ora2epasParser.WHILE - 385)) | (1 << (ora2epasParser.WITHIN - 385)) | (1 << (ora2epasParser.WORK - 385)) | (1 << (ora2epasParser.WRITE - 385)) | (1 << (ora2epasParser.XML - 385)) | (1 << (ora2epasParser.XMLAGG - 385)) | (1 << (ora2epasParser.XMLATTRIBUTES - 385)) | (1 << (ora2epasParser.XMLCAST - 385)) | (1 << (ora2epasParser.XMLCOLATTVAL - 385)) | (1 << (ora2epasParser.XMLELEMENT - 385)) | (1 << (ora2epasParser.XMLEXISTS - 385)) | (1 << (ora2epasParser.XMLFOREST - 385)) | (1 << (ora2epasParser.XMLNAMESPACES - 385)) | (1 << (ora2epasParser.XMLPARSE - 385)) | (1 << (ora2epasParser.XMLPI - 385)) | (1 << (ora2epasParser.XMLQUERY - 385)) | (1 << (ora2epasParser.XMLROOT - 385)) | (1 << (ora2epasParser.XMLSERIALIZE - 385)) | (1 << (ora2epasParser.XMLTABLE - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (ora2epasParser.YEAR - 449)) | (1 << (ora2epasParser.YES - 449)) | (1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 449)) | (1 << (ora2epasParser.ZONE - 449)) | (1 << (ora2epasParser.PREDICTION - 449)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 449)) | (1 << (ora2epasParser.PREDICTION_COST - 449)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 449)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 449)) | (1 << (ora2epasParser.PREDICTION_SET - 449)) | (1 << (ora2epasParser.CUME_DIST - 449)) | (1 << (ora2epasParser.DENSE_RANK - 449)) | (1 << (ora2epasParser.LISTAGG - 449)) | (1 << (ora2epasParser.PERCENT_RANK - 449)) | (1 << (ora2epasParser.PERCENTILE_CONT - 449)) | (1 << (ora2epasParser.PERCENTILE_DISC - 449)) | (1 << (ora2epasParser.RANK - 449)) | (1 << (ora2epasParser.AVG - 449)) | (1 << (ora2epasParser.CORR - 449)) | (1 << (ora2epasParser.COVAR_ - 449)) | (1 << (ora2epasParser.DECODE - 449)) | (1 << (ora2epasParser.LAG - 449)) | (1 << (ora2epasParser.LEAD - 449)) | (1 << (ora2epasParser.MAX - 449)) | (1 << (ora2epasParser.MEDIAN - 449)) | (1 << (ora2epasParser.MIN - 449)) | (1 << (ora2epasParser.NTILE - 449)) | (1 << (ora2epasParser.NVL - 449)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 449)) | (1 << (ora2epasParser.REGR_ - 449)) | (1 << (ora2epasParser.ROUND - 449)) | (1 << (ora2epasParser.ROW_NUMBER - 449)) | (1 << (ora2epasParser.SUBSTR - 449)) | (1 << (ora2epasParser.TO_CHAR - 449)) | (1 << (ora2epasParser.TRIM - 449)) | (1 << (ora2epasParser.SUM - 449)) | (1 << (ora2epasParser.STDDEV - 449)) | (1 << (ora2epasParser.VAR_ - 449)) | (1 << (ora2epasParser.VARIANCE - 449)) | (1 << (ora2epasParser.DBMS_ALERT - 449)) | (1 << (ora2epasParser.DBMS_AQADM - 449)) | (1 << (ora2epasParser.DBMS_AQ - 449)) | (1 << (ora2epasParser.DBMS_CRYPTO - 449)) | (1 << (ora2epasParser.DBMS_JOB - 449)) | (1 << (ora2epasParser.DBMS_LOB - 449)) | (1 << (ora2epasParser.DBMS_LOCK - 449)) | (1 << (ora2epasParser.DBMS_MVIEW - 449)) | (1 << (ora2epasParser.DBMS_OUTPUT - 449)) | (1 << (ora2epasParser.DBMS_PIPE - 449)) | (1 << (ora2epasParser.DBMS_PROFILER - 449)) | (1 << (ora2epasParser.DBMS_RANDOM - 449)) | (1 << (ora2epasParser.DBMS_RLS - 449)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 449)) | (1 << (ora2epasParser.DBMS_SESSION - 449)) | (1 << (ora2epasParser.DBMS_SQL - 449)) | (1 << (ora2epasParser.DBMS_UTILITY - 449)) | (1 << (ora2epasParser.EMP_ADMIN - 449)) | (1 << (ora2epasParser.UTL_ENCODE - 449)) | (1 << (ora2epasParser.UTL_FILE - 449)) | (1 << (ora2epasParser.UTL_HTTP - 449)) | (1 << (ora2epasParser.UTL_MAIL - 449)) | (1 << (ora2epasParser.UTL_RAW - 449)) | (1 << (ora2epasParser.UTL_SMTP - 449)) | (1 << (ora2epasParser.UTL_TCP - 449)))) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & ((1 << (ora2epasParser.UTL_URL - 513)) | (1 << (ora2epasParser.NATIONAL_CHAR_STRING_LIT - 513)) | (1 << (ora2epasParser.UNSIGNED_INTEGER - 513)) | (1 << (ora2epasParser.APPROXIMATE_NUM_LIT - 513)) | (1 << (ora2epasParser.CHAR_STRING - 513)) | (1 << (ora2epasParser.DELIMITED_ID - 513)) | (1 << (ora2epasParser.LEFT_PAREN - 513)) | (1 << (ora2epasParser.PLUS_SIGN - 513)) | (1 << (ora2epasParser.MINUS_SIGN - 513)) | (1 << (ora2epasParser.BINDVAR - 513)) | (1 << (ora2epasParser.COLON - 513)) | (1 << (ora2epasParser.INTRODUCER - 513)) | (1 << (ora2epasParser.REGULAR_ID - 513)))) != 0):
                self.state = 3595
                self.expression()


            self.state = 3602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 3598
                self.match(ora2epasParser.COMMA)
                self.state = 3599
                self.expression()
                self.state = 3604
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3605
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)




    def condition(self):

        localctx = ora2epasParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3607
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cursor_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Cursor_expressionContext,0)


        def logical_or_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Logical_or_expressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = ora2epasParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_expression)
        try:
            self.state = 3611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3609
                self.cursor_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3610
                self.logical_or_expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Logical_or_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_and_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Logical_and_expressionContext,0)


        def logical_or_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Logical_or_expressionContext,0)


        def OR(self):
            return self.getToken(ora2epasParser.OR, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_logical_or_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_or_expression" ):
                listener.enterLogical_or_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_or_expression" ):
                listener.exitLogical_or_expression(self)



    def logical_or_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ora2epasParser.Logical_or_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 470
        self.enterRecursionRule(localctx, 470, self.RULE_logical_or_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3614
            self.logical_and_expression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 3621
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,431,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ora2epasParser.Logical_or_expressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_or_expression)
                    self.state = 3616
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3617
                    self.match(ora2epasParser.OR)
                    self.state = 3618
                    self.logical_and_expression(0) 
                self.state = 3623
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,431,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Logical_and_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def negated_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Negated_expressionContext,0)


        def logical_and_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Logical_and_expressionContext,0)


        def AND(self):
            return self.getToken(ora2epasParser.AND, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_logical_and_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_and_expression" ):
                listener.enterLogical_and_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_and_expression" ):
                listener.exitLogical_and_expression(self)



    def logical_and_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ora2epasParser.Logical_and_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 472
        self.enterRecursionRule(localctx, 472, self.RULE_logical_and_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3625
            self.negated_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3632
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,432,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ora2epasParser.Logical_and_expressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_and_expression)
                    self.state = 3627
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 3628
                    self.match(ora2epasParser.AND)
                    self.state = 3629
                    self.negated_expression() 
                self.state = 3634
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,432,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Negated_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(ora2epasParser.NOT, 0)

        def negated_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Negated_expressionContext,0)


        def equality_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Equality_expressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_negated_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNegated_expression" ):
                listener.enterNegated_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNegated_expression" ):
                listener.exitNegated_expression(self)




    def negated_expression(self):

        localctx = ora2epasParser.Negated_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_negated_expression)
        try:
            self.state = 3638
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3635
                self.match(ora2epasParser.NOT)
                self.state = 3636
                self.negated_expression()
                pass
            elif token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ALL, ora2epasParser.ANALYZE, ora2epasParser.ANY, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CASE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COALESCE, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONNECT_BY_ROOT, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DATE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DISTINCT, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXISTS, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FALSE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULL, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.PRIOR, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUE, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.DECODE, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.NVL, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROUND, ora2epasParser.ROW_NUMBER, ora2epasParser.SUBSTR, ora2epasParser.TO_CHAR, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.NATIONAL_CHAR_STRING_LIT, ora2epasParser.UNSIGNED_INTEGER, ora2epasParser.APPROXIMATE_NUM_LIT, ora2epasParser.CHAR_STRING, ora2epasParser.DELIMITED_ID, ora2epasParser.LEFT_PAREN, ora2epasParser.PLUS_SIGN, ora2epasParser.MINUS_SIGN, ora2epasParser.BINDVAR, ora2epasParser.COLON, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3637
                self.equality_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Equality_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiset_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Multiset_expressionContext,0)


        def IS(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.IS)
            else:
                return self.getToken(ora2epasParser.IS, i)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.NULL)
            else:
                return self.getToken(ora2epasParser.NULL, i)

        def NAN(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.NAN)
            else:
                return self.getToken(ora2epasParser.NAN, i)

        def PRESENT(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.PRESENT)
            else:
                return self.getToken(ora2epasParser.PRESENT, i)

        def INFINITE(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.INFINITE)
            else:
                return self.getToken(ora2epasParser.INFINITE, i)

        def A_LETTER(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.A_LETTER)
            else:
                return self.getToken(ora2epasParser.A_LETTER, i)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.SET)
            else:
                return self.getToken(ora2epasParser.SET, i)

        def EMPTY(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.EMPTY)
            else:
                return self.getToken(ora2epasParser.EMPTY, i)

        def OF(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.OF)
            else:
                return self.getToken(ora2epasParser.OF, i)

        def type_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Type_specContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Type_specContext,i)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.NOT)
            else:
                return self.getToken(ora2epasParser.NOT, i)

        def TYPE(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.TYPE)
            else:
                return self.getToken(ora2epasParser.TYPE, i)

        def ONLY(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.ONLY)
            else:
                return self.getToken(ora2epasParser.ONLY, i)

        def getRuleIndex(self):
            return ora2epasParser.RULE_equality_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEquality_expression" ):
                listener.enterEquality_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEquality_expression" ):
                listener.exitEquality_expression(self)




    def equality_expression(self):

        localctx = ora2epasParser.Equality_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_equality_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3640
            self.multiset_expression()
            self.state = 3674
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,439,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3641
                    self.match(ora2epasParser.IS)
                    self.state = 3643
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ora2epasParser.NOT:
                        self.state = 3642
                        self.match(ora2epasParser.NOT)


                    self.state = 3670
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ora2epasParser.NULL]:
                        self.state = 3645
                        self.match(ora2epasParser.NULL)
                        pass
                    elif token in [ora2epasParser.NAN]:
                        self.state = 3646
                        self.match(ora2epasParser.NAN)
                        pass
                    elif token in [ora2epasParser.PRESENT]:
                        self.state = 3647
                        self.match(ora2epasParser.PRESENT)
                        pass
                    elif token in [ora2epasParser.INFINITE]:
                        self.state = 3648
                        self.match(ora2epasParser.INFINITE)
                        pass
                    elif token in [ora2epasParser.A_LETTER]:
                        self.state = 3649
                        self.match(ora2epasParser.A_LETTER)
                        self.state = 3650
                        self.match(ora2epasParser.SET)
                        pass
                    elif token in [ora2epasParser.EMPTY]:
                        self.state = 3651
                        self.match(ora2epasParser.EMPTY)
                        pass
                    elif token in [ora2epasParser.OF]:
                        self.state = 3652
                        self.match(ora2epasParser.OF)
                        self.state = 3654
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ora2epasParser.TYPE:
                            self.state = 3653
                            self.match(ora2epasParser.TYPE)


                        self.state = 3656
                        self.match(ora2epasParser.LEFT_PAREN)
                        self.state = 3658
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
                        if la_ == 1:
                            self.state = 3657
                            self.match(ora2epasParser.ONLY)


                        self.state = 3660
                        self.type_spec()
                        self.state = 3665
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==ora2epasParser.COMMA:
                            self.state = 3661
                            self.match(ora2epasParser.COMMA)
                            self.state = 3662
                            self.type_spec()
                            self.state = 3667
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 3668
                        self.match(ora2epasParser.RIGHT_PAREN)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 3676
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,439,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multiset_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Relational_expressionContext,0)


        def multiset_type(self):
            return self.getTypedRuleContext(ora2epasParser.Multiset_typeContext,0)


        def concatenation(self):
            return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,0)


        def OF(self):
            return self.getToken(ora2epasParser.OF, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_multiset_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiset_expression" ):
                listener.enterMultiset_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiset_expression" ):
                listener.exitMultiset_expression(self)




    def multiset_expression(self):

        localctx = ora2epasParser.Multiset_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_multiset_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3677
            self.relational_expression(0)
            self.state = 3684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
            if la_ == 1:
                self.state = 3678
                self.multiset_type()
                self.state = 3680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.OF:
                    self.state = 3679
                    self.match(ora2epasParser.OF)


                self.state = 3682
                self.concatenation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multiset_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEMBER(self):
            return self.getToken(ora2epasParser.MEMBER, 0)

        def SUBMULTISET(self):
            return self.getToken(ora2epasParser.SUBMULTISET, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_multiset_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiset_type" ):
                listener.enterMultiset_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiset_type" ):
                listener.exitMultiset_type(self)




    def multiset_type(self):

        localctx = ora2epasParser.Multiset_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_multiset_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3686
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.MEMBER or _la==ora2epasParser.SUBMULTISET):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relational_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Compound_expressionContext,0)


        def relational_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Relational_expressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Relational_expressionContext,i)


        def relational_operator(self):
            return self.getTypedRuleContext(ora2epasParser.Relational_operatorContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_relational_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_expression" ):
                listener.enterRelational_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_expression" ):
                listener.exitRelational_expression(self)



    def relational_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ora2epasParser.Relational_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 482
        self.enterRecursionRule(localctx, 482, self.RULE_relational_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3689
            self.compound_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 3697
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,442,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ora2epasParser.Relational_expressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relational_expression)
                    self.state = 3691
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 3692
                    self.relational_operator()
                    self.state = 3693
                    self.relational_expression(3) 
                self.state = 3699
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,442,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Compound_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,i)


        def IN(self):
            return self.getToken(ora2epasParser.IN, 0)

        def in_elements(self):
            return self.getTypedRuleContext(ora2epasParser.In_elementsContext,0)


        def BETWEEN(self):
            return self.getToken(ora2epasParser.BETWEEN, 0)

        def between_elements(self):
            return self.getTypedRuleContext(ora2epasParser.Between_elementsContext,0)


        def like_type(self):
            return self.getTypedRuleContext(ora2epasParser.Like_typeContext,0)


        def NOT(self):
            return self.getToken(ora2epasParser.NOT, 0)

        def like_escape_part(self):
            return self.getTypedRuleContext(ora2epasParser.Like_escape_partContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_compound_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_expression" ):
                listener.enterCompound_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_expression" ):
                listener.exitCompound_expression(self)




    def compound_expression(self):

        localctx = ora2epasParser.Compound_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_compound_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3700
            self.concatenation()
            self.state = 3715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
            if la_ == 1:
                self.state = 3702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.NOT:
                    self.state = 3701
                    self.match(ora2epasParser.NOT)


                self.state = 3713
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ora2epasParser.IN]:
                    self.state = 3704
                    self.match(ora2epasParser.IN)
                    self.state = 3705
                    self.in_elements()
                    pass
                elif token in [ora2epasParser.BETWEEN]:
                    self.state = 3706
                    self.match(ora2epasParser.BETWEEN)
                    self.state = 3707
                    self.between_elements()
                    pass
                elif token in [ora2epasParser.LIKE, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC]:
                    self.state = 3708
                    self.like_type()
                    self.state = 3709
                    self.concatenation()
                    self.state = 3711
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,444,self._ctx)
                    if la_ == 1:
                        self.state = 3710
                        self.like_escape_part()


                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Relational_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_equal_op(self):
            return self.getTypedRuleContext(ora2epasParser.Not_equal_opContext,0)


        def less_than_or_equals_op(self):
            return self.getTypedRuleContext(ora2epasParser.Less_than_or_equals_opContext,0)


        def greater_than_or_equals_op(self):
            return self.getTypedRuleContext(ora2epasParser.Greater_than_or_equals_opContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_relational_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_operator" ):
                listener.enterRelational_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_operator" ):
                listener.exitRelational_operator(self)




    def relational_operator(self):

        localctx = ora2epasParser.Relational_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_relational_operator)
        try:
            self.state = 3723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3717
                self.match(ora2epasParser.EQUALS_OP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3718
                self.not_equal_op()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3719
                self.match(ora2epasParser.LESS_THAN_OP)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3720
                self.match(ora2epasParser.GREATER_THAN_OP)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3721
                self.less_than_or_equals_op()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3722
                self.greater_than_or_equals_op()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Like_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(ora2epasParser.LIKE, 0)

        def LIKEC(self):
            return self.getToken(ora2epasParser.LIKEC, 0)

        def LIKE2(self):
            return self.getToken(ora2epasParser.LIKE2, 0)

        def LIKE4(self):
            return self.getToken(ora2epasParser.LIKE4, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_like_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike_type" ):
                listener.enterLike_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike_type" ):
                listener.exitLike_type(self)




    def like_type(self):

        localctx = ora2epasParser.Like_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_like_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3725
            _la = self._input.LA(1)
            if not(((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & ((1 << (ora2epasParser.LIKE - 200)) | (1 << (ora2epasParser.LIKE2 - 200)) | (1 << (ora2epasParser.LIKE4 - 200)) | (1 << (ora2epasParser.LIKEC - 200)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Like_escape_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ESCAPE(self):
            return self.getToken(ora2epasParser.ESCAPE, 0)

        def concatenation(self):
            return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_like_escape_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike_escape_part" ):
                listener.enterLike_escape_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike_escape_part" ):
                listener.exitLike_escape_part(self)




    def like_escape_part(self):

        localctx = ora2epasParser.Like_escape_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_like_escape_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3727
            self.match(ora2epasParser.ESCAPE)
            self.state = 3728
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class In_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(ora2epasParser.SubqueryContext,0)


        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,i)


        def constant(self):
            return self.getTypedRuleContext(ora2epasParser.ConstantContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(ora2epasParser.Bind_variableContext,0)


        def general_element(self):
            return self.getTypedRuleContext(ora2epasParser.General_elementContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_in_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_elements" ):
                listener.enterIn_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_elements" ):
                listener.exitIn_elements(self)




    def in_elements(self):

        localctx = ora2epasParser.In_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_in_elements)
        self._la = 0 # Token type
        try:
            self.state = 3748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3730
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 3731
                self.subquery()
                self.state = 3732
                self.match(ora2epasParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3734
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 3735
                self.concatenation()
                self.state = 3740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 3736
                    self.match(ora2epasParser.COMMA)
                    self.state = 3737
                    self.concatenation()
                    self.state = 3742
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3743
                self.match(ora2epasParser.RIGHT_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3745
                self.constant()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3746
                self.bind_variable()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3747
                self.general_element()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Between_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,i)


        def AND(self):
            return self.getToken(ora2epasParser.AND, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_between_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween_elements" ):
                listener.enterBetween_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween_elements" ):
                listener.exitBetween_elements(self)




    def between_elements(self):

        localctx = ora2epasParser.Between_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_between_elements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3750
            self.concatenation()
            self.state = 3751
            self.match(ora2epasParser.AND)
            self.state = 3752
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConcatenationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Additive_expressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Additive_expressionContext,i)


        def concatenation_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Concatenation_opContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Concatenation_opContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_concatenation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)




    def concatenation(self):

        localctx = ora2epasParser.ConcatenationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_concatenation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3754
            self.additive_expression()
            self.state = 3760
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,450,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3755
                    self.concatenation_op()
                    self.state = 3756
                    self.additive_expression() 
                self.state = 3762
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,450,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Additive_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s529 = None # Token
            self.op = list() # of Tokens
            self.s530 = None # Token
            self._tset6607 = None # Token

        def multiply_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Multiply_expressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Multiply_expressionContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_additive_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive_expression" ):
                listener.enterAdditive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive_expression" ):
                listener.exitAdditive_expression(self)




    def additive_expression(self):

        localctx = ora2epasParser.Additive_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_additive_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3763
            self.multiply_expression()
            self.state = 3768
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,451,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3764
                    localctx._tset6607 = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==ora2epasParser.PLUS_SIGN or _la==ora2epasParser.MINUS_SIGN):
                        localctx._tset6607 = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    localctx.op.append(localctx._tset6607)
                    self.state = 3765
                    self.multiply_expression() 
                self.state = 3770
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,451,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multiply_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s528 = None # Token
            self.op = list() # of Tokens
            self.s532 = None # Token
            self._tset6630 = None # Token

        def datetime_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Datetime_expressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Datetime_expressionContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_multiply_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiply_expression" ):
                listener.enterMultiply_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiply_expression" ):
                listener.exitMultiply_expression(self)




    def multiply_expression(self):

        localctx = ora2epasParser.Multiply_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_multiply_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3771
            self.datetime_expression()
            self.state = 3776
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,452,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3772
                    localctx._tset6630 = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==ora2epasParser.ASTERISK or _la==ora2epasParser.SOLIDUS):
                        localctx._tset6630 = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    localctx.op.append(localctx._tset6630)
                    self.state = 3773
                    self.datetime_expression() 
                self.state = 3778
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,452,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Datetime_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def model_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Model_expressionContext,0)


        def AT(self):
            return self.getToken(ora2epasParser.AT, 0)

        def interval_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Interval_expressionContext,0)


        def LOCAL(self):
            return self.getToken(ora2epasParser.LOCAL, 0)

        def TIME(self):
            return self.getToken(ora2epasParser.TIME, 0)

        def ZONE(self):
            return self.getToken(ora2epasParser.ZONE, 0)

        def concatenation(self):
            return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_datetime_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatetime_expression" ):
                listener.enterDatetime_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatetime_expression" ):
                listener.exitDatetime_expression(self)




    def datetime_expression(self):

        localctx = ora2epasParser.Datetime_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_datetime_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3779
            self.model_expression()
            self.state = 3788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,454,self._ctx)
            if la_ == 1:
                self.state = 3780
                self.match(ora2epasParser.AT)
                self.state = 3785
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ora2epasParser.LOCAL]:
                    self.state = 3781
                    self.match(ora2epasParser.LOCAL)
                    pass
                elif token in [ora2epasParser.TIME]:
                    self.state = 3782
                    self.match(ora2epasParser.TIME)
                    self.state = 3783
                    self.match(ora2epasParser.ZONE)
                    self.state = 3784
                    self.concatenation()
                    pass
                else:
                    raise NoViableAltException(self)


            elif la_ == 2:
                self.state = 3787
                self.interval_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interval_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DAY(self):
            return self.getToken(ora2epasParser.DAY, 0)

        def TO(self):
            return self.getToken(ora2epasParser.TO, 0)

        def SECOND(self):
            return self.getToken(ora2epasParser.SECOND, 0)

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,i)


        def YEAR(self):
            return self.getToken(ora2epasParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(ora2epasParser.MONTH, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_interval_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expression" ):
                listener.enterInterval_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expression" ):
                listener.exitInterval_expression(self)




    def interval_expression(self):

        localctx = ora2epasParser.Interval_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_interval_expression)
        self._la = 0 # Token type
        try:
            self.state = 3814
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.DAY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3790
                self.match(ora2epasParser.DAY)
                self.state = 3795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.LEFT_PAREN:
                    self.state = 3791
                    self.match(ora2epasParser.LEFT_PAREN)
                    self.state = 3792
                    self.concatenation()
                    self.state = 3793
                    self.match(ora2epasParser.RIGHT_PAREN)


                self.state = 3797
                self.match(ora2epasParser.TO)
                self.state = 3798
                self.match(ora2epasParser.SECOND)
                self.state = 3803
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,456,self._ctx)
                if la_ == 1:
                    self.state = 3799
                    self.match(ora2epasParser.LEFT_PAREN)
                    self.state = 3800
                    self.concatenation()
                    self.state = 3801
                    self.match(ora2epasParser.RIGHT_PAREN)


                pass
            elif token in [ora2epasParser.YEAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3805
                self.match(ora2epasParser.YEAR)
                self.state = 3810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.LEFT_PAREN:
                    self.state = 3806
                    self.match(ora2epasParser.LEFT_PAREN)
                    self.state = 3807
                    self.concatenation()
                    self.state = 3808
                    self.match(ora2epasParser.RIGHT_PAREN)


                self.state = 3812
                self.match(ora2epasParser.TO)
                self.state = 3813
                self.match(ora2epasParser.MONTH)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Unary_expressionContext,0)


        def model_expression_element(self):
            return self.getTypedRuleContext(ora2epasParser.Model_expression_elementContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_model_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_expression" ):
                listener.enterModel_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_expression" ):
                listener.exitModel_expression(self)




    def model_expression(self):

        localctx = ora2epasParser.Model_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_model_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3816
            self.unary_expression()
            self.state = 3821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
            if la_ == 1:
                self.state = 3817
                self.match(ora2epasParser.LEFT_BRACKET)
                self.state = 3818
                self.model_expression_element()
                self.state = 3819
                self.match(ora2epasParser.RIGHT_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_expression_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.ANY)
            else:
                return self.getToken(ora2epasParser.ANY, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ExpressionContext,i)


        def single_column_for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Single_column_for_loopContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Single_column_for_loopContext,i)


        def multi_column_for_loop(self):
            return self.getTypedRuleContext(ora2epasParser.Multi_column_for_loopContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_model_expression_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_expression_element" ):
                listener.enterModel_expression_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_expression_element" ):
                listener.exitModel_expression_element(self)




    def model_expression_element(self):

        localctx = ora2epasParser.Model_expression_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_model_expression_element)
        self._la = 0 # Token type
        try:
            self.state = 3846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,464,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3825
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,460,self._ctx)
                if la_ == 1:
                    self.state = 3823
                    self.match(ora2epasParser.ANY)
                    pass

                elif la_ == 2:
                    self.state = 3824
                    self.expression()
                    pass


                self.state = 3834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 3827
                    self.match(ora2epasParser.COMMA)
                    self.state = 3830
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,461,self._ctx)
                    if la_ == 1:
                        self.state = 3828
                        self.match(ora2epasParser.ANY)
                        pass

                    elif la_ == 2:
                        self.state = 3829
                        self.expression()
                        pass


                    self.state = 3836
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3837
                self.single_column_for_loop()
                self.state = 3842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 3838
                    self.match(ora2epasParser.COMMA)
                    self.state = 3839
                    self.single_column_for_loop()
                    self.state = 3844
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3845
                self.multi_column_for_loop()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Single_column_for_loopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ex1 = None # ExpressionContext
            self.ex2 = None # ExpressionContext
            self.ex3 = None # ExpressionContext

        def FOR(self):
            return self.getToken(ora2epasParser.FOR, 0)

        def column_name(self):
            return self.getTypedRuleContext(ora2epasParser.Column_nameContext,0)


        def IN(self):
            return self.getToken(ora2epasParser.IN, 0)

        def expression_list(self):
            return self.getTypedRuleContext(ora2epasParser.Expression_listContext,0)


        def FROM(self):
            return self.getToken(ora2epasParser.FROM, 0)

        def TO(self):
            return self.getToken(ora2epasParser.TO, 0)

        def for_increment_decrement_type(self):
            return self.getTypedRuleContext(ora2epasParser.For_increment_decrement_typeContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ExpressionContext,i)


        def for_like_part(self):
            return self.getTypedRuleContext(ora2epasParser.For_like_partContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_single_column_for_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_column_for_loop" ):
                listener.enterSingle_column_for_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_column_for_loop" ):
                listener.exitSingle_column_for_loop(self)




    def single_column_for_loop(self):

        localctx = ora2epasParser.Single_column_for_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_single_column_for_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3848
            self.match(ora2epasParser.FOR)
            self.state = 3849
            self.column_name()
            self.state = 3862
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.IN]:
                self.state = 3850
                self.match(ora2epasParser.IN)
                self.state = 3851
                self.expression_list()
                pass
            elif token in [ora2epasParser.FROM, ora2epasParser.LIKE]:
                self.state = 3853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.LIKE:
                    self.state = 3852
                    self.for_like_part()


                self.state = 3855
                self.match(ora2epasParser.FROM)
                self.state = 3856
                localctx.ex1 = self.expression()
                self.state = 3857
                self.match(ora2epasParser.TO)
                self.state = 3858
                localctx.ex2 = self.expression()
                self.state = 3859
                self.for_increment_decrement_type()
                self.state = 3860
                localctx.ex3 = self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_like_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(ora2epasParser.LIKE, 0)

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_for_like_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_like_part" ):
                listener.enterFor_like_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_like_part" ):
                listener.exitFor_like_part(self)




    def for_like_part(self):

        localctx = ora2epasParser.For_like_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_for_like_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3864
            self.match(ora2epasParser.LIKE)
            self.state = 3865
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_increment_decrement_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCREMENT(self):
            return self.getToken(ora2epasParser.INCREMENT, 0)

        def DECREMENT(self):
            return self.getToken(ora2epasParser.DECREMENT, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_for_increment_decrement_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_increment_decrement_type" ):
                listener.enterFor_increment_decrement_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_increment_decrement_type" ):
                listener.exitFor_increment_decrement_type(self)




    def for_increment_decrement_type(self):

        localctx = ora2epasParser.For_increment_decrement_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_for_increment_decrement_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3867
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.DECREMENT or _la==ora2epasParser.INCREMENT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Multi_column_for_loopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(ora2epasParser.FOR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_nameContext,i)


        def IN(self):
            return self.getToken(ora2epasParser.IN, 0)

        def subquery(self):
            return self.getTypedRuleContext(ora2epasParser.SubqueryContext,0)


        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Expression_listContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_multi_column_for_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulti_column_for_loop" ):
                listener.enterMulti_column_for_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulti_column_for_loop" ):
                listener.exitMulti_column_for_loop(self)




    def multi_column_for_loop(self):

        localctx = ora2epasParser.Multi_column_for_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_multi_column_for_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3869
            self.match(ora2epasParser.FOR)
            self.state = 3870
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 3871
            self.column_name()
            self.state = 3876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 3872
                self.match(ora2epasParser.COMMA)
                self.state = 3873
                self.column_name()
                self.state = 3878
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3879
            self.match(ora2epasParser.RIGHT_PAREN)
            self.state = 3880
            self.match(ora2epasParser.IN)
            self.state = 3881
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 3894
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,469,self._ctx)
            if la_ == 1:
                self.state = 3882
                self.subquery()
                pass

            elif la_ == 2:
                self.state = 3883
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 3884
                self.expression_list()
                self.state = 3889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 3885
                    self.match(ora2epasParser.COMMA)
                    self.state = 3886
                    self.expression_list()
                    self.state = 3891
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3892
                self.match(ora2epasParser.RIGHT_PAREN)
                pass


            self.state = 3896
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Unary_expressionContext,0)


        def PRIOR(self):
            return self.getToken(ora2epasParser.PRIOR, 0)

        def CONNECT_BY_ROOT(self):
            return self.getToken(ora2epasParser.CONNECT_BY_ROOT, 0)

        def NEW(self):
            return self.getToken(ora2epasParser.NEW, 0)

        def DISTINCT(self):
            return self.getToken(ora2epasParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(ora2epasParser.ALL, 0)

        def case_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Case_statementContext,0)


        def quantified_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Quantified_expressionContext,0)


        def standard_function(self):
            return self.getTypedRuleContext(ora2epasParser.Standard_functionContext,0)


        def atom(self):
            return self.getTypedRuleContext(ora2epasParser.AtomContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_unary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_expression" ):
                listener.enterUnary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_expression" ):
                listener.exitUnary_expression(self)




    def unary_expression(self):

        localctx = ora2epasParser.Unary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_unary_expression)
        self._la = 0 # Token type
        try:
            self.state = 3914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,470,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3898
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.PLUS_SIGN or _la==ora2epasParser.MINUS_SIGN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3899
                self.unary_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3900
                self.match(ora2epasParser.PRIOR)
                self.state = 3901
                self.unary_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3902
                self.match(ora2epasParser.CONNECT_BY_ROOT)
                self.state = 3903
                self.unary_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3904
                self.match(ora2epasParser.NEW)
                self.state = 3905
                self.unary_expression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3906
                self.match(ora2epasParser.DISTINCT)
                self.state = 3907
                self.unary_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3908
                self.match(ora2epasParser.ALL)
                self.state = 3909
                self.unary_expression()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3910
                self.case_statement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3911
                self.quantified_expression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3912
                self.standard_function()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3913
                self.atom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def searched_case_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Searched_case_statementContext,0)


        def simple_case_statement(self):
            return self.getTypedRuleContext(ora2epasParser.Simple_case_statementContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_case_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_statement" ):
                listener.enterCase_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_statement" ):
                listener.exitCase_statement(self)




    def case_statement(self):

        localctx = ora2epasParser.Case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_case_statement)
        try:
            self.state = 3918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,471,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3916
                self.searched_case_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3917
                self.simple_case_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ck1 = None # Token

        def atom(self):
            return self.getTypedRuleContext(ora2epasParser.AtomContext,0)


        def END(self):
            return self.getToken(ora2epasParser.END, 0)

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.CASE)
            else:
                return self.getToken(ora2epasParser.CASE, i)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Label_nameContext,i)


        def simple_case_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Simple_case_when_partContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Simple_case_when_partContext,i)


        def case_else_part(self):
            return self.getTypedRuleContext(ora2epasParser.Case_else_partContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_simple_case_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_case_statement" ):
                listener.enterSimple_case_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_case_statement" ):
                listener.exitSimple_case_statement(self)




    def simple_case_statement(self):

        localctx = ora2epasParser.Simple_case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_simple_case_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or _la==ora2epasParser.DELIMITED_ID or _la==ora2epasParser.REGULAR_ID:
                self.state = 3920
                self.label_name()


            self.state = 3923
            localctx.ck1 = self.match(ora2epasParser.CASE)
            self.state = 3924
            self.atom()
            self.state = 3926 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3925
                self.simple_case_when_part()
                self.state = 3928 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ora2epasParser.WHEN):
                    break

            self.state = 3931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.ELSE:
                self.state = 3930
                self.case_else_part()


            self.state = 3933
            self.match(ora2epasParser.END)
            self.state = 3935
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,475,self._ctx)
            if la_ == 1:
                self.state = 3934
                self.match(ora2epasParser.CASE)


            self.state = 3938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,476,self._ctx)
            if la_ == 1:
                self.state = 3937
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_case_when_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(ora2epasParser.WHEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ExpressionContext,i)


        def THEN(self):
            return self.getToken(ora2epasParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(ora2epasParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_simple_case_when_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_case_when_part" ):
                listener.enterSimple_case_when_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_case_when_part" ):
                listener.exitSimple_case_when_part(self)




    def simple_case_when_part(self):

        localctx = ora2epasParser.Simple_case_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_simple_case_when_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3940
            self.match(ora2epasParser.WHEN)
            self.state = 3941
            self.expression()
            self.state = 3942
            self.match(ora2epasParser.THEN)
            self.state = 3945
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,477,self._ctx)
            if la_ == 1:
                self.state = 3943
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 3944
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Searched_case_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ck1 = None # Token

        def END(self):
            return self.getToken(ora2epasParser.END, 0)

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.CASE)
            else:
                return self.getToken(ora2epasParser.CASE, i)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Label_nameContext,i)


        def searched_case_when_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Searched_case_when_partContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Searched_case_when_partContext,i)


        def case_else_part(self):
            return self.getTypedRuleContext(ora2epasParser.Case_else_partContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_searched_case_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearched_case_statement" ):
                listener.enterSearched_case_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearched_case_statement" ):
                listener.exitSearched_case_statement(self)




    def searched_case_statement(self):

        localctx = ora2epasParser.Searched_case_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_searched_case_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or _la==ora2epasParser.DELIMITED_ID or _la==ora2epasParser.REGULAR_ID:
                self.state = 3947
                self.label_name()


            self.state = 3950
            localctx.ck1 = self.match(ora2epasParser.CASE)
            self.state = 3952 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3951
                self.searched_case_when_part()
                self.state = 3954 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ora2epasParser.WHEN):
                    break

            self.state = 3957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.ELSE:
                self.state = 3956
                self.case_else_part()


            self.state = 3959
            self.match(ora2epasParser.END)
            self.state = 3961
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,481,self._ctx)
            if la_ == 1:
                self.state = 3960
                self.match(ora2epasParser.CASE)


            self.state = 3964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,482,self._ctx)
            if la_ == 1:
                self.state = 3963
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Searched_case_when_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(ora2epasParser.WHEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ExpressionContext,i)


        def THEN(self):
            return self.getToken(ora2epasParser.THEN, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(ora2epasParser.Seq_of_statementsContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_searched_case_when_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearched_case_when_part" ):
                listener.enterSearched_case_when_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearched_case_when_part" ):
                listener.exitSearched_case_when_part(self)




    def searched_case_when_part(self):

        localctx = ora2epasParser.Searched_case_when_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_searched_case_when_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3966
            self.match(ora2epasParser.WHEN)
            self.state = 3967
            self.expression()
            self.state = 3968
            self.match(ora2epasParser.THEN)
            self.state = 3971
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,483,self._ctx)
            if la_ == 1:
                self.state = 3969
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 3970
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_else_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(ora2epasParser.ELSE, 0)

        def seq_of_statements(self):
            return self.getTypedRuleContext(ora2epasParser.Seq_of_statementsContext,0)


        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_case_else_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_else_part" ):
                listener.enterCase_else_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_else_part" ):
                listener.exitCase_else_part(self)




    def case_else_part(self):

        localctx = ora2epasParser.Case_else_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_case_else_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3973
            self.match(ora2epasParser.ELSE)
            self.state = 3976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
            if la_ == 1:
                self.state = 3974
                self.seq_of_statements()
                pass

            elif la_ == 2:
                self.state = 3975
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_element(self):
            return self.getTypedRuleContext(ora2epasParser.Table_elementContext,0)


        def outer_join_sign(self):
            return self.getTypedRuleContext(ora2epasParser.Outer_join_signContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(ora2epasParser.Bind_variableContext,0)


        def constant(self):
            return self.getTypedRuleContext(ora2epasParser.ConstantContext,0)


        def general_element(self):
            return self.getTypedRuleContext(ora2epasParser.General_elementContext,0)


        def subquery(self):
            return self.getTypedRuleContext(ora2epasParser.SubqueryContext,0)


        def expression_or_vector(self):
            return self.getTypedRuleContext(ora2epasParser.Expression_or_vectorContext,0)


        def subquery_operation_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Subquery_operation_partContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Subquery_operation_partContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)




    def atom(self):

        localctx = ora2epasParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_atom)
        try:
            self.state = 3998
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,487,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3978
                self.table_element()
                self.state = 3979
                self.outer_join_sign()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3981
                self.bind_variable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3982
                self.constant()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3983
                self.general_element()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3984
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 3996
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
                if la_ == 1:
                    self.state = 3985
                    self.subquery()
                    self.state = 3986
                    self.match(ora2epasParser.RIGHT_PAREN)
                    self.state = 3990
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,485,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3987
                            self.subquery_operation_part() 
                        self.state = 3992
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,485,self._ctx)

                    pass

                elif la_ == 2:
                    self.state = 3993
                    self.expression_or_vector()
                    self.state = 3994
                    self.match(ora2epasParser.RIGHT_PAREN)
                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_or_vectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def vector_expr(self):
            return self.getTypedRuleContext(ora2epasParser.Vector_exprContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_expression_or_vector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_or_vector" ):
                listener.enterExpression_or_vector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_or_vector" ):
                listener.exitExpression_or_vector(self)




    def expression_or_vector(self):

        localctx = ora2epasParser.Expression_or_vectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_expression_or_vector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4000
            self.expression()
            self.state = 4002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.COMMA:
                self.state = 4001
                self.vector_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Vector_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ExpressionContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_vector_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expr" ):
                listener.enterVector_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expr" ):
                listener.exitVector_expr(self)




    def vector_expr(self):

        localctx = ora2epasParser.Vector_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_vector_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4004
            self.match(ora2epasParser.COMMA)
            self.state = 4005
            self.expression()
            self.state = 4010
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 4006
                self.match(ora2epasParser.COMMA)
                self.state = 4007
                self.expression()
                self.state = 4012
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Quantified_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOME(self):
            return self.getToken(ora2epasParser.SOME, 0)

        def EXISTS(self):
            return self.getToken(ora2epasParser.EXISTS, 0)

        def ALL(self):
            return self.getToken(ora2epasParser.ALL, 0)

        def ANY(self):
            return self.getToken(ora2epasParser.ANY, 0)

        def subquery(self):
            return self.getTypedRuleContext(ora2epasParser.SubqueryContext,0)


        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_quantified_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantified_expression" ):
                listener.enterQuantified_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantified_expression" ):
                listener.exitQuantified_expression(self)




    def quantified_expression(self):

        localctx = ora2epasParser.Quantified_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_quantified_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4013
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.ALL or _la==ora2epasParser.ANY or _la==ora2epasParser.EXISTS or _la==ora2epasParser.SOME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,490,self._ctx)
            if la_ == 1:
                self.state = 4014
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4015
                self.subquery()
                self.state = 4016
                self.match(ora2epasParser.RIGHT_PAREN)
                pass

            elif la_ == 2:
                self.state = 4018
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4019
                self.expression()
                self.state = 4020
                self.match(ora2epasParser.RIGHT_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBSTR(self):
            return self.getToken(ora2epasParser.SUBSTR, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.COMMA)
            else:
                return self.getToken(ora2epasParser.COMMA, i)

        def TO_CHAR(self):
            return self.getToken(ora2epasParser.TO_CHAR, 0)

        def table_element(self):
            return self.getTypedRuleContext(ora2epasParser.Table_elementContext,0)


        def standard_function(self):
            return self.getTypedRuleContext(ora2epasParser.Standard_functionContext,0)


        def quoted_string(self):
            return self.getTypedRuleContext(ora2epasParser.Quoted_stringContext,0)


        def DECODE(self):
            return self.getToken(ora2epasParser.DECODE, 0)

        def CHR(self):
            return self.getToken(ora2epasParser.CHR, 0)

        def concatenation(self):
            return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,0)


        def USING(self):
            return self.getToken(ora2epasParser.USING, 0)

        def NCHAR_CS(self):
            return self.getToken(ora2epasParser.NCHAR_CS, 0)

        def NVL(self):
            return self.getToken(ora2epasParser.NVL, 0)

        def TRIM(self):
            return self.getToken(ora2epasParser.TRIM, 0)

        def FROM(self):
            return self.getToken(ora2epasParser.FROM, 0)

        def LEADING(self):
            return self.getToken(ora2epasParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(ora2epasParser.TRAILING, 0)

        def BOTH(self):
            return self.getToken(ora2epasParser.BOTH, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_string_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_function" ):
                listener.enterString_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_function" ):
                listener.exitString_function(self)




    def string_function(self):

        localctx = ora2epasParser.String_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_string_function)
        self._la = 0 # Token type
        try:
            self.state = 4087
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.SUBSTR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4024
                self.match(ora2epasParser.SUBSTR)
                self.state = 4025
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4026
                self.expression()
                self.state = 4027
                self.match(ora2epasParser.COMMA)
                self.state = 4028
                self.expression()
                self.state = 4031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.COMMA:
                    self.state = 4029
                    self.match(ora2epasParser.COMMA)
                    self.state = 4030
                    self.expression()


                self.state = 4033
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            elif token in [ora2epasParser.TO_CHAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4035
                self.match(ora2epasParser.TO_CHAR)
                self.state = 4036
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4039
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,492,self._ctx)
                if la_ == 1:
                    self.state = 4037
                    self.table_element()
                    pass

                elif la_ == 2:
                    self.state = 4038
                    self.standard_function()
                    pass


                self.state = 4043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.COMMA:
                    self.state = 4041
                    self.match(ora2epasParser.COMMA)
                    self.state = 4042
                    self.quoted_string()


                self.state = 4045
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            elif token in [ora2epasParser.DECODE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4047
                self.match(ora2epasParser.DECODE)
                self.state = 4048
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4049
                self.expression()
                self.state = 4054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 4050
                    self.match(ora2epasParser.COMMA)
                    self.state = 4051
                    self.expression()
                    self.state = 4056
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4057
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            elif token in [ora2epasParser.CHR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4059
                self.match(ora2epasParser.CHR)
                self.state = 4060
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4061
                self.concatenation()
                self.state = 4062
                self.match(ora2epasParser.USING)
                self.state = 4063
                self.match(ora2epasParser.NCHAR_CS)
                self.state = 4064
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            elif token in [ora2epasParser.NVL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4066
                self.match(ora2epasParser.NVL)
                self.state = 4067
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4068
                self.expression()
                self.state = 4069
                self.match(ora2epasParser.COMMA)
                self.state = 4070
                self.expression()
                self.state = 4071
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            elif token in [ora2epasParser.TRIM]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4073
                self.match(ora2epasParser.TRIM)
                self.state = 4074
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4082
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,497,self._ctx)
                if la_ == 1:
                    self.state = 4076
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ora2epasParser.BOTH or _la==ora2epasParser.LEADING or _la==ora2epasParser.TRAILING:
                        self.state = 4075
                        _la = self._input.LA(1)
                        if not(_la==ora2epasParser.BOTH or _la==ora2epasParser.LEADING or _la==ora2epasParser.TRAILING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 4079
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ora2epasParser.NATIONAL_CHAR_STRING_LIT or _la==ora2epasParser.CHAR_STRING:
                        self.state = 4078
                        self.quoted_string()


                    self.state = 4081
                    self.match(ora2epasParser.FROM)


                self.state = 4084
                self.concatenation()
                self.state = 4085
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Standard_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_function(self):
            return self.getTypedRuleContext(ora2epasParser.String_functionContext,0)


        def numeric_function_wrapper(self):
            return self.getTypedRuleContext(ora2epasParser.Numeric_function_wrapperContext,0)


        def other_function(self):
            return self.getTypedRuleContext(ora2epasParser.Other_functionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_standard_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandard_function" ):
                listener.enterStandard_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandard_function" ):
                listener.exitStandard_function(self)




    def standard_function(self):

        localctx = ora2epasParser.Standard_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_standard_function)
        try:
            self.state = 4092
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,499,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4089
                self.string_function()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4090
                self.numeric_function_wrapper()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4091
                self.other_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Numeric_function_wrapperContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_function(self):
            return self.getTypedRuleContext(ora2epasParser.Numeric_functionContext,0)


        def single_column_for_loop(self):
            return self.getTypedRuleContext(ora2epasParser.Single_column_for_loopContext,0)


        def multi_column_for_loop(self):
            return self.getTypedRuleContext(ora2epasParser.Multi_column_for_loopContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_numeric_function_wrapper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_function_wrapper" ):
                listener.enterNumeric_function_wrapper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_function_wrapper" ):
                listener.exitNumeric_function_wrapper(self)




    def numeric_function_wrapper(self):

        localctx = ora2epasParser.Numeric_function_wrapperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_numeric_function_wrapper)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4094
            self.numeric_function()
            self.state = 4097
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,500,self._ctx)
            if la_ == 1:
                self.state = 4095
                self.single_column_for_loop()

            elif la_ == 2:
                self.state = 4096
                self.multi_column_for_loop()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Numeric_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUM(self):
            return self.getToken(ora2epasParser.SUM, 0)

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def DISTINCT(self):
            return self.getToken(ora2epasParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(ora2epasParser.ALL, 0)

        def COUNT(self):
            return self.getToken(ora2epasParser.COUNT, 0)

        def over_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Over_clauseContext,0)


        def concatenation(self):
            return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,0)


        def UNIQUE(self):
            return self.getToken(ora2epasParser.UNIQUE, 0)

        def ROUND(self):
            return self.getToken(ora2epasParser.ROUND, 0)

        def COMMA(self):
            return self.getToken(ora2epasParser.COMMA, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(ora2epasParser.UNSIGNED_INTEGER, 0)

        def AVG(self):
            return self.getToken(ora2epasParser.AVG, 0)

        def MAX(self):
            return self.getToken(ora2epasParser.MAX, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_numeric_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_function" ):
                listener.enterNumeric_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_function" ):
                listener.exitNumeric_function(self)




    def numeric_function(self):

        localctx = ora2epasParser.Numeric_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_numeric_function)
        self._la = 0 # Token type
        try:
            self.state = 4147
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.SUM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4099
                self.match(ora2epasParser.SUM)
                self.state = 4100
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4102
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,501,self._ctx)
                if la_ == 1:
                    self.state = 4101
                    _la = self._input.LA(1)
                    if not(_la==ora2epasParser.ALL or _la==ora2epasParser.DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4104
                self.expression()
                self.state = 4105
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            elif token in [ora2epasParser.COUNT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4107
                self.match(ora2epasParser.COUNT)
                self.state = 4108
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4116
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ora2epasParser.ASTERISK]:
                    self.state = 4109
                    self.match(ora2epasParser.ASTERISK)
                    pass
                elif token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ALL, ora2epasParser.ANALYZE, ora2epasParser.ANY, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CASE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COALESCE, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONNECT_BY_ROOT, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DATE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DISTINCT, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXISTS, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FALSE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULL, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.PRIOR, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUE, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNIQUE, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.DECODE, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.NVL, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROUND, ora2epasParser.ROW_NUMBER, ora2epasParser.SUBSTR, ora2epasParser.TO_CHAR, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.NATIONAL_CHAR_STRING_LIT, ora2epasParser.UNSIGNED_INTEGER, ora2epasParser.APPROXIMATE_NUM_LIT, ora2epasParser.CHAR_STRING, ora2epasParser.DELIMITED_ID, ora2epasParser.LEFT_PAREN, ora2epasParser.RIGHT_PAREN, ora2epasParser.PLUS_SIGN, ora2epasParser.MINUS_SIGN, ora2epasParser.BINDVAR, ora2epasParser.COLON, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                    self.state = 4114
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ALL) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ANY) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CASE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COALESCE) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ora2epasParser.CONNECT_BY_ROOT - 65)) | (1 << (ora2epasParser.CONSTANT - 65)) | (1 << (ora2epasParser.CONSTRAINT - 65)) | (1 << (ora2epasParser.CONSTRAINTS - 65)) | (1 << (ora2epasParser.CONSTRUCTOR - 65)) | (1 << (ora2epasParser.CONTENT - 65)) | (1 << (ora2epasParser.CONTEXT - 65)) | (1 << (ora2epasParser.CONTINUE - 65)) | (1 << (ora2epasParser.CONVERT - 65)) | (1 << (ora2epasParser.CORRUPT_XID - 65)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 65)) | (1 << (ora2epasParser.COST - 65)) | (1 << (ora2epasParser.COUNT - 65)) | (1 << (ora2epasParser.CROSS - 65)) | (1 << (ora2epasParser.CUBE - 65)) | (1 << (ora2epasParser.CURRENT_USER - 65)) | (1 << (ora2epasParser.CURSOR - 65)) | (1 << (ora2epasParser.CUSTOMDATUM - 65)) | (1 << (ora2epasParser.CYCLE - 65)) | (1 << (ora2epasParser.DATA - 65)) | (1 << (ora2epasParser.DATABASE - 65)) | (1 << (ora2epasParser.DATE - 65)) | (1 << (ora2epasParser.DAY - 65)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 65)) | (1 << (ora2epasParser.DBTIMEZONE - 65)) | (1 << (ora2epasParser.DDL - 65)) | (1 << (ora2epasParser.DEBUG - 65)) | (1 << (ora2epasParser.DEC - 65)) | (1 << (ora2epasParser.DECIMAL - 65)) | (1 << (ora2epasParser.DECOMPOSE - 65)) | (1 << (ora2epasParser.DECREMENT - 65)) | (1 << (ora2epasParser.DEFAULT - 65)) | (1 << (ora2epasParser.DEFAULTS - 65)) | (1 << (ora2epasParser.DEFERRED - 65)) | (1 << (ora2epasParser.DEFINER - 65)) | (1 << (ora2epasParser.DETERMINISTIC - 65)) | (1 << (ora2epasParser.DIMENSION - 65)) | (1 << (ora2epasParser.DISABLE - 65)) | (1 << (ora2epasParser.DISASSOCIATE - 65)) | (1 << (ora2epasParser.DISTINCT - 65)) | (1 << (ora2epasParser.DOCUMENT - 65)) | (1 << (ora2epasParser.DOUBLE - 65)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (ora2epasParser.EACH - 65)) | (1 << (ora2epasParser.ELEMENT - 65)) | (1 << (ora2epasParser.EMPTY - 65)) | (1 << (ora2epasParser.ENABLE - 65)) | (1 << (ora2epasParser.ENCODING - 65)) | (1 << (ora2epasParser.ENTITYESCAPING - 65)) | (1 << (ora2epasParser.ERR - 65)) | (1 << (ora2epasParser.ERRORS - 65)) | (1 << (ora2epasParser.ESCAPE - 65)) | (1 << (ora2epasParser.EVALNAME - 65)) | (1 << (ora2epasParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (ora2epasParser.EXCEPTION_INIT - 129)) | (1 << (ora2epasParser.EXCEPTIONS - 129)) | (1 << (ora2epasParser.EXCLUDE - 129)) | (1 << (ora2epasParser.EXECUTE - 129)) | (1 << (ora2epasParser.EXISTS - 129)) | (1 << (ora2epasParser.EXIT - 129)) | (1 << (ora2epasParser.EXPLAIN - 129)) | (1 << (ora2epasParser.EXTERNAL - 129)) | (1 << (ora2epasParser.EXTRACT - 129)) | (1 << (ora2epasParser.FAILURE - 129)) | (1 << (ora2epasParser.FALSE - 129)) | (1 << (ora2epasParser.FINAL - 129)) | (1 << (ora2epasParser.FIRST - 129)) | (1 << (ora2epasParser.FIRST_VALUE - 129)) | (1 << (ora2epasParser.FLOAT - 129)) | (1 << (ora2epasParser.FOLLOWING - 129)) | (1 << (ora2epasParser.FOLLOWS - 129)) | (1 << (ora2epasParser.FORALL - 129)) | (1 << (ora2epasParser.FORCE - 129)) | (1 << (ora2epasParser.FULL - 129)) | (1 << (ora2epasParser.FUNCTION - 129)) | (1 << (ora2epasParser.GROUPING - 129)) | (1 << (ora2epasParser.HASH - 129)) | (1 << (ora2epasParser.HIDE - 129)) | (1 << (ora2epasParser.HOUR - 129)) | (1 << (ora2epasParser.IGNORE - 129)) | (1 << (ora2epasParser.IMMEDIATE - 129)) | (1 << (ora2epasParser.INCLUDE - 129)) | (1 << (ora2epasParser.INCLUDING - 129)) | (1 << (ora2epasParser.INCREMENT - 129)) | (1 << (ora2epasParser.INDENT - 129)) | (1 << (ora2epasParser.INDEXED - 129)) | (1 << (ora2epasParser.INDICATOR - 129)) | (1 << (ora2epasParser.INDICES - 129)) | (1 << (ora2epasParser.INFINITE - 129)) | (1 << (ora2epasParser.INLINE - 129)) | (1 << (ora2epasParser.INNER - 129)) | (1 << (ora2epasParser.INOUT - 129)) | (1 << (ora2epasParser.INSTANTIABLE - 129)) | (1 << (ora2epasParser.INSTEAD - 129)) | (1 << (ora2epasParser.INT - 129)) | (1 << (ora2epasParser.INTEGER - 129)) | (1 << (ora2epasParser.INTERVAL - 129)) | (1 << (ora2epasParser.INVALIDATE - 129)) | (1 << (ora2epasParser.ISOLATION - 129)) | (1 << (ora2epasParser.ITERATE - 129)) | (1 << (ora2epasParser.JAVA - 129)) | (1 << (ora2epasParser.JOIN - 129)) | (1 << (ora2epasParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (ora2epasParser.LANGUAGE - 193)) | (1 << (ora2epasParser.LAST - 193)) | (1 << (ora2epasParser.LAST_VALUE - 193)) | (1 << (ora2epasParser.LEADING - 193)) | (1 << (ora2epasParser.LEFT - 193)) | (1 << (ora2epasParser.LEVEL - 193)) | (1 << (ora2epasParser.LIBRARY - 193)) | (1 << (ora2epasParser.LIKE2 - 193)) | (1 << (ora2epasParser.LIKE4 - 193)) | (1 << (ora2epasParser.LIKEC - 193)) | (1 << (ora2epasParser.LIMIT - 193)) | (1 << (ora2epasParser.LOCAL - 193)) | (1 << (ora2epasParser.LOCKED - 193)) | (1 << (ora2epasParser.LOG - 193)) | (1 << (ora2epasParser.LOGOFF - 193)) | (1 << (ora2epasParser.LOGON - 193)) | (1 << (ora2epasParser.LONG - 193)) | (1 << (ora2epasParser.LOOP - 193)) | (1 << (ora2epasParser.MAIN - 193)) | (1 << (ora2epasParser.MAP - 193)) | (1 << (ora2epasParser.MATCHED - 193)) | (1 << (ora2epasParser.MAXVALUE - 193)) | (1 << (ora2epasParser.MEASURES - 193)) | (1 << (ora2epasParser.MEMBER - 193)) | (1 << (ora2epasParser.MERGE - 193)) | (1 << (ora2epasParser.MINUTE - 193)) | (1 << (ora2epasParser.MINVALUE - 193)) | (1 << (ora2epasParser.MLSLABEL - 193)) | (1 << (ora2epasParser.MODEL - 193)) | (1 << (ora2epasParser.MODIFY - 193)) | (1 << (ora2epasParser.MONTH - 193)) | (1 << (ora2epasParser.MULTISET - 193)) | (1 << (ora2epasParser.NAME - 193)) | (1 << (ora2epasParser.NAN - 193)) | (1 << (ora2epasParser.NATURAL - 193)) | (1 << (ora2epasParser.NATURALN - 193)) | (1 << (ora2epasParser.NAV - 193)) | (1 << (ora2epasParser.NCHAR - 193)) | (1 << (ora2epasParser.NCHAR_CS - 193)) | (1 << (ora2epasParser.NCLOB - 193)) | (1 << (ora2epasParser.NESTED - 193)) | (1 << (ora2epasParser.NEW - 193)) | (1 << (ora2epasParser.NO - 193)) | (1 << (ora2epasParser.NOAUDIT - 193)) | (1 << (ora2epasParser.NOCOPY - 193)) | (1 << (ora2epasParser.NOCYCLE - 193)) | (1 << (ora2epasParser.NOENTITYESCAPING - 193)) | (1 << (ora2epasParser.NONE - 193)) | (1 << (ora2epasParser.NOSCHEMACHECK - 193)) | (1 << (ora2epasParser.NULL - 193)) | (1 << (ora2epasParser.NULLS - 193)) | (1 << (ora2epasParser.NUMBER - 193)) | (1 << (ora2epasParser.NUMERIC - 193)) | (1 << (ora2epasParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (ora2epasParser.OBJECT - 257)) | (1 << (ora2epasParser.OFF - 257)) | (1 << (ora2epasParser.OID - 257)) | (1 << (ora2epasParser.OLD - 257)) | (1 << (ora2epasParser.ONLY - 257)) | (1 << (ora2epasParser.OPEN - 257)) | (1 << (ora2epasParser.ORADATA - 257)) | (1 << (ora2epasParser.ORDINALITY - 257)) | (1 << (ora2epasParser.OSERROR - 257)) | (1 << (ora2epasParser.OUT - 257)) | (1 << (ora2epasParser.OUTER - 257)) | (1 << (ora2epasParser.OVER - 257)) | (1 << (ora2epasParser.OVERRIDING - 257)) | (1 << (ora2epasParser.PACKAGE - 257)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 257)) | (1 << (ora2epasParser.PARAMETERS - 257)) | (1 << (ora2epasParser.PARENT - 257)) | (1 << (ora2epasParser.PARTITION - 257)) | (1 << (ora2epasParser.PASSING - 257)) | (1 << (ora2epasParser.PATH - 257)) | (1 << (ora2epasParser.PIPELINED - 257)) | (1 << (ora2epasParser.PLAN - 257)) | (1 << (ora2epasParser.PLS_INTEGER - 257)) | (1 << (ora2epasParser.POSITIVE - 257)) | (1 << (ora2epasParser.POSITIVEN - 257)) | (1 << (ora2epasParser.PRAGMA - 257)) | (1 << (ora2epasParser.PRECEDING - 257)) | (1 << (ora2epasParser.PRECISION - 257)) | (1 << (ora2epasParser.PRESENT - 257)) | (1 << (ora2epasParser.PRIOR - 257)) | (1 << (ora2epasParser.RAISE - 257)) | (1 << (ora2epasParser.RANGE - 257)) | (1 << (ora2epasParser.RAW - 257)) | (1 << (ora2epasParser.READ - 257)) | (1 << (ora2epasParser.REAL - 257)) | (1 << (ora2epasParser.RECORD - 257)) | (1 << (ora2epasParser.REF - 257)) | (1 << (ora2epasParser.REFERENCE - 257)) | (1 << (ora2epasParser.REFERENCING - 257)) | (1 << (ora2epasParser.REJECT - 257)) | (1 << (ora2epasParser.RENAME - 257)) | (1 << (ora2epasParser.REPLACE - 257)) | (1 << (ora2epasParser.RESPECT - 257)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 257)) | (1 << (ora2epasParser.RESULT - 257)) | (1 << (ora2epasParser.RETURN - 257)) | (1 << (ora2epasParser.RETURNING - 257)) | (1 << (ora2epasParser.REUSE - 257)) | (1 << (ora2epasParser.REVERSE - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (ora2epasParser.RIGHT - 321)) | (1 << (ora2epasParser.ROLLBACK - 321)) | (1 << (ora2epasParser.ROLLUP - 321)) | (1 << (ora2epasParser.ROW - 321)) | (1 << (ora2epasParser.ROWID - 321)) | (1 << (ora2epasParser.ROWS - 321)) | (1 << (ora2epasParser.RULES - 321)) | (1 << (ora2epasParser.SAMPLE - 321)) | (1 << (ora2epasParser.SAVE - 321)) | (1 << (ora2epasParser.SAVEPOINT - 321)) | (1 << (ora2epasParser.SCHEMA - 321)) | (1 << (ora2epasParser.SCHEMACHECK - 321)) | (1 << (ora2epasParser.SCN - 321)) | (1 << (ora2epasParser.SECOND - 321)) | (1 << (ora2epasParser.SEED - 321)) | (1 << (ora2epasParser.SEGMENT - 321)) | (1 << (ora2epasParser.SELF - 321)) | (1 << (ora2epasParser.SEQUENTIAL - 321)) | (1 << (ora2epasParser.SERIALIZABLE - 321)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 321)) | (1 << (ora2epasParser.SERVERERROR - 321)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 321)) | (1 << (ora2epasParser.SET - 321)) | (1 << (ora2epasParser.SETS - 321)) | (1 << (ora2epasParser.SETTINGS - 321)) | (1 << (ora2epasParser.SHOW - 321)) | (1 << (ora2epasParser.SHUTDOWN - 321)) | (1 << (ora2epasParser.SIBLINGS - 321)) | (1 << (ora2epasParser.SIGNTYPE - 321)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 321)) | (1 << (ora2epasParser.SINGLE - 321)) | (1 << (ora2epasParser.SKIP_ - 321)) | (1 << (ora2epasParser.SMALLINT - 321)) | (1 << (ora2epasParser.SNAPSHOT - 321)) | (1 << (ora2epasParser.SOME - 321)) | (1 << (ora2epasParser.SPECIFICATION - 321)) | (1 << (ora2epasParser.SQLDATA - 321)) | (1 << (ora2epasParser.SQLERROR - 321)) | (1 << (ora2epasParser.STANDALONE - 321)) | (1 << (ora2epasParser.STARTUP - 321)) | (1 << (ora2epasParser.STATEMENT - 321)) | (1 << (ora2epasParser.STATEMENT_ID - 321)) | (1 << (ora2epasParser.STATIC - 321)) | (1 << (ora2epasParser.STATISTICS - 321)) | (1 << (ora2epasParser.STRING - 321)) | (1 << (ora2epasParser.SUBMULTISET - 321)) | (1 << (ora2epasParser.SUBPARTITION - 321)) | (1 << (ora2epasParser.SUBSTITUTABLE - 321)) | (1 << (ora2epasParser.SUBTYPE - 321)) | (1 << (ora2epasParser.SUCCESS - 321)) | (1 << (ora2epasParser.SUSPEND - 321)) | (1 << (ora2epasParser.TIME - 321)) | (1 << (ora2epasParser.TIMESTAMP - 321)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 385)) | (1 << (ora2epasParser.TIMEZONE_ABBR - 385)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 385)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 385)) | (1 << (ora2epasParser.TIMEZONE_REGION - 385)) | (1 << (ora2epasParser.TRAILING - 385)) | (1 << (ora2epasParser.TRANSACTION - 385)) | (1 << (ora2epasParser.TRANSLATE - 385)) | (1 << (ora2epasParser.TREAT - 385)) | (1 << (ora2epasParser.TRIGGER - 385)) | (1 << (ora2epasParser.TRUE - 385)) | (1 << (ora2epasParser.TRUNCATE - 385)) | (1 << (ora2epasParser.TYPE - 385)) | (1 << (ora2epasParser.UNBOUNDED - 385)) | (1 << (ora2epasParser.UNDER - 385)) | (1 << (ora2epasParser.UNIQUE - 385)) | (1 << (ora2epasParser.UNLIMITED - 385)) | (1 << (ora2epasParser.UNTIL - 385)) | (1 << (ora2epasParser.UPDATED - 385)) | (1 << (ora2epasParser.UPSERT - 385)) | (1 << (ora2epasParser.UROWID - 385)) | (1 << (ora2epasParser.USE - 385)) | (1 << (ora2epasParser.VALIDATE - 385)) | (1 << (ora2epasParser.VALUE - 385)) | (1 << (ora2epasParser.VARIABLE - 385)) | (1 << (ora2epasParser.VARRAY - 385)) | (1 << (ora2epasParser.VARYING - 385)) | (1 << (ora2epasParser.VERSION - 385)) | (1 << (ora2epasParser.VERSIONS - 385)) | (1 << (ora2epasParser.WAIT - 385)) | (1 << (ora2epasParser.WARNING - 385)) | (1 << (ora2epasParser.WELLFORMED - 385)) | (1 << (ora2epasParser.WHENEVER - 385)) | (1 << (ora2epasParser.WHILE - 385)) | (1 << (ora2epasParser.WITHIN - 385)) | (1 << (ora2epasParser.WORK - 385)) | (1 << (ora2epasParser.WRITE - 385)) | (1 << (ora2epasParser.XML - 385)) | (1 << (ora2epasParser.XMLAGG - 385)) | (1 << (ora2epasParser.XMLATTRIBUTES - 385)) | (1 << (ora2epasParser.XMLCAST - 385)) | (1 << (ora2epasParser.XMLCOLATTVAL - 385)) | (1 << (ora2epasParser.XMLELEMENT - 385)) | (1 << (ora2epasParser.XMLEXISTS - 385)) | (1 << (ora2epasParser.XMLFOREST - 385)) | (1 << (ora2epasParser.XMLNAMESPACES - 385)) | (1 << (ora2epasParser.XMLPARSE - 385)) | (1 << (ora2epasParser.XMLPI - 385)) | (1 << (ora2epasParser.XMLQUERY - 385)) | (1 << (ora2epasParser.XMLROOT - 385)) | (1 << (ora2epasParser.XMLSERIALIZE - 385)) | (1 << (ora2epasParser.XMLTABLE - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (ora2epasParser.YEAR - 449)) | (1 << (ora2epasParser.YES - 449)) | (1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 449)) | (1 << (ora2epasParser.ZONE - 449)) | (1 << (ora2epasParser.PREDICTION - 449)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 449)) | (1 << (ora2epasParser.PREDICTION_COST - 449)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 449)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 449)) | (1 << (ora2epasParser.PREDICTION_SET - 449)) | (1 << (ora2epasParser.CUME_DIST - 449)) | (1 << (ora2epasParser.DENSE_RANK - 449)) | (1 << (ora2epasParser.LISTAGG - 449)) | (1 << (ora2epasParser.PERCENT_RANK - 449)) | (1 << (ora2epasParser.PERCENTILE_CONT - 449)) | (1 << (ora2epasParser.PERCENTILE_DISC - 449)) | (1 << (ora2epasParser.RANK - 449)) | (1 << (ora2epasParser.AVG - 449)) | (1 << (ora2epasParser.CORR - 449)) | (1 << (ora2epasParser.COVAR_ - 449)) | (1 << (ora2epasParser.DECODE - 449)) | (1 << (ora2epasParser.LAG - 449)) | (1 << (ora2epasParser.LEAD - 449)) | (1 << (ora2epasParser.MAX - 449)) | (1 << (ora2epasParser.MEDIAN - 449)) | (1 << (ora2epasParser.MIN - 449)) | (1 << (ora2epasParser.NTILE - 449)) | (1 << (ora2epasParser.NVL - 449)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 449)) | (1 << (ora2epasParser.REGR_ - 449)) | (1 << (ora2epasParser.ROUND - 449)) | (1 << (ora2epasParser.ROW_NUMBER - 449)) | (1 << (ora2epasParser.SUBSTR - 449)) | (1 << (ora2epasParser.TO_CHAR - 449)) | (1 << (ora2epasParser.TRIM - 449)) | (1 << (ora2epasParser.SUM - 449)) | (1 << (ora2epasParser.STDDEV - 449)) | (1 << (ora2epasParser.VAR_ - 449)) | (1 << (ora2epasParser.VARIANCE - 449)) | (1 << (ora2epasParser.DBMS_ALERT - 449)) | (1 << (ora2epasParser.DBMS_AQADM - 449)) | (1 << (ora2epasParser.DBMS_AQ - 449)) | (1 << (ora2epasParser.DBMS_CRYPTO - 449)) | (1 << (ora2epasParser.DBMS_JOB - 449)) | (1 << (ora2epasParser.DBMS_LOB - 449)) | (1 << (ora2epasParser.DBMS_LOCK - 449)) | (1 << (ora2epasParser.DBMS_MVIEW - 449)) | (1 << (ora2epasParser.DBMS_OUTPUT - 449)) | (1 << (ora2epasParser.DBMS_PIPE - 449)) | (1 << (ora2epasParser.DBMS_PROFILER - 449)) | (1 << (ora2epasParser.DBMS_RANDOM - 449)) | (1 << (ora2epasParser.DBMS_RLS - 449)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 449)) | (1 << (ora2epasParser.DBMS_SESSION - 449)) | (1 << (ora2epasParser.DBMS_SQL - 449)) | (1 << (ora2epasParser.DBMS_UTILITY - 449)) | (1 << (ora2epasParser.EMP_ADMIN - 449)) | (1 << (ora2epasParser.UTL_ENCODE - 449)) | (1 << (ora2epasParser.UTL_FILE - 449)) | (1 << (ora2epasParser.UTL_HTTP - 449)) | (1 << (ora2epasParser.UTL_MAIL - 449)) | (1 << (ora2epasParser.UTL_RAW - 449)) | (1 << (ora2epasParser.UTL_SMTP - 449)) | (1 << (ora2epasParser.UTL_TCP - 449)))) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & ((1 << (ora2epasParser.UTL_URL - 513)) | (1 << (ora2epasParser.NATIONAL_CHAR_STRING_LIT - 513)) | (1 << (ora2epasParser.UNSIGNED_INTEGER - 513)) | (1 << (ora2epasParser.APPROXIMATE_NUM_LIT - 513)) | (1 << (ora2epasParser.CHAR_STRING - 513)) | (1 << (ora2epasParser.DELIMITED_ID - 513)) | (1 << (ora2epasParser.LEFT_PAREN - 513)) | (1 << (ora2epasParser.PLUS_SIGN - 513)) | (1 << (ora2epasParser.MINUS_SIGN - 513)) | (1 << (ora2epasParser.BINDVAR - 513)) | (1 << (ora2epasParser.COLON - 513)) | (1 << (ora2epasParser.INTRODUCER - 513)) | (1 << (ora2epasParser.REGULAR_ID - 513)))) != 0):
                        self.state = 4111
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,502,self._ctx)
                        if la_ == 1:
                            self.state = 4110
                            _la = self._input.LA(1)
                            if not(_la==ora2epasParser.ALL or _la==ora2epasParser.DISTINCT or _la==ora2epasParser.UNIQUE):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 4113
                        self.concatenation()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4118
                self.match(ora2epasParser.RIGHT_PAREN)
                self.state = 4120
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
                if la_ == 1:
                    self.state = 4119
                    self.over_clause()


                pass
            elif token in [ora2epasParser.ROUND]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4122
                self.match(ora2epasParser.ROUND)
                self.state = 4123
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4124
                self.expression()
                self.state = 4127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.COMMA:
                    self.state = 4125
                    self.match(ora2epasParser.COMMA)
                    self.state = 4126
                    self.match(ora2epasParser.UNSIGNED_INTEGER)


                self.state = 4129
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            elif token in [ora2epasParser.AVG]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4131
                self.match(ora2epasParser.AVG)
                self.state = 4132
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4134
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,507,self._ctx)
                if la_ == 1:
                    self.state = 4133
                    _la = self._input.LA(1)
                    if not(_la==ora2epasParser.ALL or _la==ora2epasParser.DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4136
                self.expression()
                self.state = 4137
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            elif token in [ora2epasParser.MAX]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4139
                self.match(ora2epasParser.MAX)
                self.state = 4140
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4142
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,508,self._ctx)
                if la_ == 1:
                    self.state = 4141
                    _la = self._input.LA(1)
                    if not(_la==ora2epasParser.ALL or _la==ora2epasParser.DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4144
                self.expression()
                self.state = 4145
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Other_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def over_clause_keyword(self):
            return self.getTypedRuleContext(ora2epasParser.Over_clause_keywordContext,0)


        def function_argument_analytic(self):
            return self.getTypedRuleContext(ora2epasParser.Function_argument_analyticContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Over_clauseContext,0)


        def regular_id(self):
            return self.getTypedRuleContext(ora2epasParser.Regular_idContext,0)


        def function_argument_modeling(self):
            return self.getTypedRuleContext(ora2epasParser.Function_argument_modelingContext,0)


        def using_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Using_clauseContext,0)


        def COUNT(self):
            return self.getToken(ora2epasParser.COUNT, 0)

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,i)


        def DISTINCT(self):
            return self.getToken(ora2epasParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(ora2epasParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(ora2epasParser.ALL, 0)

        def AS(self):
            return self.getToken(ora2epasParser.AS, 0)

        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def CAST(self):
            return self.getToken(ora2epasParser.CAST, 0)

        def XMLCAST(self):
            return self.getToken(ora2epasParser.XMLCAST, 0)

        def MULTISET(self):
            return self.getToken(ora2epasParser.MULTISET, 0)

        def subquery(self):
            return self.getTypedRuleContext(ora2epasParser.SubqueryContext,0)


        def COALESCE(self):
            return self.getToken(ora2epasParser.COALESCE, 0)

        def table_element(self):
            return self.getTypedRuleContext(ora2epasParser.Table_elementContext,0)


        def COMMA(self):
            return self.getToken(ora2epasParser.COMMA, 0)

        def numeric(self):
            return self.getTypedRuleContext(ora2epasParser.NumericContext,0)


        def quoted_string(self):
            return self.getTypedRuleContext(ora2epasParser.Quoted_stringContext,0)


        def COLLECT(self):
            return self.getToken(ora2epasParser.COLLECT, 0)

        def collect_order_by_part(self):
            return self.getTypedRuleContext(ora2epasParser.Collect_order_by_partContext,0)


        def within_or_over_clause_keyword(self):
            return self.getTypedRuleContext(ora2epasParser.Within_or_over_clause_keywordContext,0)


        def function_argument(self):
            return self.getTypedRuleContext(ora2epasParser.Function_argumentContext,0)


        def within_or_over_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Within_or_over_partContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Within_or_over_partContext,i)


        def cursor_name(self):
            return self.getTypedRuleContext(ora2epasParser.Cursor_nameContext,0)


        def PERCENT_ISOPEN(self):
            return self.getToken(ora2epasParser.PERCENT_ISOPEN, 0)

        def PERCENT_FOUND(self):
            return self.getToken(ora2epasParser.PERCENT_FOUND, 0)

        def PERCENT_NOTFOUND(self):
            return self.getToken(ora2epasParser.PERCENT_NOTFOUND, 0)

        def PERCENT_ROWCOUNT(self):
            return self.getToken(ora2epasParser.PERCENT_ROWCOUNT, 0)

        def DECOMPOSE(self):
            return self.getToken(ora2epasParser.DECOMPOSE, 0)

        def CANONICAL(self):
            return self.getToken(ora2epasParser.CANONICAL, 0)

        def COMPATIBILITY(self):
            return self.getToken(ora2epasParser.COMPATIBILITY, 0)

        def EXTRACT(self):
            return self.getToken(ora2epasParser.EXTRACT, 0)

        def FROM(self):
            return self.getToken(ora2epasParser.FROM, 0)

        def FIRST_VALUE(self):
            return self.getToken(ora2epasParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(ora2epasParser.LAST_VALUE, 0)

        def respect_or_ignore_nulls(self):
            return self.getTypedRuleContext(ora2epasParser.Respect_or_ignore_nullsContext,0)


        def standard_prediction_function_keyword(self):
            return self.getTypedRuleContext(ora2epasParser.Standard_prediction_function_keywordContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ExpressionContext,i)


        def cost_matrix_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Cost_matrix_clauseContext,0)


        def TRANSLATE(self):
            return self.getToken(ora2epasParser.TRANSLATE, 0)

        def USING(self):
            return self.getToken(ora2epasParser.USING, 0)

        def CHAR_CS(self):
            return self.getToken(ora2epasParser.CHAR_CS, 0)

        def NCHAR_CS(self):
            return self.getToken(ora2epasParser.NCHAR_CS, 0)

        def TREAT(self):
            return self.getToken(ora2epasParser.TREAT, 0)

        def REF(self):
            return self.getToken(ora2epasParser.REF, 0)

        def TRIM(self):
            return self.getToken(ora2epasParser.TRIM, 0)

        def LEADING(self):
            return self.getToken(ora2epasParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(ora2epasParser.TRAILING, 0)

        def BOTH(self):
            return self.getToken(ora2epasParser.BOTH, 0)

        def XMLAGG(self):
            return self.getToken(ora2epasParser.XMLAGG, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Order_by_clauseContext,0)


        def general_element_part(self):
            return self.getTypedRuleContext(ora2epasParser.General_element_partContext,0)


        def xml_multiuse_expression_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Xml_multiuse_expression_elementContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Xml_multiuse_expression_elementContext,i)


        def XMLCOLATTVAL(self):
            return self.getToken(ora2epasParser.XMLCOLATTVAL, 0)

        def XMLFOREST(self):
            return self.getToken(ora2epasParser.XMLFOREST, 0)

        def XMLELEMENT(self):
            return self.getToken(ora2epasParser.XMLELEMENT, 0)

        def xml_attributes_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Xml_attributes_clauseContext,0)


        def ENTITYESCAPING(self):
            return self.getToken(ora2epasParser.ENTITYESCAPING, 0)

        def NOENTITYESCAPING(self):
            return self.getToken(ora2epasParser.NOENTITYESCAPING, 0)

        def NAME(self):
            return self.getToken(ora2epasParser.NAME, 0)

        def EVALNAME(self):
            return self.getToken(ora2epasParser.EVALNAME, 0)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_aliasContext,i)


        def XMLEXISTS(self):
            return self.getToken(ora2epasParser.XMLEXISTS, 0)

        def xml_passing_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Xml_passing_clauseContext,0)


        def XMLPARSE(self):
            return self.getToken(ora2epasParser.XMLPARSE, 0)

        def DOCUMENT(self):
            return self.getToken(ora2epasParser.DOCUMENT, 0)

        def CONTENT(self):
            return self.getToken(ora2epasParser.CONTENT, 0)

        def WELLFORMED(self):
            return self.getToken(ora2epasParser.WELLFORMED, 0)

        def XMLPI(self):
            return self.getToken(ora2epasParser.XMLPI, 0)

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def XMLQUERY(self):
            return self.getToken(ora2epasParser.XMLQUERY, 0)

        def RETURNING(self):
            return self.getToken(ora2epasParser.RETURNING, 0)

        def NULL(self):
            return self.getToken(ora2epasParser.NULL, 0)

        def ON(self):
            return self.getToken(ora2epasParser.ON, 0)

        def EMPTY(self):
            return self.getToken(ora2epasParser.EMPTY, 0)

        def XMLROOT(self):
            return self.getToken(ora2epasParser.XMLROOT, 0)

        def xmlroot_param_version_part(self):
            return self.getTypedRuleContext(ora2epasParser.Xmlroot_param_version_partContext,0)


        def xmlroot_param_standalone_part(self):
            return self.getTypedRuleContext(ora2epasParser.Xmlroot_param_standalone_partContext,0)


        def XMLSERIALIZE(self):
            return self.getToken(ora2epasParser.XMLSERIALIZE, 0)

        def xmlserialize_param_enconding_part(self):
            return self.getTypedRuleContext(ora2epasParser.Xmlserialize_param_enconding_partContext,0)


        def xmlserialize_param_version_part(self):
            return self.getTypedRuleContext(ora2epasParser.Xmlserialize_param_version_partContext,0)


        def xmlserialize_param_ident_part(self):
            return self.getTypedRuleContext(ora2epasParser.Xmlserialize_param_ident_partContext,0)


        def DEFAULTS(self):
            return self.getToken(ora2epasParser.DEFAULTS, 0)

        def HIDE(self):
            return self.getToken(ora2epasParser.HIDE, 0)

        def SHOW(self):
            return self.getToken(ora2epasParser.SHOW, 0)

        def XMLTABLE(self):
            return self.getToken(ora2epasParser.XMLTABLE, 0)

        def xml_namespaces_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Xml_namespaces_clauseContext,0)


        def COLUMNS(self):
            return self.getToken(ora2epasParser.COLUMNS, 0)

        def xml_table_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Xml_table_columnContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Xml_table_columnContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_other_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOther_function" ):
                listener.enterOther_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOther_function" ):
                listener.exitOther_function(self)




    def other_function(self):

        localctx = ora2epasParser.Other_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_other_function)
        self._la = 0 # Token type
        try:
            self.state = 4471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,564,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4149
                self.over_clause_keyword()
                self.state = 4150
                self.function_argument_analytic()
                self.state = 4152
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,510,self._ctx)
                if la_ == 1:
                    self.state = 4151
                    self.over_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4154
                self.regular_id()
                self.state = 4155
                self.function_argument_modeling()
                self.state = 4157
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,511,self._ctx)
                if la_ == 1:
                    self.state = 4156
                    self.using_clause()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4159
                self.match(ora2epasParser.COUNT)
                self.state = 4160
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4166
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ora2epasParser.ASTERISK]:
                    self.state = 4161
                    self.match(ora2epasParser.ASTERISK)
                    pass
                elif token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ALL, ora2epasParser.ANALYZE, ora2epasParser.ANY, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CASE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COALESCE, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONNECT_BY_ROOT, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DATE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DISTINCT, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXISTS, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FALSE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULL, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.PRIOR, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUE, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNIQUE, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.DECODE, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.NVL, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROUND, ora2epasParser.ROW_NUMBER, ora2epasParser.SUBSTR, ora2epasParser.TO_CHAR, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.NATIONAL_CHAR_STRING_LIT, ora2epasParser.UNSIGNED_INTEGER, ora2epasParser.APPROXIMATE_NUM_LIT, ora2epasParser.CHAR_STRING, ora2epasParser.DELIMITED_ID, ora2epasParser.LEFT_PAREN, ora2epasParser.PLUS_SIGN, ora2epasParser.MINUS_SIGN, ora2epasParser.BINDVAR, ora2epasParser.COLON, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                    self.state = 4163
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,512,self._ctx)
                    if la_ == 1:
                        self.state = 4162
                        _la = self._input.LA(1)
                        if not(_la==ora2epasParser.ALL or _la==ora2epasParser.DISTINCT or _la==ora2epasParser.UNIQUE):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 4165
                    self.concatenation()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4168
                self.match(ora2epasParser.RIGHT_PAREN)
                self.state = 4170
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,514,self._ctx)
                if la_ == 1:
                    self.state = 4169
                    self.over_clause()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4172
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.CAST or _la==ora2epasParser.XMLCAST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4173
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4180
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,515,self._ctx)
                if la_ == 1:
                    self.state = 4174
                    self.match(ora2epasParser.MULTISET)
                    self.state = 4175
                    self.match(ora2epasParser.LEFT_PAREN)
                    self.state = 4176
                    self.subquery()
                    self.state = 4177
                    self.match(ora2epasParser.RIGHT_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 4179
                    self.concatenation()
                    pass


                self.state = 4182
                self.match(ora2epasParser.AS)
                self.state = 4183
                self.type_spec()
                self.state = 4184
                self.match(ora2epasParser.RIGHT_PAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4186
                self.match(ora2epasParser.COALESCE)
                self.state = 4187
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4188
                self.table_element()
                self.state = 4194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.COMMA:
                    self.state = 4189
                    self.match(ora2epasParser.COMMA)
                    self.state = 4192
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ora2epasParser.UNSIGNED_INTEGER, ora2epasParser.APPROXIMATE_NUM_LIT]:
                        self.state = 4190
                        self.numeric()
                        pass
                    elif token in [ora2epasParser.NATIONAL_CHAR_STRING_LIT, ora2epasParser.CHAR_STRING]:
                        self.state = 4191
                        self.quoted_string()
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4196
                self.match(ora2epasParser.RIGHT_PAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4198
                self.match(ora2epasParser.COLLECT)
                self.state = 4199
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4201
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,518,self._ctx)
                if la_ == 1:
                    self.state = 4200
                    _la = self._input.LA(1)
                    if not(_la==ora2epasParser.DISTINCT or _la==ora2epasParser.UNIQUE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4203
                self.concatenation()
                self.state = 4205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.ORDER:
                    self.state = 4204
                    self.collect_order_by_part()


                self.state = 4207
                self.match(ora2epasParser.RIGHT_PAREN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4209
                self.within_or_over_clause_keyword()
                self.state = 4210
                self.function_argument()
                self.state = 4212 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4211
                        self.within_or_over_part()

                    else:
                        raise NoViableAltException(self)
                    self.state = 4214 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,520,self._ctx)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4216
                self.cursor_name()
                self.state = 4217
                _la = self._input.LA(1)
                if not(((((_la - 282)) & ~0x3f) == 0 and ((1 << (_la - 282)) & ((1 << (ora2epasParser.PERCENT_ISOPEN - 282)) | (1 << (ora2epasParser.PERCENT_FOUND - 282)) | (1 << (ora2epasParser.PERCENT_NOTFOUND - 282)) | (1 << (ora2epasParser.PERCENT_ROWCOUNT - 282)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4219
                self.match(ora2epasParser.DECOMPOSE)
                self.state = 4220
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4221
                self.concatenation()
                self.state = 4223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.CANONICAL or _la==ora2epasParser.COMPATIBILITY:
                    self.state = 4222
                    _la = self._input.LA(1)
                    if not(_la==ora2epasParser.CANONICAL or _la==ora2epasParser.COMPATIBILITY):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4225
                self.match(ora2epasParser.RIGHT_PAREN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4227
                self.match(ora2epasParser.EXTRACT)
                self.state = 4228
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4229
                self.regular_id()
                self.state = 4230
                self.match(ora2epasParser.FROM)
                self.state = 4231
                self.concatenation()
                self.state = 4232
                self.match(ora2epasParser.RIGHT_PAREN)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4234
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.FIRST_VALUE or _la==ora2epasParser.LAST_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4235
                self.function_argument_analytic()
                self.state = 4237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.IGNORE or _la==ora2epasParser.RESPECT:
                    self.state = 4236
                    self.respect_or_ignore_nulls()


                self.state = 4239
                self.over_clause()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4241
                self.standard_prediction_function_keyword()
                self.state = 4242
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4243
                self.expression()
                self.state = 4248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 4244
                    self.match(ora2epasParser.COMMA)
                    self.state = 4245
                    self.expression()
                    self.state = 4250
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.COST:
                    self.state = 4251
                    self.cost_matrix_clause()


                self.state = 4255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.USING:
                    self.state = 4254
                    self.using_clause()


                self.state = 4257
                self.match(ora2epasParser.RIGHT_PAREN)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4259
                self.match(ora2epasParser.TRANSLATE)
                self.state = 4260
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4261
                self.expression()
                self.state = 4264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.USING:
                    self.state = 4262
                    self.match(ora2epasParser.USING)
                    self.state = 4263
                    _la = self._input.LA(1)
                    if not(_la==ora2epasParser.CHAR_CS or _la==ora2epasParser.NCHAR_CS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 4266
                    self.match(ora2epasParser.COMMA)
                    self.state = 4267
                    self.expression()
                    self.state = 4272
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4273
                self.match(ora2epasParser.RIGHT_PAREN)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4275
                self.match(ora2epasParser.TREAT)
                self.state = 4276
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4277
                self.expression()
                self.state = 4278
                self.match(ora2epasParser.AS)
                self.state = 4280
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,528,self._ctx)
                if la_ == 1:
                    self.state = 4279
                    self.match(ora2epasParser.REF)


                self.state = 4282
                self.type_spec()
                self.state = 4283
                self.match(ora2epasParser.RIGHT_PAREN)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4285
                self.match(ora2epasParser.TRIM)
                self.state = 4286
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4294
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,531,self._ctx)
                if la_ == 1:
                    self.state = 4288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ora2epasParser.BOTH or _la==ora2epasParser.LEADING or _la==ora2epasParser.TRAILING:
                        self.state = 4287
                        _la = self._input.LA(1)
                        if not(_la==ora2epasParser.BOTH or _la==ora2epasParser.LEADING or _la==ora2epasParser.TRAILING):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 4291
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ora2epasParser.NATIONAL_CHAR_STRING_LIT or _la==ora2epasParser.CHAR_STRING:
                        self.state = 4290
                        self.quoted_string()


                    self.state = 4293
                    self.match(ora2epasParser.FROM)


                self.state = 4296
                self.concatenation()
                self.state = 4297
                self.match(ora2epasParser.RIGHT_PAREN)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4299
                self.match(ora2epasParser.XMLAGG)
                self.state = 4300
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4301
                self.expression()
                self.state = 4303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.ORDER:
                    self.state = 4302
                    self.order_by_clause()


                self.state = 4305
                self.match(ora2epasParser.RIGHT_PAREN)
                self.state = 4308
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,533,self._ctx)
                if la_ == 1:
                    self.state = 4306
                    self.match(ora2epasParser.PERIOD)
                    self.state = 4307
                    self.general_element_part()


                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 4310
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.XMLCOLATTVAL or _la==ora2epasParser.XMLFOREST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4311
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4312
                self.xml_multiuse_expression_element()
                self.state = 4317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 4313
                    self.match(ora2epasParser.COMMA)
                    self.state = 4314
                    self.xml_multiuse_expression_element()
                    self.state = 4319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4320
                self.match(ora2epasParser.RIGHT_PAREN)
                self.state = 4323
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,535,self._ctx)
                if la_ == 1:
                    self.state = 4321
                    self.match(ora2epasParser.PERIOD)
                    self.state = 4322
                    self.general_element_part()


                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 4325
                self.match(ora2epasParser.XMLELEMENT)
                self.state = 4326
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4328
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,536,self._ctx)
                if la_ == 1:
                    self.state = 4327
                    _la = self._input.LA(1)
                    if not(_la==ora2epasParser.ENTITYESCAPING or _la==ora2epasParser.NOENTITYESCAPING):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4331
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,537,self._ctx)
                if la_ == 1:
                    self.state = 4330
                    _la = self._input.LA(1)
                    if not(_la==ora2epasParser.EVALNAME or _la==ora2epasParser.NAME):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4333
                self.expression()
                self.state = 4336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,538,self._ctx)
                if la_ == 1:
                    self.state = 4334
                    self.match(ora2epasParser.COMMA)
                    self.state = 4335
                    self.xml_attributes_clause()


                self.state = 4345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 4338
                    self.match(ora2epasParser.COMMA)
                    self.state = 4339
                    self.expression()
                    self.state = 4341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.AS) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)) | (1 << (ora2epasParser.NATIONAL_CHAR_STRING_LIT - 451)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (ora2epasParser.CHAR_STRING - 521)) | (1 << (ora2epasParser.DELIMITED_ID - 521)) | (1 << (ora2epasParser.INTRODUCER - 521)) | (1 << (ora2epasParser.REGULAR_ID - 521)))) != 0):
                        self.state = 4340
                        self.column_alias()


                    self.state = 4347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4348
                self.match(ora2epasParser.RIGHT_PAREN)
                self.state = 4351
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,541,self._ctx)
                if la_ == 1:
                    self.state = 4349
                    self.match(ora2epasParser.PERIOD)
                    self.state = 4350
                    self.general_element_part()


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 4353
                self.match(ora2epasParser.XMLEXISTS)
                self.state = 4354
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4355
                self.expression()
                self.state = 4357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.PASSING:
                    self.state = 4356
                    self.xml_passing_clause()


                self.state = 4359
                self.match(ora2epasParser.RIGHT_PAREN)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 4361
                self.match(ora2epasParser.XMLPARSE)
                self.state = 4362
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4363
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.CONTENT or _la==ora2epasParser.DOCUMENT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4364
                self.concatenation()
                self.state = 4366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.WELLFORMED:
                    self.state = 4365
                    self.match(ora2epasParser.WELLFORMED)


                self.state = 4368
                self.match(ora2epasParser.RIGHT_PAREN)
                self.state = 4371
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,544,self._ctx)
                if la_ == 1:
                    self.state = 4369
                    self.match(ora2epasParser.PERIOD)
                    self.state = 4370
                    self.general_element_part()


                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 4373
                self.match(ora2epasParser.XMLPI)
                self.state = 4374
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4379
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ora2epasParser.NAME]:
                    self.state = 4375
                    self.match(ora2epasParser.NAME)
                    self.state = 4376
                    self.identifier()
                    pass
                elif token in [ora2epasParser.EVALNAME]:
                    self.state = 4377
                    self.match(ora2epasParser.EVALNAME)
                    self.state = 4378
                    self.concatenation()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.COMMA:
                    self.state = 4381
                    self.match(ora2epasParser.COMMA)
                    self.state = 4382
                    self.concatenation()


                self.state = 4385
                self.match(ora2epasParser.RIGHT_PAREN)
                self.state = 4388
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,547,self._ctx)
                if la_ == 1:
                    self.state = 4386
                    self.match(ora2epasParser.PERIOD)
                    self.state = 4387
                    self.general_element_part()


                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 4390
                self.match(ora2epasParser.XMLQUERY)
                self.state = 4391
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4392
                self.concatenation()
                self.state = 4394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.PASSING:
                    self.state = 4393
                    self.xml_passing_clause()


                self.state = 4396
                self.match(ora2epasParser.RETURNING)
                self.state = 4397
                self.match(ora2epasParser.CONTENT)
                self.state = 4401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.NULL:
                    self.state = 4398
                    self.match(ora2epasParser.NULL)
                    self.state = 4399
                    self.match(ora2epasParser.ON)
                    self.state = 4400
                    self.match(ora2epasParser.EMPTY)


                self.state = 4403
                self.match(ora2epasParser.RIGHT_PAREN)
                self.state = 4406
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,550,self._ctx)
                if la_ == 1:
                    self.state = 4404
                    self.match(ora2epasParser.PERIOD)
                    self.state = 4405
                    self.general_element_part()


                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 4408
                self.match(ora2epasParser.XMLROOT)
                self.state = 4409
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4410
                self.concatenation()
                self.state = 4413
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,551,self._ctx)
                if la_ == 1:
                    self.state = 4411
                    self.match(ora2epasParser.COMMA)
                    self.state = 4412
                    self.xmlroot_param_version_part()


                self.state = 4417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.COMMA:
                    self.state = 4415
                    self.match(ora2epasParser.COMMA)
                    self.state = 4416
                    self.xmlroot_param_standalone_part()


                self.state = 4419
                self.match(ora2epasParser.RIGHT_PAREN)
                self.state = 4422
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,553,self._ctx)
                if la_ == 1:
                    self.state = 4420
                    self.match(ora2epasParser.PERIOD)
                    self.state = 4421
                    self.general_element_part()


                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 4424
                self.match(ora2epasParser.XMLSERIALIZE)
                self.state = 4425
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4426
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.CONTENT or _la==ora2epasParser.DOCUMENT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4427
                self.concatenation()
                self.state = 4430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.AS:
                    self.state = 4428
                    self.match(ora2epasParser.AS)
                    self.state = 4429
                    self.type_spec()


                self.state = 4433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.ENCODING:
                    self.state = 4432
                    self.xmlserialize_param_enconding_part()


                self.state = 4436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.VERSION:
                    self.state = 4435
                    self.xmlserialize_param_version_part()


                self.state = 4439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.INDENT or _la==ora2epasParser.NO:
                    self.state = 4438
                    self.xmlserialize_param_ident_part()


                self.state = 4443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.HIDE or _la==ora2epasParser.SHOW:
                    self.state = 4441
                    _la = self._input.LA(1)
                    if not(_la==ora2epasParser.HIDE or _la==ora2epasParser.SHOW):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4442
                    self.match(ora2epasParser.DEFAULTS)


                self.state = 4445
                self.match(ora2epasParser.RIGHT_PAREN)
                self.state = 4448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,559,self._ctx)
                if la_ == 1:
                    self.state = 4446
                    self.match(ora2epasParser.PERIOD)
                    self.state = 4447
                    self.general_element_part()


                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 4450
                self.match(ora2epasParser.XMLTABLE)
                self.state = 4451
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4453
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,560,self._ctx)
                if la_ == 1:
                    self.state = 4452
                    self.xml_namespaces_clause()


                self.state = 4455
                self.concatenation()
                self.state = 4457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.PASSING:
                    self.state = 4456
                    self.xml_passing_clause()


                self.state = 4464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.COLUMNS:
                    self.state = 4459
                    self.match(ora2epasParser.COLUMNS)
                    self.state = 4460
                    self.xml_table_column()

                    self.state = 4461
                    self.match(ora2epasParser.COMMA)
                    self.state = 4462
                    self.xml_table_column()


                self.state = 4466
                self.match(ora2epasParser.RIGHT_PAREN)
                self.state = 4469
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,563,self._ctx)
                if la_ == 1:
                    self.state = 4467
                    self.match(ora2epasParser.PERIOD)
                    self.state = 4468
                    self.general_element_part()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Over_clause_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(ora2epasParser.AVG, 0)

        def CORR(self):
            return self.getToken(ora2epasParser.CORR, 0)

        def LAG(self):
            return self.getToken(ora2epasParser.LAG, 0)

        def LEAD(self):
            return self.getToken(ora2epasParser.LEAD, 0)

        def MAX(self):
            return self.getToken(ora2epasParser.MAX, 0)

        def MEDIAN(self):
            return self.getToken(ora2epasParser.MEDIAN, 0)

        def MIN(self):
            return self.getToken(ora2epasParser.MIN, 0)

        def NTILE(self):
            return self.getToken(ora2epasParser.NTILE, 0)

        def RATIO_TO_REPORT(self):
            return self.getToken(ora2epasParser.RATIO_TO_REPORT, 0)

        def ROW_NUMBER(self):
            return self.getToken(ora2epasParser.ROW_NUMBER, 0)

        def SUM(self):
            return self.getToken(ora2epasParser.SUM, 0)

        def VARIANCE(self):
            return self.getToken(ora2epasParser.VARIANCE, 0)

        def REGR_(self):
            return self.getToken(ora2epasParser.REGR_, 0)

        def STDDEV(self):
            return self.getToken(ora2epasParser.STDDEV, 0)

        def VAR_(self):
            return self.getToken(ora2epasParser.VAR_, 0)

        def COVAR_(self):
            return self.getToken(ora2epasParser.COVAR_, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_over_clause_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause_keyword" ):
                listener.enterOver_clause_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause_keyword" ):
                listener.exitOver_clause_keyword(self)




    def over_clause_keyword(self):

        localctx = ora2epasParser.Over_clause_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_over_clause_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4473
            _la = self._input.LA(1)
            if not(((((_la - 466)) & ~0x3f) == 0 and ((1 << (_la - 466)) & ((1 << (ora2epasParser.AVG - 466)) | (1 << (ora2epasParser.CORR - 466)) | (1 << (ora2epasParser.COVAR_ - 466)) | (1 << (ora2epasParser.LAG - 466)) | (1 << (ora2epasParser.LEAD - 466)) | (1 << (ora2epasParser.MAX - 466)) | (1 << (ora2epasParser.MEDIAN - 466)) | (1 << (ora2epasParser.MIN - 466)) | (1 << (ora2epasParser.NTILE - 466)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 466)) | (1 << (ora2epasParser.REGR_ - 466)) | (1 << (ora2epasParser.ROW_NUMBER - 466)) | (1 << (ora2epasParser.SUM - 466)) | (1 << (ora2epasParser.STDDEV - 466)) | (1 << (ora2epasParser.VAR_ - 466)) | (1 << (ora2epasParser.VARIANCE - 466)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Within_or_over_clause_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CUME_DIST(self):
            return self.getToken(ora2epasParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(ora2epasParser.DENSE_RANK, 0)

        def LISTAGG(self):
            return self.getToken(ora2epasParser.LISTAGG, 0)

        def PERCENT_RANK(self):
            return self.getToken(ora2epasParser.PERCENT_RANK, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(ora2epasParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(ora2epasParser.PERCENTILE_DISC, 0)

        def RANK(self):
            return self.getToken(ora2epasParser.RANK, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_within_or_over_clause_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithin_or_over_clause_keyword" ):
                listener.enterWithin_or_over_clause_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithin_or_over_clause_keyword" ):
                listener.exitWithin_or_over_clause_keyword(self)




    def within_or_over_clause_keyword(self):

        localctx = ora2epasParser.Within_or_over_clause_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_within_or_over_clause_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4475
            _la = self._input.LA(1)
            if not(((((_la - 459)) & ~0x3f) == 0 and ((1 << (_la - 459)) & ((1 << (ora2epasParser.CUME_DIST - 459)) | (1 << (ora2epasParser.DENSE_RANK - 459)) | (1 << (ora2epasParser.LISTAGG - 459)) | (1 << (ora2epasParser.PERCENT_RANK - 459)) | (1 << (ora2epasParser.PERCENTILE_CONT - 459)) | (1 << (ora2epasParser.PERCENTILE_DISC - 459)) | (1 << (ora2epasParser.RANK - 459)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Standard_prediction_function_keywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREDICTION(self):
            return self.getToken(ora2epasParser.PREDICTION, 0)

        def PREDICTION_BOUNDS(self):
            return self.getToken(ora2epasParser.PREDICTION_BOUNDS, 0)

        def PREDICTION_COST(self):
            return self.getToken(ora2epasParser.PREDICTION_COST, 0)

        def PREDICTION_DETAILS(self):
            return self.getToken(ora2epasParser.PREDICTION_DETAILS, 0)

        def PREDICTION_PROBABILITY(self):
            return self.getToken(ora2epasParser.PREDICTION_PROBABILITY, 0)

        def PREDICTION_SET(self):
            return self.getToken(ora2epasParser.PREDICTION_SET, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_standard_prediction_function_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandard_prediction_function_keyword" ):
                listener.enterStandard_prediction_function_keyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandard_prediction_function_keyword" ):
                listener.exitStandard_prediction_function_keyword(self)




    def standard_prediction_function_keyword(self):

        localctx = ora2epasParser.Standard_prediction_function_keywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_standard_prediction_function_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4477
            _la = self._input.LA(1)
            if not(((((_la - 453)) & ~0x3f) == 0 and ((1 << (_la - 453)) & ((1 << (ora2epasParser.PREDICTION - 453)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 453)) | (1 << (ora2epasParser.PREDICTION_COST - 453)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 453)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 453)) | (1 << (ora2epasParser.PREDICTION_SET - 453)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Over_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(ora2epasParser.OVER, 0)

        def query_partition_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Query_partition_clauseContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Order_by_clauseContext,0)


        def windowing_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Windowing_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)




    def over_clause(self):

        localctx = ora2epasParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4479
            self.match(ora2epasParser.OVER)
            self.state = 4480
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 4482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.PARTITION:
                self.state = 4481
                self.query_partition_clause()


            self.state = 4488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.ORDER:
                self.state = 4484
                self.order_by_clause()
                self.state = 4486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.RANGE or _la==ora2epasParser.ROWS:
                    self.state = 4485
                    self.windowing_clause()




            self.state = 4490
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Windowing_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowing_type(self):
            return self.getTypedRuleContext(ora2epasParser.Windowing_typeContext,0)


        def BETWEEN(self):
            return self.getToken(ora2epasParser.BETWEEN, 0)

        def windowing_elements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Windowing_elementsContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Windowing_elementsContext,i)


        def AND(self):
            return self.getToken(ora2epasParser.AND, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_windowing_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowing_clause" ):
                listener.enterWindowing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowing_clause" ):
                listener.exitWindowing_clause(self)




    def windowing_clause(self):

        localctx = ora2epasParser.Windowing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_windowing_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4492
            self.windowing_type()
            self.state = 4499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.BETWEEN]:
                self.state = 4493
                self.match(ora2epasParser.BETWEEN)
                self.state = 4494
                self.windowing_elements()
                self.state = 4495
                self.match(ora2epasParser.AND)
                self.state = 4496
                self.windowing_elements()
                pass
            elif token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ALL, ora2epasParser.ANALYZE, ora2epasParser.ANY, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CASE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COALESCE, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONNECT_BY_ROOT, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DATE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DISTINCT, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXISTS, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FALSE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULL, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.PRIOR, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUE, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.DECODE, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.NVL, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROUND, ora2epasParser.ROW_NUMBER, ora2epasParser.SUBSTR, ora2epasParser.TO_CHAR, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.NATIONAL_CHAR_STRING_LIT, ora2epasParser.UNSIGNED_INTEGER, ora2epasParser.APPROXIMATE_NUM_LIT, ora2epasParser.CHAR_STRING, ora2epasParser.DELIMITED_ID, ora2epasParser.LEFT_PAREN, ora2epasParser.PLUS_SIGN, ora2epasParser.MINUS_SIGN, ora2epasParser.BINDVAR, ora2epasParser.COLON, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.state = 4498
                self.windowing_elements()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Windowing_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS(self):
            return self.getToken(ora2epasParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(ora2epasParser.RANGE, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_windowing_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowing_type" ):
                listener.enterWindowing_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowing_type" ):
                listener.exitWindowing_type(self)




    def windowing_type(self):

        localctx = ora2epasParser.Windowing_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_windowing_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4501
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.RANGE or _la==ora2epasParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Windowing_elementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(ora2epasParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(ora2epasParser.PRECEDING, 0)

        def CURRENT(self):
            return self.getToken(ora2epasParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(ora2epasParser.ROW, 0)

        def concatenation(self):
            return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,0)


        def FOLLOWING(self):
            return self.getToken(ora2epasParser.FOLLOWING, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_windowing_elements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowing_elements" ):
                listener.enterWindowing_elements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowing_elements" ):
                listener.exitWindowing_elements(self)




    def windowing_elements(self):

        localctx = ora2epasParser.Windowing_elementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_windowing_elements)
        self._la = 0 # Token type
        try:
            self.state = 4510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,569,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4503
                self.match(ora2epasParser.UNBOUNDED)
                self.state = 4504
                self.match(ora2epasParser.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4505
                self.match(ora2epasParser.CURRENT)
                self.state = 4506
                self.match(ora2epasParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4507
                self.concatenation()
                self.state = 4508
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.FOLLOWING or _la==ora2epasParser.PRECEDING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(ora2epasParser.USING, 0)

        def using_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Using_elementContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Using_elementContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_clause" ):
                listener.enterUsing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_clause" ):
                listener.exitUsing_clause(self)




    def using_clause(self):

        localctx = ora2epasParser.Using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_using_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4512
            self.match(ora2epasParser.USING)
            self.state = 4522
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.ASTERISK]:
                self.state = 4513
                self.match(ora2epasParser.ASTERISK)
                pass
            elif token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ALL, ora2epasParser.ANALYZE, ora2epasParser.ANY, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CASE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COALESCE, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONNECT_BY_ROOT, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DATE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DISTINCT, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXISTS, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FALSE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.IN, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NOT, ora2epasParser.NULL, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.PRIOR, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUE, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.DECODE, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.NVL, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROUND, ora2epasParser.ROW_NUMBER, ora2epasParser.SUBSTR, ora2epasParser.TO_CHAR, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.NATIONAL_CHAR_STRING_LIT, ora2epasParser.UNSIGNED_INTEGER, ora2epasParser.APPROXIMATE_NUM_LIT, ora2epasParser.CHAR_STRING, ora2epasParser.DELIMITED_ID, ora2epasParser.LEFT_PAREN, ora2epasParser.PLUS_SIGN, ora2epasParser.MINUS_SIGN, ora2epasParser.BINDVAR, ora2epasParser.COLON, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.state = 4514
                self.using_element()
                self.state = 4519
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,570,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4515
                        self.match(ora2epasParser.COMMA)
                        self.state = 4516
                        self.using_element() 
                    self.state = 4521
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,570,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Using_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list_elements(self):
            return self.getTypedRuleContext(ora2epasParser.Select_list_elementsContext,0)


        def IN(self):
            return self.getToken(ora2epasParser.IN, 0)

        def OUT(self):
            return self.getToken(ora2epasParser.OUT, 0)

        def column_alias(self):
            return self.getTypedRuleContext(ora2epasParser.Column_aliasContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_using_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_element" ):
                listener.enterUsing_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_element" ):
                listener.exitUsing_element(self)




    def using_element(self):

        localctx = ora2epasParser.Using_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_using_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,573,self._ctx)
            if la_ == 1:
                self.state = 4524
                self.match(ora2epasParser.IN)
                self.state = 4526
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,572,self._ctx)
                if la_ == 1:
                    self.state = 4525
                    self.match(ora2epasParser.OUT)



            elif la_ == 2:
                self.state = 4528
                self.match(ora2epasParser.OUT)


            self.state = 4531
            self.select_list_elements()
            self.state = 4533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,574,self._ctx)
            if la_ == 1:
                self.state = 4532
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collect_order_by_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(ora2epasParser.ORDER, 0)

        def BY(self):
            return self.getToken(ora2epasParser.BY, 0)

        def concatenation(self):
            return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_collect_order_by_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollect_order_by_part" ):
                listener.enterCollect_order_by_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollect_order_by_part" ):
                listener.exitCollect_order_by_part(self)




    def collect_order_by_part(self):

        localctx = ora2epasParser.Collect_order_by_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_collect_order_by_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4535
            self.match(ora2epasParser.ORDER)
            self.state = 4536
            self.match(ora2epasParser.BY)
            self.state = 4537
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Within_or_over_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITHIN(self):
            return self.getToken(ora2epasParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(ora2epasParser.GROUP, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Order_by_clauseContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Over_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_within_or_over_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithin_or_over_part" ):
                listener.enterWithin_or_over_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithin_or_over_part" ):
                listener.exitWithin_or_over_part(self)




    def within_or_over_part(self):

        localctx = ora2epasParser.Within_or_over_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_within_or_over_part)
        try:
            self.state = 4546
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.WITHIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4539
                self.match(ora2epasParser.WITHIN)
                self.state = 4540
                self.match(ora2epasParser.GROUP)
                self.state = 4541
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4542
                self.order_by_clause()
                self.state = 4543
                self.match(ora2epasParser.RIGHT_PAREN)
                pass
            elif token in [ora2epasParser.OVER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4545
                self.over_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cost_matrix_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COST(self):
            return self.getToken(ora2epasParser.COST, 0)

        def MODEL(self):
            return self.getToken(ora2epasParser.MODEL, 0)

        def cost_class_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Cost_class_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Cost_class_nameContext,i)


        def VALUES(self):
            return self.getToken(ora2epasParser.VALUES, 0)

        def expression_list(self):
            return self.getTypedRuleContext(ora2epasParser.Expression_listContext,0)


        def AUTO(self):
            return self.getToken(ora2epasParser.AUTO, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_cost_matrix_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCost_matrix_clause" ):
                listener.enterCost_matrix_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCost_matrix_clause" ):
                listener.exitCost_matrix_clause(self)




    def cost_matrix_clause(self):

        localctx = ora2epasParser.Cost_matrix_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_cost_matrix_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4548
            self.match(ora2epasParser.COST)
            self.state = 4566
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.MODEL]:
                self.state = 4549
                self.match(ora2epasParser.MODEL)
                self.state = 4551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.AUTO:
                    self.state = 4550
                    self.match(ora2epasParser.AUTO)


                pass
            elif token in [ora2epasParser.LEFT_PAREN]:
                self.state = 4553
                self.match(ora2epasParser.LEFT_PAREN)
                self.state = 4554
                self.cost_class_name()
                self.state = 4559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 4555
                    self.match(ora2epasParser.COMMA)
                    self.state = 4556
                    self.cost_class_name()
                    self.state = 4561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4562
                self.match(ora2epasParser.RIGHT_PAREN)
                self.state = 4563
                self.match(ora2epasParser.VALUES)
                self.state = 4564
                self.expression_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_passing_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSING(self):
            return self.getToken(ora2epasParser.PASSING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ExpressionContext,i)


        def BY(self):
            return self.getToken(ora2epasParser.BY, 0)

        def VALUE(self):
            return self.getToken(ora2epasParser.VALUE, 0)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_aliasContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_xml_passing_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_passing_clause" ):
                listener.enterXml_passing_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_passing_clause" ):
                listener.exitXml_passing_clause(self)




    def xml_passing_clause(self):

        localctx = ora2epasParser.Xml_passing_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_xml_passing_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4568
            self.match(ora2epasParser.PASSING)
            self.state = 4571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.BY:
                self.state = 4569
                self.match(ora2epasParser.BY)
                self.state = 4570
                self.match(ora2epasParser.VALUE)


            self.state = 4573
            self.expression()
            self.state = 4575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.AS) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)) | (1 << (ora2epasParser.NATIONAL_CHAR_STRING_LIT - 451)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (ora2epasParser.CHAR_STRING - 521)) | (1 << (ora2epasParser.DELIMITED_ID - 521)) | (1 << (ora2epasParser.INTRODUCER - 521)) | (1 << (ora2epasParser.REGULAR_ID - 521)))) != 0):
                self.state = 4574
                self.column_alias()


            self.state = 4577
            self.match(ora2epasParser.COMMA)
            self.state = 4578
            self.expression()
            self.state = 4580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,581,self._ctx)
            if la_ == 1:
                self.state = 4579
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_attributes_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLATTRIBUTES(self):
            return self.getToken(ora2epasParser.XMLATTRIBUTES, 0)

        def xml_multiuse_expression_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Xml_multiuse_expression_elementContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Xml_multiuse_expression_elementContext,i)


        def ENTITYESCAPING(self):
            return self.getToken(ora2epasParser.ENTITYESCAPING, 0)

        def NOENTITYESCAPING(self):
            return self.getToken(ora2epasParser.NOENTITYESCAPING, 0)

        def SCHEMACHECK(self):
            return self.getToken(ora2epasParser.SCHEMACHECK, 0)

        def NOSCHEMACHECK(self):
            return self.getToken(ora2epasParser.NOSCHEMACHECK, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_xml_attributes_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attributes_clause" ):
                listener.enterXml_attributes_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attributes_clause" ):
                listener.exitXml_attributes_clause(self)




    def xml_attributes_clause(self):

        localctx = ora2epasParser.Xml_attributes_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_xml_attributes_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4582
            self.match(ora2epasParser.XMLATTRIBUTES)
            self.state = 4583
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 4585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,582,self._ctx)
            if la_ == 1:
                self.state = 4584
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.ENTITYESCAPING or _la==ora2epasParser.NOENTITYESCAPING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,583,self._ctx)
            if la_ == 1:
                self.state = 4587
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.NOSCHEMACHECK or _la==ora2epasParser.SCHEMACHECK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4590
            self.xml_multiuse_expression_element()
            self.state = 4595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 4591
                self.match(ora2epasParser.COMMA)
                self.state = 4592
                self.xml_multiuse_expression_element()
                self.state = 4597
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4598
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_namespaces_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLNAMESPACES(self):
            return self.getToken(ora2epasParser.XMLNAMESPACES, 0)

        def concatenation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ConcatenationContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,i)


        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_aliasContext,i)


        def xml_general_default_part(self):
            return self.getTypedRuleContext(ora2epasParser.Xml_general_default_partContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_xml_namespaces_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespaces_clause" ):
                listener.enterXml_namespaces_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespaces_clause" ):
                listener.exitXml_namespaces_clause(self)




    def xml_namespaces_clause(self):

        localctx = ora2epasParser.Xml_namespaces_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_xml_namespaces_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4600
            self.match(ora2epasParser.XMLNAMESPACES)
            self.state = 4601
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 4605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,585,self._ctx)
            if la_ == 1:
                self.state = 4602
                self.concatenation()
                self.state = 4603
                self.column_alias()


            self.state = 4613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 4607
                self.match(ora2epasParser.COMMA)
                self.state = 4608
                self.concatenation()
                self.state = 4609
                self.column_alias()
                self.state = 4615
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.DEFAULT:
                self.state = 4616
                self.xml_general_default_part()


            self.state = 4619
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_table_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xml_column_name(self):
            return self.getTypedRuleContext(ora2epasParser.Xml_column_nameContext,0)


        def FOR(self):
            return self.getToken(ora2epasParser.FOR, 0)

        def ORDINALITY(self):
            return self.getToken(ora2epasParser.ORDINALITY, 0)

        def type_spec(self):
            return self.getTypedRuleContext(ora2epasParser.Type_specContext,0)


        def PATH(self):
            return self.getToken(ora2epasParser.PATH, 0)

        def concatenation(self):
            return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,0)


        def xml_general_default_part(self):
            return self.getTypedRuleContext(ora2epasParser.Xml_general_default_partContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_xml_table_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_table_column" ):
                listener.enterXml_table_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_table_column" ):
                listener.exitXml_table_column(self)




    def xml_table_column(self):

        localctx = ora2epasParser.Xml_table_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_xml_table_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4621
            self.xml_column_name()
            self.state = 4632
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.FOR]:
                self.state = 4622
                self.match(ora2epasParser.FOR)
                self.state = 4623
                self.match(ora2epasParser.ORDINALITY)
                pass
            elif token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DATE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARCHAR, ora2epasParser.VARCHAR2, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.REGULAR_ID]:
                self.state = 4624
                self.type_spec()
                self.state = 4627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.PATH:
                    self.state = 4625
                    self.match(ora2epasParser.PATH)
                    self.state = 4626
                    self.concatenation()


                self.state = 4630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.DEFAULT:
                    self.state = 4629
                    self.xml_general_default_part()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_general_default_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(ora2epasParser.DEFAULT, 0)

        def concatenation(self):
            return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_xml_general_default_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_general_default_part" ):
                listener.enterXml_general_default_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_general_default_part" ):
                listener.exitXml_general_default_part(self)




    def xml_general_default_part(self):

        localctx = ora2epasParser.Xml_general_default_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_xml_general_default_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4634
            self.match(ora2epasParser.DEFAULT)
            self.state = 4635
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_multiuse_expression_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(ora2epasParser.AS, 0)

        def id_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,0)


        def EVALNAME(self):
            return self.getToken(ora2epasParser.EVALNAME, 0)

        def concatenation(self):
            return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_xml_multiuse_expression_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_multiuse_expression_element" ):
                listener.enterXml_multiuse_expression_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_multiuse_expression_element" ):
                listener.exitXml_multiuse_expression_element(self)




    def xml_multiuse_expression_element(self):

        localctx = ora2epasParser.Xml_multiuse_expression_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_xml_multiuse_expression_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4637
            self.expression()
            self.state = 4644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.AS:
                self.state = 4638
                self.match(ora2epasParser.AS)
                self.state = 4642
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,591,self._ctx)
                if la_ == 1:
                    self.state = 4639
                    self.id_expression()
                    pass

                elif la_ == 2:
                    self.state = 4640
                    self.match(ora2epasParser.EVALNAME)
                    self.state = 4641
                    self.concatenation()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlroot_param_version_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(ora2epasParser.VERSION, 0)

        def NO(self):
            return self.getToken(ora2epasParser.NO, 0)

        def VALUE(self):
            return self.getToken(ora2epasParser.VALUE, 0)

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_xmlroot_param_version_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlroot_param_version_part" ):
                listener.enterXmlroot_param_version_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlroot_param_version_part" ):
                listener.exitXmlroot_param_version_part(self)




    def xmlroot_param_version_part(self):

        localctx = ora2epasParser.Xmlroot_param_version_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_xmlroot_param_version_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4646
            self.match(ora2epasParser.VERSION)
            self.state = 4650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,593,self._ctx)
            if la_ == 1:
                self.state = 4647
                self.match(ora2epasParser.NO)
                self.state = 4648
                self.match(ora2epasParser.VALUE)
                pass

            elif la_ == 2:
                self.state = 4649
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlroot_param_standalone_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STANDALONE(self):
            return self.getToken(ora2epasParser.STANDALONE, 0)

        def YES(self):
            return self.getToken(ora2epasParser.YES, 0)

        def NO(self):
            return self.getToken(ora2epasParser.NO, 0)

        def VALUE(self):
            return self.getToken(ora2epasParser.VALUE, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_xmlroot_param_standalone_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlroot_param_standalone_part" ):
                listener.enterXmlroot_param_standalone_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlroot_param_standalone_part" ):
                listener.exitXmlroot_param_standalone_part(self)




    def xmlroot_param_standalone_part(self):

        localctx = ora2epasParser.Xmlroot_param_standalone_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_xmlroot_param_standalone_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4652
            self.match(ora2epasParser.STANDALONE)
            self.state = 4658
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.YES]:
                self.state = 4653
                self.match(ora2epasParser.YES)
                pass
            elif token in [ora2epasParser.NO]:
                self.state = 4654
                self.match(ora2epasParser.NO)
                self.state = 4656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.VALUE:
                    self.state = 4655
                    self.match(ora2epasParser.VALUE)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlserialize_param_enconding_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCODING(self):
            return self.getToken(ora2epasParser.ENCODING, 0)

        def concatenation(self):
            return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_xmlserialize_param_enconding_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlserialize_param_enconding_part" ):
                listener.enterXmlserialize_param_enconding_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlserialize_param_enconding_part" ):
                listener.exitXmlserialize_param_enconding_part(self)




    def xmlserialize_param_enconding_part(self):

        localctx = ora2epasParser.Xmlserialize_param_enconding_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_xmlserialize_param_enconding_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4660
            self.match(ora2epasParser.ENCODING)
            self.state = 4661
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlserialize_param_version_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERSION(self):
            return self.getToken(ora2epasParser.VERSION, 0)

        def concatenation(self):
            return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_xmlserialize_param_version_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlserialize_param_version_part" ):
                listener.enterXmlserialize_param_version_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlserialize_param_version_part" ):
                listener.exitXmlserialize_param_version_part(self)




    def xmlserialize_param_version_part(self):

        localctx = ora2epasParser.Xmlserialize_param_version_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_xmlserialize_param_version_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4663
            self.match(ora2epasParser.VERSION)
            self.state = 4664
            self.concatenation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xmlserialize_param_ident_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(ora2epasParser.NO, 0)

        def INDENT(self):
            return self.getToken(ora2epasParser.INDENT, 0)

        def SIZE(self):
            return self.getToken(ora2epasParser.SIZE, 0)

        def concatenation(self):
            return self.getTypedRuleContext(ora2epasParser.ConcatenationContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_xmlserialize_param_ident_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmlserialize_param_ident_part" ):
                listener.enterXmlserialize_param_ident_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmlserialize_param_ident_part" ):
                listener.exitXmlserialize_param_ident_part(self)




    def xmlserialize_param_ident_part(self):

        localctx = ora2epasParser.Xmlserialize_param_ident_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_xmlserialize_param_ident_part)
        self._la = 0 # Token type
        try:
            self.state = 4674
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.NO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4666
                self.match(ora2epasParser.NO)
                self.state = 4667
                self.match(ora2epasParser.INDENT)
                pass
            elif token in [ora2epasParser.INDENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4668
                self.match(ora2epasParser.INDENT)
                self.state = 4672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.SIZE:
                    self.state = 4669
                    self.match(ora2epasParser.SIZE)
                    self.state = 4670
                    self.match(ora2epasParser.EQUALS_OP)
                    self.state = 4671
                    self.concatenation()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_plus_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whenever_command(self):
            return self.getTypedRuleContext(ora2epasParser.Whenever_commandContext,0)


        def exit_command(self):
            return self.getTypedRuleContext(ora2epasParser.Exit_commandContext,0)


        def prompt_command(self):
            return self.getTypedRuleContext(ora2epasParser.Prompt_commandContext,0)


        def set_command(self):
            return self.getTypedRuleContext(ora2epasParser.Set_commandContext,0)


        def show_errors_command(self):
            return self.getTypedRuleContext(ora2epasParser.Show_errors_commandContext,0)


        def start_command(self):
            return self.getTypedRuleContext(ora2epasParser.Start_commandContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_sql_plus_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_plus_command" ):
                listener.enterSql_plus_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_plus_command" ):
                listener.exitSql_plus_command(self)




    def sql_plus_command(self):

        localctx = ora2epasParser.Sql_plus_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_sql_plus_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4683
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.SOLIDUS]:
                self.state = 4676
                self.match(ora2epasParser.SOLIDUS)
                pass
            elif token in [ora2epasParser.WHENEVER]:
                self.state = 4677
                self.whenever_command()
                pass
            elif token in [ora2epasParser.EXIT]:
                self.state = 4678
                self.exit_command()
                pass
            elif token in [ora2epasParser.PROMPT]:
                self.state = 4679
                self.prompt_command()
                pass
            elif token in [ora2epasParser.SET]:
                self.state = 4680
                self.set_command()
                pass
            elif token in [ora2epasParser.SHOW]:
                self.state = 4681
                self.show_errors_command()
                pass
            elif token in [ora2epasParser.START_CMD]:
                self.state = 4682
                self.start_command()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,599,self._ctx)
            if la_ == 1:
                self.state = 4685
                self.match(ora2epasParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Whenever_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHENEVER(self):
            return self.getToken(ora2epasParser.WHENEVER, 0)

        def SQLERROR(self):
            return self.getToken(ora2epasParser.SQLERROR, 0)

        def OSERROR(self):
            return self.getToken(ora2epasParser.OSERROR, 0)

        def EXIT(self):
            return self.getToken(ora2epasParser.EXIT, 0)

        def CONTINUE(self):
            return self.getToken(ora2epasParser.CONTINUE, 0)

        def SUCCESS(self):
            return self.getToken(ora2epasParser.SUCCESS, 0)

        def FAILURE(self):
            return self.getToken(ora2epasParser.FAILURE, 0)

        def WARNING(self):
            return self.getToken(ora2epasParser.WARNING, 0)

        def COMMIT(self):
            return self.getToken(ora2epasParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(ora2epasParser.ROLLBACK, 0)

        def NONE(self):
            return self.getToken(ora2epasParser.NONE, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_whenever_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenever_command" ):
                listener.enterWhenever_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenever_command" ):
                listener.exitWhenever_command(self)




    def whenever_command(self):

        localctx = ora2epasParser.Whenever_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_whenever_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4688
            self.match(ora2epasParser.WHENEVER)
            self.state = 4689
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.OSERROR or _la==ora2epasParser.SQLERROR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.EXIT]:
                self.state = 4690
                self.match(ora2epasParser.EXIT)
                self.state = 4691
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.FAILURE or _la==ora2epasParser.SUCCESS or _la==ora2epasParser.WARNING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4692
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.COMMIT or _la==ora2epasParser.ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [ora2epasParser.CONTINUE]:
                self.state = 4693
                self.match(ora2epasParser.CONTINUE)
                self.state = 4694
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.COMMIT or _la==ora2epasParser.NONE or _la==ora2epasParser.ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(ora2epasParser.SET, 0)

        def regular_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Regular_idContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Regular_idContext,i)


        def CHAR_STRING(self):
            return self.getToken(ora2epasParser.CHAR_STRING, 0)

        def ON(self):
            return self.getToken(ora2epasParser.ON, 0)

        def OFF(self):
            return self.getToken(ora2epasParser.OFF, 0)

        def numeric(self):
            return self.getTypedRuleContext(ora2epasParser.NumericContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_set_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_command" ):
                listener.enterSet_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_command" ):
                listener.exitSet_command(self)




    def set_command(self):

        localctx = ora2epasParser.Set_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_set_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4697
            self.match(ora2epasParser.SET)
            self.state = 4698
            self.regular_id()
            self.state = 4704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,601,self._ctx)
            if la_ == 1:
                self.state = 4699
                self.match(ora2epasParser.CHAR_STRING)
                pass

            elif la_ == 2:
                self.state = 4700
                self.match(ora2epasParser.ON)
                pass

            elif la_ == 3:
                self.state = 4701
                self.match(ora2epasParser.OFF)
                pass

            elif la_ == 4:
                self.state = 4702
                self.numeric()
                pass

            elif la_ == 5:
                self.state = 4703
                self.regular_id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exit_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(ora2epasParser.EXIT, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_exit_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit_command" ):
                listener.enterExit_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit_command" ):
                listener.exitExit_command(self)




    def exit_command(self):

        localctx = ora2epasParser.Exit_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_exit_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4706
            self.match(ora2epasParser.EXIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Prompt_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROMPT(self):
            return self.getToken(ora2epasParser.PROMPT, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_prompt_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrompt_command" ):
                listener.enterPrompt_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrompt_command" ):
                listener.exitPrompt_command(self)




    def prompt_command(self):

        localctx = ora2epasParser.Prompt_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_prompt_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4708
            self.match(ora2epasParser.PROMPT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Show_errors_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(ora2epasParser.SHOW, 0)

        def ERR(self):
            return self.getToken(ora2epasParser.ERR, 0)

        def ERRORS(self):
            return self.getToken(ora2epasParser.ERRORS, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_show_errors_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_errors_command" ):
                listener.enterShow_errors_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_errors_command" ):
                listener.exitShow_errors_command(self)




    def show_errors_command(self):

        localctx = ora2epasParser.Show_errors_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_show_errors_command)
        try:
            self.state = 4714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,602,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4710
                self.match(ora2epasParser.SHOW)
                self.state = 4711
                self.match(ora2epasParser.ERR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4712
                self.match(ora2epasParser.SHOW)
                self.state = 4713
                self.match(ora2epasParser.ERRORS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Start_commandContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START_CMD(self):
            return self.getToken(ora2epasParser.START_CMD, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_start_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_command" ):
                listener.enterStart_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_command" ):
                listener.exitStart_command(self)




    def start_command(self):

        localctx = ora2epasParser.Start_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_start_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4716
            self.match(ora2epasParser.START_CMD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_extension_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_list(self):
            return self.getTypedRuleContext(ora2epasParser.Expression_listContext,0)


        def SUBPARTITION(self):
            return self.getToken(ora2epasParser.SUBPARTITION, 0)

        def PARTITION(self):
            return self.getToken(ora2epasParser.PARTITION, 0)

        def FOR(self):
            return self.getToken(ora2epasParser.FOR, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_partition_extension_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_extension_clause" ):
                listener.enterPartition_extension_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_extension_clause" ):
                listener.exitPartition_extension_clause(self)




    def partition_extension_clause(self):

        localctx = ora2epasParser.Partition_extension_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_partition_extension_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4718
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.PARTITION or _la==ora2epasParser.SUBPARTITION):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.FOR:
                self.state = 4719
                self.match(ora2epasParser.FOR)


            self.state = 4722
            self.expression_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def alias_quoted_string(self):
            return self.getTypedRuleContext(ora2epasParser.Alias_quoted_stringContext,0)


        def AS(self):
            return self.getToken(ora2epasParser.AS, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = ora2epasParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.state = 4732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,606,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.AS:
                    self.state = 4724
                    self.match(ora2epasParser.AS)


                self.state = 4729
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                    self.state = 4727
                    self.identifier()
                    pass
                elif token in [ora2epasParser.NATIONAL_CHAR_STRING_LIT, ora2epasParser.CHAR_STRING]:
                    self.state = 4728
                    self.alias_quoted_string()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4731
                self.match(ora2epasParser.AS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def alias_quoted_string(self):
            return self.getTypedRuleContext(ora2epasParser.Alias_quoted_stringContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = ora2epasParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4736
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.state = 4734
                self.identifier()
                pass
            elif token in [ora2epasParser.NATIONAL_CHAR_STRING_LIT, ora2epasParser.CHAR_STRING]:
                self.state = 4735
                self.alias_quoted_string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alias_quoted_stringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quoted_string(self):
            return self.getTypedRuleContext(ora2epasParser.Quoted_stringContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_alias_quoted_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias_quoted_string" ):
                listener.enterAlias_quoted_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias_quoted_string" ):
                listener.exitAlias_quoted_string(self)




    def alias_quoted_string(self):

        localctx = ora2epasParser.Alias_quoted_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_alias_quoted_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4738
            self.quoted_string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(ora2epasParser.WHERE, 0)

        def current_of_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Current_of_clauseContext,0)


        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = ora2epasParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4740
            self.match(ora2epasParser.WHERE)
            self.state = 4743
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.CURRENT]:
                self.state = 4741
                self.current_of_clause()
                pass
            elif token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ALL, ora2epasParser.ANALYZE, ora2epasParser.ANY, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CASE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COALESCE, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONNECT_BY_ROOT, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DATE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DISTINCT, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXISTS, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FALSE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NOT, ora2epasParser.NULL, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.PRIOR, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUE, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.DECODE, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.NVL, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROUND, ora2epasParser.ROW_NUMBER, ora2epasParser.SUBSTR, ora2epasParser.TO_CHAR, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.NATIONAL_CHAR_STRING_LIT, ora2epasParser.UNSIGNED_INTEGER, ora2epasParser.APPROXIMATE_NUM_LIT, ora2epasParser.CHAR_STRING, ora2epasParser.DELIMITED_ID, ora2epasParser.LEFT_PAREN, ora2epasParser.PLUS_SIGN, ora2epasParser.MINUS_SIGN, ora2epasParser.BINDVAR, ora2epasParser.COLON, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.state = 4742
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Current_of_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(ora2epasParser.CURRENT, 0)

        def OF(self):
            return self.getToken(ora2epasParser.OF, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(ora2epasParser.Cursor_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_current_of_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrent_of_clause" ):
                listener.enterCurrent_of_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrent_of_clause" ):
                listener.exitCurrent_of_clause(self)




    def current_of_clause(self):

        localctx = ora2epasParser.Current_of_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_current_of_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4745
            self.match(ora2epasParser.CURRENT)
            self.state = 4746
            self.match(ora2epasParser.OF)
            self.state = 4747
            self.cursor_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Into_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(ora2epasParser.INTO, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Variable_nameContext,i)


        def BULK(self):
            return self.getToken(ora2epasParser.BULK, 0)

        def COLLECT(self):
            return self.getToken(ora2epasParser.COLLECT, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_clause" ):
                listener.enterInto_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_clause" ):
                listener.exitInto_clause(self)




    def into_clause(self):

        localctx = ora2epasParser.Into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_into_clause)
        try:
            self.state = 4769
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.INTO]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4749
                self.match(ora2epasParser.INTO)
                self.state = 4750
                self.variable_name()
                self.state = 4755
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,609,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4751
                        self.match(ora2epasParser.COMMA)
                        self.state = 4752
                        self.variable_name() 
                    self.state = 4757
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,609,self._ctx)

                pass
            elif token in [ora2epasParser.BULK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4758
                self.match(ora2epasParser.BULK)
                self.state = 4759
                self.match(ora2epasParser.COLLECT)
                self.state = 4760
                self.match(ora2epasParser.INTO)
                self.state = 4761
                self.variable_name()
                self.state = 4766
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,610,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4762
                        self.match(ora2epasParser.COMMA)
                        self.state = 4763
                        self.variable_name() 
                    self.state = 4768
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,610,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def quoted_string(self):
            return self.getTypedRuleContext(ora2epasParser.Quoted_stringContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_xml_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_column_name" ):
                listener.enterXml_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_column_name" ):
                listener.exitXml_column_name(self)




    def xml_column_name(self):

        localctx = ora2epasParser.Xml_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_xml_column_name)
        try:
            self.state = 4773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4771
                self.identifier()
                pass
            elif token in [ora2epasParser.NATIONAL_CHAR_STRING_LIT, ora2epasParser.CHAR_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4772
                self.quoted_string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cost_class_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_cost_class_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCost_class_name" ):
                listener.enterCost_class_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCost_class_name" ):
                listener.exitCost_class_name(self)




    def cost_class_name(self):

        localctx = ora2epasParser.Cost_class_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_cost_class_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4775
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Attribute_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_attribute_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_name" ):
                listener.enterAttribute_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_name" ):
                listener.exitAttribute_name(self)




    def attribute_name(self):

        localctx = ora2epasParser.Attribute_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_attribute_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4777
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Savepoint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_savepoint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_name" ):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_name" ):
                listener.exitSavepoint_name(self)




    def savepoint_name(self):

        localctx = ora2epasParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4779
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rollback_segment_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_rollback_segment_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_segment_name" ):
                listener.enterRollback_segment_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_segment_name" ):
                listener.exitRollback_segment_name(self)




    def rollback_segment_name(self):

        localctx = ora2epasParser.Rollback_segment_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_rollback_segment_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4781
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_var_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_table_var_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_var_name" ):
                listener.enterTable_var_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_var_name" ):
                listener.exitTable_var_name(self)




    def table_var_name(self):

        localctx = ora2epasParser.Table_var_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_table_var_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4783
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Schema_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = ora2epasParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4785
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Routine_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,i)


        def link_name(self):
            return self.getTypedRuleContext(ora2epasParser.Link_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_routine_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutine_name" ):
                listener.enterRoutine_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutine_name" ):
                listener.exitRoutine_name(self)




    def routine_name(self):

        localctx = ora2epasParser.Routine_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_routine_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4787
            self.identifier()
            self.state = 4792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.PERIOD:
                self.state = 4788
                self.match(ora2epasParser.PERIOD)
                self.state = 4789
                self.id_expression()
                self.state = 4794
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.AT_SIGN:
                self.state = 4795
                self.match(ora2epasParser.AT_SIGN)
                self.state = 4796
                self.link_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Package_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_package_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_name" ):
                listener.enterPackage_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_name" ):
                listener.exitPackage_name(self)




    def package_name(self):

        localctx = ora2epasParser.Package_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_package_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4799
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Implementation_type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_implementation_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementation_type_name" ):
                listener.enterImplementation_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementation_type_name" ):
                listener.exitImplementation_type_name(self)




    def implementation_type_name(self):

        localctx = ora2epasParser.Implementation_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_implementation_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4801
            self.identifier()
            self.state = 4804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,615,self._ctx)
            if la_ == 1:
                self.state = 4802
                self.match(ora2epasParser.PERIOD)
                self.state = 4803
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_parameter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_name" ):
                listener.enterParameter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_name" ):
                listener.exitParameter_name(self)




    def parameter_name(self):

        localctx = ora2epasParser.Parameter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_parameter_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4806
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reference_model_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_reference_model_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_model_name" ):
                listener.enterReference_model_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_model_name" ):
                listener.exitReference_model_name(self)




    def reference_model_name(self):

        localctx = ora2epasParser.Reference_model_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_reference_model_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4808
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Main_model_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_main_model_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain_model_name" ):
                listener.enterMain_model_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain_model_name" ):
                listener.exitMain_model_name(self)




    def main_model_name(self):

        localctx = ora2epasParser.Main_model_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_main_model_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4810
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Aggregate_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_aggregate_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_function_name" ):
                listener.enterAggregate_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_function_name" ):
                listener.exitAggregate_function_name(self)




    def aggregate_function_name(self):

        localctx = ora2epasParser.Aggregate_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_aggregate_function_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4812
            self.identifier()
            self.state = 4817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.PERIOD:
                self.state = 4813
                self.match(ora2epasParser.PERIOD)
                self.state = 4814
                self.id_expression()
                self.state = 4819
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_query_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_name" ):
                listener.enterQuery_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_name" ):
                listener.exitQuery_name(self)




    def query_name(self):

        localctx = ora2epasParser.Query_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_query_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4820
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constraint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,i)


        def link_name(self):
            return self.getTypedRuleContext(ora2epasParser.Link_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_constraint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint_name" ):
                listener.enterConstraint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint_name" ):
                listener.exitConstraint_name(self)




    def constraint_name(self):

        localctx = ora2epasParser.Constraint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_constraint_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4822
            self.identifier()
            self.state = 4827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.PERIOD:
                self.state = 4823
                self.match(ora2epasParser.PERIOD)
                self.state = 4824
                self.id_expression()
                self.state = 4829
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.AT_SIGN:
                self.state = 4830
                self.match(ora2epasParser.AT_SIGN)
                self.state = 4831
                self.link_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Label_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_label_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_name" ):
                listener.enterLabel_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_name" ):
                listener.exitLabel_name(self)




    def label_name(self):

        localctx = ora2epasParser.Label_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_label_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4834
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)




    def type_name(self):

        localctx = ora2epasParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_type_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4836
            self.id_expression()
            self.state = 4841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.PERIOD:
                self.state = 4837
                self.match(ora2epasParser.PERIOD)
                self.state = 4838
                self.id_expression()
                self.state = 4843
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sequence_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_sequence_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_name" ):
                listener.enterSequence_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_name" ):
                listener.exitSequence_name(self)




    def sequence_name(self):

        localctx = ora2epasParser.Sequence_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_sequence_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4844
            self.id_expression()
            self.state = 4849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.PERIOD:
                self.state = 4845
                self.match(ora2epasParser.PERIOD)
                self.state = 4846
                self.id_expression()
                self.state = 4851
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exception_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_exception_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_name" ):
                listener.enterException_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_name" ):
                listener.exitException_name(self)




    def exception_name(self):

        localctx = ora2epasParser.Exception_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_exception_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4852
            self.identifier()
            self.state = 4857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.PERIOD:
                self.state = 4853
                self.match(ora2epasParser.PERIOD)
                self.state = 4854
                self.id_expression()
                self.state = 4859
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class View_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_view_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_name" ):
                listener.enterView_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_name" ):
                listener.exitView_name(self)




    def view_name(self):

        localctx = ora2epasParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4860
            self.identifier()
            self.state = 4863
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,622,self._ctx)
            if la_ == 1:
                self.state = 4861
                self.match(ora2epasParser.PERIOD)
                self.state = 4862
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mview_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_mview_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMview_name" ):
                listener.enterMview_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMview_name" ):
                listener.exitMview_name(self)




    def mview_name(self):

        localctx = ora2epasParser.Mview_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_mview_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4865
            self.identifier()
            self.state = 4868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,623,self._ctx)
            if la_ == 1:
                self.state = 4866
                self.match(ora2epasParser.PERIOD)
                self.state = 4867
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dblink_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_dblink_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDblink_name" ):
                listener.enterDblink_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDblink_name" ):
                listener.exitDblink_name(self)




    def dblink_name(self):

        localctx = ora2epasParser.Dblink_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_dblink_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4870
            self.identifier()
            self.state = 4873
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,624,self._ctx)
            if la_ == 1:
                self.state = 4871
                self.match(ora2epasParser.PERIOD)
                self.state = 4872
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = ora2epasParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_function_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4875
            self.identifier()
            self.state = 4878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.PERIOD:
                self.state = 4876
                self.match(ora2epasParser.PERIOD)
                self.state = 4877
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_procedure_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_name" ):
                listener.enterProcedure_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_name" ):
                listener.exitProcedure_name(self)




    def procedure_name(self):

        localctx = ora2epasParser.Procedure_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_procedure_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4880
            self.identifier()
            self.state = 4883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.PERIOD:
                self.state = 4881
                self.match(ora2epasParser.PERIOD)
                self.state = 4882
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_trigger_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_name" ):
                listener.enterTrigger_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_name" ):
                listener.exitTrigger_name(self)




    def trigger_name(self):

        localctx = ora2epasParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_trigger_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4885
            self.identifier()
            self.state = 4888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.PERIOD:
                self.state = 4886
                self.match(ora2epasParser.PERIOD)
                self.state = 4887
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,i)


        def INTRODUCER(self):
            return self.getToken(ora2epasParser.INTRODUCER, 0)

        def char_set_name(self):
            return self.getTypedRuleContext(ora2epasParser.Char_set_nameContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(ora2epasParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_name" ):
                listener.enterVariable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_name" ):
                listener.exitVariable_name(self)




    def variable_name(self):

        localctx = ora2epasParser.Variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_variable_name)
        self._la = 0 # Token type
        try:
            self.state = 4900
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.INTRODUCER:
                    self.state = 4890
                    self.match(ora2epasParser.INTRODUCER)
                    self.state = 4891
                    self.char_set_name()


                self.state = 4894
                self.id_expression()
                self.state = 4897
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,629,self._ctx)
                if la_ == 1:
                    self.state = 4895
                    self.match(ora2epasParser.PERIOD)
                    self.state = 4896
                    self.id_expression()


                pass
            elif token in [ora2epasParser.BINDVAR, ora2epasParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4899
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = ora2epasParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4902
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(ora2epasParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)




    def cursor_name(self):

        localctx = ora2epasParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_cursor_name)
        try:
            self.state = 4906
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4904
                self.identifier()
                pass
            elif token in [ora2epasParser.BINDVAR, ora2epasParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4905
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Record_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def bind_variable(self):
            return self.getTypedRuleContext(ora2epasParser.Bind_variableContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_record_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord_name" ):
                listener.enterRecord_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord_name" ):
                listener.exitRecord_name(self)




    def record_name(self):

        localctx = ora2epasParser.Record_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_record_name)
        try:
            self.state = 4910
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4908
                self.identifier()
                pass
            elif token in [ora2epasParser.BINDVAR, ora2epasParser.COLON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4909
                self.bind_variable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collection_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_collection_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_name" ):
                listener.enterCollection_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_name" ):
                listener.exitCollection_name(self)




    def collection_name(self):

        localctx = ora2epasParser.Collection_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_collection_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4912
            self.identifier()
            self.state = 4915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.PERIOD:
                self.state = 4913
                self.match(ora2epasParser.PERIOD)
                self.state = 4914
                self.id_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Link_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_link_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLink_name" ):
                listener.enterLink_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLink_name" ):
                listener.exitLink_name(self)




    def link_name(self):

        localctx = ora2epasParser.Link_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_link_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4917
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = ora2epasParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4919
            self.identifier()
            self.state = 4924
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,634,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4920
                    self.match(ora2epasParser.PERIOD)
                    self.state = 4921
                    self.id_expression() 
                self.state = 4926
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,634,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tableview_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def id_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,0)


        def link_name(self):
            return self.getTypedRuleContext(ora2epasParser.Link_nameContext,0)


        def partition_extension_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Partition_extension_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_tableview_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableview_name" ):
                listener.enterTableview_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableview_name" ):
                listener.exitTableview_name(self)




    def tableview_name(self):

        localctx = ora2epasParser.Tableview_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_tableview_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4927
            self.identifier()
            self.state = 4930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,635,self._ctx)
            if la_ == 1:
                self.state = 4928
                self.match(ora2epasParser.PERIOD)
                self.state = 4929
                self.id_expression()


            self.state = 4935
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,636,self._ctx)
            if la_ == 1:
                self.state = 4932
                self.match(ora2epasParser.AT_SIGN)
                self.state = 4933
                self.link_name()

            elif la_ == 2:
                self.state = 4934
                self.partition_extension_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Char_set_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_char_set_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_set_name" ):
                listener.enterChar_set_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_set_name" ):
                listener.exitChar_set_name(self)




    def char_set_name(self):

        localctx = ora2epasParser.Char_set_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_char_set_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4937
            self.id_expression()
            self.state = 4942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.PERIOD:
                self.state = 4938
                self.match(ora2epasParser.PERIOD)
                self.state = 4939
                self.id_expression()
                self.state = 4944
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Synonym_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_synonym_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSynonym_name" ):
                listener.enterSynonym_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSynonym_name" ):
                listener.exitSynonym_name(self)




    def synonym_name(self):

        localctx = ora2epasParser.Synonym_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_synonym_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4945
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Schema_object_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_schema_object_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_object_name" ):
                listener.enterSchema_object_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_object_name" ):
                listener.exitSchema_object_name(self)




    def schema_object_name(self):

        localctx = ora2epasParser.Schema_object_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_schema_object_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4947
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Keep_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEEP(self):
            return self.getToken(ora2epasParser.KEEP, 0)

        def DENSE_RANK(self):
            return self.getToken(ora2epasParser.DENSE_RANK, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Order_by_clauseContext,0)


        def FIRST(self):
            return self.getToken(ora2epasParser.FIRST, 0)

        def LAST(self):
            return self.getToken(ora2epasParser.LAST, 0)

        def over_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Over_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_keep_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeep_clause" ):
                listener.enterKeep_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeep_clause" ):
                listener.exitKeep_clause(self)




    def keep_clause(self):

        localctx = ora2epasParser.Keep_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_keep_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4949
            self.match(ora2epasParser.KEEP)
            self.state = 4950
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 4951
            self.match(ora2epasParser.DENSE_RANK)
            self.state = 4952
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.FIRST or _la==ora2epasParser.LAST):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4953
            self.order_by_clause()
            self.state = 4954
            self.match(ora2epasParser.RIGHT_PAREN)
            self.state = 4956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,638,self._ctx)
            if la_ == 1:
                self.state = 4955
                self.over_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ArgumentContext,i)


        def keep_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Keep_clauseContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_function_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument" ):
                listener.enterFunction_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument" ):
                listener.exitFunction_argument(self)




    def function_argument(self):

        localctx = ora2epasParser.Function_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_function_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4958
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 4960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ALL) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ANY) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CASE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COALESCE) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ora2epasParser.CONNECT_BY_ROOT - 65)) | (1 << (ora2epasParser.CONSTANT - 65)) | (1 << (ora2epasParser.CONSTRAINT - 65)) | (1 << (ora2epasParser.CONSTRAINTS - 65)) | (1 << (ora2epasParser.CONSTRUCTOR - 65)) | (1 << (ora2epasParser.CONTENT - 65)) | (1 << (ora2epasParser.CONTEXT - 65)) | (1 << (ora2epasParser.CONTINUE - 65)) | (1 << (ora2epasParser.CONVERT - 65)) | (1 << (ora2epasParser.CORRUPT_XID - 65)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 65)) | (1 << (ora2epasParser.COST - 65)) | (1 << (ora2epasParser.COUNT - 65)) | (1 << (ora2epasParser.CROSS - 65)) | (1 << (ora2epasParser.CUBE - 65)) | (1 << (ora2epasParser.CURRENT_USER - 65)) | (1 << (ora2epasParser.CURSOR - 65)) | (1 << (ora2epasParser.CUSTOMDATUM - 65)) | (1 << (ora2epasParser.CYCLE - 65)) | (1 << (ora2epasParser.DATA - 65)) | (1 << (ora2epasParser.DATABASE - 65)) | (1 << (ora2epasParser.DATE - 65)) | (1 << (ora2epasParser.DAY - 65)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 65)) | (1 << (ora2epasParser.DBTIMEZONE - 65)) | (1 << (ora2epasParser.DDL - 65)) | (1 << (ora2epasParser.DEBUG - 65)) | (1 << (ora2epasParser.DEC - 65)) | (1 << (ora2epasParser.DECIMAL - 65)) | (1 << (ora2epasParser.DECOMPOSE - 65)) | (1 << (ora2epasParser.DECREMENT - 65)) | (1 << (ora2epasParser.DEFAULT - 65)) | (1 << (ora2epasParser.DEFAULTS - 65)) | (1 << (ora2epasParser.DEFERRED - 65)) | (1 << (ora2epasParser.DEFINER - 65)) | (1 << (ora2epasParser.DETERMINISTIC - 65)) | (1 << (ora2epasParser.DIMENSION - 65)) | (1 << (ora2epasParser.DISABLE - 65)) | (1 << (ora2epasParser.DISASSOCIATE - 65)) | (1 << (ora2epasParser.DISTINCT - 65)) | (1 << (ora2epasParser.DOCUMENT - 65)) | (1 << (ora2epasParser.DOUBLE - 65)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (ora2epasParser.EACH - 65)) | (1 << (ora2epasParser.ELEMENT - 65)) | (1 << (ora2epasParser.EMPTY - 65)) | (1 << (ora2epasParser.ENABLE - 65)) | (1 << (ora2epasParser.ENCODING - 65)) | (1 << (ora2epasParser.ENTITYESCAPING - 65)) | (1 << (ora2epasParser.ERR - 65)) | (1 << (ora2epasParser.ERRORS - 65)) | (1 << (ora2epasParser.ESCAPE - 65)) | (1 << (ora2epasParser.EVALNAME - 65)) | (1 << (ora2epasParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (ora2epasParser.EXCEPTION_INIT - 129)) | (1 << (ora2epasParser.EXCEPTIONS - 129)) | (1 << (ora2epasParser.EXCLUDE - 129)) | (1 << (ora2epasParser.EXECUTE - 129)) | (1 << (ora2epasParser.EXISTS - 129)) | (1 << (ora2epasParser.EXIT - 129)) | (1 << (ora2epasParser.EXPLAIN - 129)) | (1 << (ora2epasParser.EXTERNAL - 129)) | (1 << (ora2epasParser.EXTRACT - 129)) | (1 << (ora2epasParser.FAILURE - 129)) | (1 << (ora2epasParser.FALSE - 129)) | (1 << (ora2epasParser.FINAL - 129)) | (1 << (ora2epasParser.FIRST - 129)) | (1 << (ora2epasParser.FIRST_VALUE - 129)) | (1 << (ora2epasParser.FLOAT - 129)) | (1 << (ora2epasParser.FOLLOWING - 129)) | (1 << (ora2epasParser.FOLLOWS - 129)) | (1 << (ora2epasParser.FORALL - 129)) | (1 << (ora2epasParser.FORCE - 129)) | (1 << (ora2epasParser.FULL - 129)) | (1 << (ora2epasParser.FUNCTION - 129)) | (1 << (ora2epasParser.GROUPING - 129)) | (1 << (ora2epasParser.HASH - 129)) | (1 << (ora2epasParser.HIDE - 129)) | (1 << (ora2epasParser.HOUR - 129)) | (1 << (ora2epasParser.IGNORE - 129)) | (1 << (ora2epasParser.IMMEDIATE - 129)) | (1 << (ora2epasParser.INCLUDE - 129)) | (1 << (ora2epasParser.INCLUDING - 129)) | (1 << (ora2epasParser.INCREMENT - 129)) | (1 << (ora2epasParser.INDENT - 129)) | (1 << (ora2epasParser.INDEXED - 129)) | (1 << (ora2epasParser.INDICATOR - 129)) | (1 << (ora2epasParser.INDICES - 129)) | (1 << (ora2epasParser.INFINITE - 129)) | (1 << (ora2epasParser.INLINE - 129)) | (1 << (ora2epasParser.INNER - 129)) | (1 << (ora2epasParser.INOUT - 129)) | (1 << (ora2epasParser.INSTANTIABLE - 129)) | (1 << (ora2epasParser.INSTEAD - 129)) | (1 << (ora2epasParser.INT - 129)) | (1 << (ora2epasParser.INTEGER - 129)) | (1 << (ora2epasParser.INTERVAL - 129)) | (1 << (ora2epasParser.INVALIDATE - 129)) | (1 << (ora2epasParser.ISOLATION - 129)) | (1 << (ora2epasParser.ITERATE - 129)) | (1 << (ora2epasParser.JAVA - 129)) | (1 << (ora2epasParser.JOIN - 129)) | (1 << (ora2epasParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (ora2epasParser.LANGUAGE - 193)) | (1 << (ora2epasParser.LAST - 193)) | (1 << (ora2epasParser.LAST_VALUE - 193)) | (1 << (ora2epasParser.LEADING - 193)) | (1 << (ora2epasParser.LEFT - 193)) | (1 << (ora2epasParser.LEVEL - 193)) | (1 << (ora2epasParser.LIBRARY - 193)) | (1 << (ora2epasParser.LIKE2 - 193)) | (1 << (ora2epasParser.LIKE4 - 193)) | (1 << (ora2epasParser.LIKEC - 193)) | (1 << (ora2epasParser.LIMIT - 193)) | (1 << (ora2epasParser.LOCAL - 193)) | (1 << (ora2epasParser.LOCKED - 193)) | (1 << (ora2epasParser.LOG - 193)) | (1 << (ora2epasParser.LOGOFF - 193)) | (1 << (ora2epasParser.LOGON - 193)) | (1 << (ora2epasParser.LONG - 193)) | (1 << (ora2epasParser.LOOP - 193)) | (1 << (ora2epasParser.MAIN - 193)) | (1 << (ora2epasParser.MAP - 193)) | (1 << (ora2epasParser.MATCHED - 193)) | (1 << (ora2epasParser.MAXVALUE - 193)) | (1 << (ora2epasParser.MEASURES - 193)) | (1 << (ora2epasParser.MEMBER - 193)) | (1 << (ora2epasParser.MERGE - 193)) | (1 << (ora2epasParser.MINUTE - 193)) | (1 << (ora2epasParser.MINVALUE - 193)) | (1 << (ora2epasParser.MLSLABEL - 193)) | (1 << (ora2epasParser.MODEL - 193)) | (1 << (ora2epasParser.MODIFY - 193)) | (1 << (ora2epasParser.MONTH - 193)) | (1 << (ora2epasParser.MULTISET - 193)) | (1 << (ora2epasParser.NAME - 193)) | (1 << (ora2epasParser.NAN - 193)) | (1 << (ora2epasParser.NATURAL - 193)) | (1 << (ora2epasParser.NATURALN - 193)) | (1 << (ora2epasParser.NAV - 193)) | (1 << (ora2epasParser.NCHAR - 193)) | (1 << (ora2epasParser.NCHAR_CS - 193)) | (1 << (ora2epasParser.NCLOB - 193)) | (1 << (ora2epasParser.NESTED - 193)) | (1 << (ora2epasParser.NEW - 193)) | (1 << (ora2epasParser.NO - 193)) | (1 << (ora2epasParser.NOAUDIT - 193)) | (1 << (ora2epasParser.NOCOPY - 193)) | (1 << (ora2epasParser.NOCYCLE - 193)) | (1 << (ora2epasParser.NOENTITYESCAPING - 193)) | (1 << (ora2epasParser.NONE - 193)) | (1 << (ora2epasParser.NOSCHEMACHECK - 193)) | (1 << (ora2epasParser.NOT - 193)) | (1 << (ora2epasParser.NULL - 193)) | (1 << (ora2epasParser.NULLS - 193)) | (1 << (ora2epasParser.NUMBER - 193)) | (1 << (ora2epasParser.NUMERIC - 193)) | (1 << (ora2epasParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (ora2epasParser.OBJECT - 257)) | (1 << (ora2epasParser.OFF - 257)) | (1 << (ora2epasParser.OID - 257)) | (1 << (ora2epasParser.OLD - 257)) | (1 << (ora2epasParser.ONLY - 257)) | (1 << (ora2epasParser.OPEN - 257)) | (1 << (ora2epasParser.ORADATA - 257)) | (1 << (ora2epasParser.ORDINALITY - 257)) | (1 << (ora2epasParser.OSERROR - 257)) | (1 << (ora2epasParser.OUT - 257)) | (1 << (ora2epasParser.OUTER - 257)) | (1 << (ora2epasParser.OVER - 257)) | (1 << (ora2epasParser.OVERRIDING - 257)) | (1 << (ora2epasParser.PACKAGE - 257)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 257)) | (1 << (ora2epasParser.PARAMETERS - 257)) | (1 << (ora2epasParser.PARENT - 257)) | (1 << (ora2epasParser.PARTITION - 257)) | (1 << (ora2epasParser.PASSING - 257)) | (1 << (ora2epasParser.PATH - 257)) | (1 << (ora2epasParser.PIPELINED - 257)) | (1 << (ora2epasParser.PLAN - 257)) | (1 << (ora2epasParser.PLS_INTEGER - 257)) | (1 << (ora2epasParser.POSITIVE - 257)) | (1 << (ora2epasParser.POSITIVEN - 257)) | (1 << (ora2epasParser.PRAGMA - 257)) | (1 << (ora2epasParser.PRECEDING - 257)) | (1 << (ora2epasParser.PRECISION - 257)) | (1 << (ora2epasParser.PRESENT - 257)) | (1 << (ora2epasParser.PRIOR - 257)) | (1 << (ora2epasParser.RAISE - 257)) | (1 << (ora2epasParser.RANGE - 257)) | (1 << (ora2epasParser.RAW - 257)) | (1 << (ora2epasParser.READ - 257)) | (1 << (ora2epasParser.REAL - 257)) | (1 << (ora2epasParser.RECORD - 257)) | (1 << (ora2epasParser.REF - 257)) | (1 << (ora2epasParser.REFERENCE - 257)) | (1 << (ora2epasParser.REFERENCING - 257)) | (1 << (ora2epasParser.REJECT - 257)) | (1 << (ora2epasParser.RENAME - 257)) | (1 << (ora2epasParser.REPLACE - 257)) | (1 << (ora2epasParser.RESPECT - 257)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 257)) | (1 << (ora2epasParser.RESULT - 257)) | (1 << (ora2epasParser.RETURN - 257)) | (1 << (ora2epasParser.RETURNING - 257)) | (1 << (ora2epasParser.REUSE - 257)) | (1 << (ora2epasParser.REVERSE - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (ora2epasParser.RIGHT - 321)) | (1 << (ora2epasParser.ROLLBACK - 321)) | (1 << (ora2epasParser.ROLLUP - 321)) | (1 << (ora2epasParser.ROW - 321)) | (1 << (ora2epasParser.ROWID - 321)) | (1 << (ora2epasParser.ROWS - 321)) | (1 << (ora2epasParser.RULES - 321)) | (1 << (ora2epasParser.SAMPLE - 321)) | (1 << (ora2epasParser.SAVE - 321)) | (1 << (ora2epasParser.SAVEPOINT - 321)) | (1 << (ora2epasParser.SCHEMA - 321)) | (1 << (ora2epasParser.SCHEMACHECK - 321)) | (1 << (ora2epasParser.SCN - 321)) | (1 << (ora2epasParser.SECOND - 321)) | (1 << (ora2epasParser.SEED - 321)) | (1 << (ora2epasParser.SEGMENT - 321)) | (1 << (ora2epasParser.SELF - 321)) | (1 << (ora2epasParser.SEQUENTIAL - 321)) | (1 << (ora2epasParser.SERIALIZABLE - 321)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 321)) | (1 << (ora2epasParser.SERVERERROR - 321)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 321)) | (1 << (ora2epasParser.SET - 321)) | (1 << (ora2epasParser.SETS - 321)) | (1 << (ora2epasParser.SETTINGS - 321)) | (1 << (ora2epasParser.SHOW - 321)) | (1 << (ora2epasParser.SHUTDOWN - 321)) | (1 << (ora2epasParser.SIBLINGS - 321)) | (1 << (ora2epasParser.SIGNTYPE - 321)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 321)) | (1 << (ora2epasParser.SINGLE - 321)) | (1 << (ora2epasParser.SKIP_ - 321)) | (1 << (ora2epasParser.SMALLINT - 321)) | (1 << (ora2epasParser.SNAPSHOT - 321)) | (1 << (ora2epasParser.SOME - 321)) | (1 << (ora2epasParser.SPECIFICATION - 321)) | (1 << (ora2epasParser.SQLDATA - 321)) | (1 << (ora2epasParser.SQLERROR - 321)) | (1 << (ora2epasParser.STANDALONE - 321)) | (1 << (ora2epasParser.STARTUP - 321)) | (1 << (ora2epasParser.STATEMENT - 321)) | (1 << (ora2epasParser.STATEMENT_ID - 321)) | (1 << (ora2epasParser.STATIC - 321)) | (1 << (ora2epasParser.STATISTICS - 321)) | (1 << (ora2epasParser.STRING - 321)) | (1 << (ora2epasParser.SUBMULTISET - 321)) | (1 << (ora2epasParser.SUBPARTITION - 321)) | (1 << (ora2epasParser.SUBSTITUTABLE - 321)) | (1 << (ora2epasParser.SUBTYPE - 321)) | (1 << (ora2epasParser.SUCCESS - 321)) | (1 << (ora2epasParser.SUSPEND - 321)) | (1 << (ora2epasParser.TIME - 321)) | (1 << (ora2epasParser.TIMESTAMP - 321)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 385)) | (1 << (ora2epasParser.TIMEZONE_ABBR - 385)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 385)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 385)) | (1 << (ora2epasParser.TIMEZONE_REGION - 385)) | (1 << (ora2epasParser.TRAILING - 385)) | (1 << (ora2epasParser.TRANSACTION - 385)) | (1 << (ora2epasParser.TRANSLATE - 385)) | (1 << (ora2epasParser.TREAT - 385)) | (1 << (ora2epasParser.TRIGGER - 385)) | (1 << (ora2epasParser.TRUE - 385)) | (1 << (ora2epasParser.TRUNCATE - 385)) | (1 << (ora2epasParser.TYPE - 385)) | (1 << (ora2epasParser.UNBOUNDED - 385)) | (1 << (ora2epasParser.UNDER - 385)) | (1 << (ora2epasParser.UNLIMITED - 385)) | (1 << (ora2epasParser.UNTIL - 385)) | (1 << (ora2epasParser.UPDATED - 385)) | (1 << (ora2epasParser.UPSERT - 385)) | (1 << (ora2epasParser.UROWID - 385)) | (1 << (ora2epasParser.USE - 385)) | (1 << (ora2epasParser.VALIDATE - 385)) | (1 << (ora2epasParser.VALUE - 385)) | (1 << (ora2epasParser.VARIABLE - 385)) | (1 << (ora2epasParser.VARRAY - 385)) | (1 << (ora2epasParser.VARYING - 385)) | (1 << (ora2epasParser.VERSION - 385)) | (1 << (ora2epasParser.VERSIONS - 385)) | (1 << (ora2epasParser.WAIT - 385)) | (1 << (ora2epasParser.WARNING - 385)) | (1 << (ora2epasParser.WELLFORMED - 385)) | (1 << (ora2epasParser.WHENEVER - 385)) | (1 << (ora2epasParser.WHILE - 385)) | (1 << (ora2epasParser.WITHIN - 385)) | (1 << (ora2epasParser.WORK - 385)) | (1 << (ora2epasParser.WRITE - 385)) | (1 << (ora2epasParser.XML - 385)) | (1 << (ora2epasParser.XMLAGG - 385)) | (1 << (ora2epasParser.XMLATTRIBUTES - 385)) | (1 << (ora2epasParser.XMLCAST - 385)) | (1 << (ora2epasParser.XMLCOLATTVAL - 385)) | (1 << (ora2epasParser.XMLELEMENT - 385)) | (1 << (ora2epasParser.XMLEXISTS - 385)) | (1 << (ora2epasParser.XMLFOREST - 385)) | (1 << (ora2epasParser.XMLNAMESPACES - 385)) | (1 << (ora2epasParser.XMLPARSE - 385)) | (1 << (ora2epasParser.XMLPI - 385)) | (1 << (ora2epasParser.XMLQUERY - 385)) | (1 << (ora2epasParser.XMLROOT - 385)) | (1 << (ora2epasParser.XMLSERIALIZE - 385)) | (1 << (ora2epasParser.XMLTABLE - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (ora2epasParser.YEAR - 449)) | (1 << (ora2epasParser.YES - 449)) | (1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 449)) | (1 << (ora2epasParser.ZONE - 449)) | (1 << (ora2epasParser.PREDICTION - 449)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 449)) | (1 << (ora2epasParser.PREDICTION_COST - 449)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 449)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 449)) | (1 << (ora2epasParser.PREDICTION_SET - 449)) | (1 << (ora2epasParser.CUME_DIST - 449)) | (1 << (ora2epasParser.DENSE_RANK - 449)) | (1 << (ora2epasParser.LISTAGG - 449)) | (1 << (ora2epasParser.PERCENT_RANK - 449)) | (1 << (ora2epasParser.PERCENTILE_CONT - 449)) | (1 << (ora2epasParser.PERCENTILE_DISC - 449)) | (1 << (ora2epasParser.RANK - 449)) | (1 << (ora2epasParser.AVG - 449)) | (1 << (ora2epasParser.CORR - 449)) | (1 << (ora2epasParser.COVAR_ - 449)) | (1 << (ora2epasParser.DECODE - 449)) | (1 << (ora2epasParser.LAG - 449)) | (1 << (ora2epasParser.LEAD - 449)) | (1 << (ora2epasParser.MAX - 449)) | (1 << (ora2epasParser.MEDIAN - 449)) | (1 << (ora2epasParser.MIN - 449)) | (1 << (ora2epasParser.NTILE - 449)) | (1 << (ora2epasParser.NVL - 449)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 449)) | (1 << (ora2epasParser.REGR_ - 449)) | (1 << (ora2epasParser.ROUND - 449)) | (1 << (ora2epasParser.ROW_NUMBER - 449)) | (1 << (ora2epasParser.SUBSTR - 449)) | (1 << (ora2epasParser.TO_CHAR - 449)) | (1 << (ora2epasParser.TRIM - 449)) | (1 << (ora2epasParser.SUM - 449)) | (1 << (ora2epasParser.STDDEV - 449)) | (1 << (ora2epasParser.VAR_ - 449)) | (1 << (ora2epasParser.VARIANCE - 449)) | (1 << (ora2epasParser.DBMS_ALERT - 449)) | (1 << (ora2epasParser.DBMS_AQADM - 449)) | (1 << (ora2epasParser.DBMS_AQ - 449)) | (1 << (ora2epasParser.DBMS_CRYPTO - 449)) | (1 << (ora2epasParser.DBMS_JOB - 449)) | (1 << (ora2epasParser.DBMS_LOB - 449)) | (1 << (ora2epasParser.DBMS_LOCK - 449)) | (1 << (ora2epasParser.DBMS_MVIEW - 449)) | (1 << (ora2epasParser.DBMS_OUTPUT - 449)) | (1 << (ora2epasParser.DBMS_PIPE - 449)) | (1 << (ora2epasParser.DBMS_PROFILER - 449)) | (1 << (ora2epasParser.DBMS_RANDOM - 449)) | (1 << (ora2epasParser.DBMS_RLS - 449)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 449)) | (1 << (ora2epasParser.DBMS_SESSION - 449)) | (1 << (ora2epasParser.DBMS_SQL - 449)) | (1 << (ora2epasParser.DBMS_UTILITY - 449)) | (1 << (ora2epasParser.EMP_ADMIN - 449)) | (1 << (ora2epasParser.UTL_ENCODE - 449)) | (1 << (ora2epasParser.UTL_FILE - 449)) | (1 << (ora2epasParser.UTL_HTTP - 449)) | (1 << (ora2epasParser.UTL_MAIL - 449)) | (1 << (ora2epasParser.UTL_RAW - 449)) | (1 << (ora2epasParser.UTL_SMTP - 449)) | (1 << (ora2epasParser.UTL_TCP - 449)))) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & ((1 << (ora2epasParser.UTL_URL - 513)) | (1 << (ora2epasParser.NATIONAL_CHAR_STRING_LIT - 513)) | (1 << (ora2epasParser.UNSIGNED_INTEGER - 513)) | (1 << (ora2epasParser.APPROXIMATE_NUM_LIT - 513)) | (1 << (ora2epasParser.CHAR_STRING - 513)) | (1 << (ora2epasParser.DELIMITED_ID - 513)) | (1 << (ora2epasParser.LEFT_PAREN - 513)) | (1 << (ora2epasParser.PLUS_SIGN - 513)) | (1 << (ora2epasParser.MINUS_SIGN - 513)) | (1 << (ora2epasParser.BINDVAR - 513)) | (1 << (ora2epasParser.COLON - 513)) | (1 << (ora2epasParser.INTRODUCER - 513)) | (1 << (ora2epasParser.REGULAR_ID - 513)))) != 0):
                self.state = 4959
                self.argument()


            self.state = 4966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 4962
                self.match(ora2epasParser.COMMA)
                self.state = 4963
                self.argument()
                self.state = 4968
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4969
            self.match(ora2epasParser.RIGHT_PAREN)
            self.state = 4971
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,641,self._ctx)
            if la_ == 1:
                self.state = 4970
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_argument_analyticContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ArgumentContext,i)


        def keep_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Keep_clauseContext,0)


        def respect_or_ignore_nulls(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Respect_or_ignore_nullsContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Respect_or_ignore_nullsContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_function_argument_analytic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument_analytic" ):
                listener.enterFunction_argument_analytic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument_analytic" ):
                listener.exitFunction_argument_analytic(self)




    def function_argument_analytic(self):

        localctx = ora2epasParser.Function_argument_analyticContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_function_argument_analytic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4973
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 4978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ALL) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ANY) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CASE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COALESCE) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ora2epasParser.CONNECT_BY_ROOT - 65)) | (1 << (ora2epasParser.CONSTANT - 65)) | (1 << (ora2epasParser.CONSTRAINT - 65)) | (1 << (ora2epasParser.CONSTRAINTS - 65)) | (1 << (ora2epasParser.CONSTRUCTOR - 65)) | (1 << (ora2epasParser.CONTENT - 65)) | (1 << (ora2epasParser.CONTEXT - 65)) | (1 << (ora2epasParser.CONTINUE - 65)) | (1 << (ora2epasParser.CONVERT - 65)) | (1 << (ora2epasParser.CORRUPT_XID - 65)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 65)) | (1 << (ora2epasParser.COST - 65)) | (1 << (ora2epasParser.COUNT - 65)) | (1 << (ora2epasParser.CROSS - 65)) | (1 << (ora2epasParser.CUBE - 65)) | (1 << (ora2epasParser.CURRENT_USER - 65)) | (1 << (ora2epasParser.CURSOR - 65)) | (1 << (ora2epasParser.CUSTOMDATUM - 65)) | (1 << (ora2epasParser.CYCLE - 65)) | (1 << (ora2epasParser.DATA - 65)) | (1 << (ora2epasParser.DATABASE - 65)) | (1 << (ora2epasParser.DATE - 65)) | (1 << (ora2epasParser.DAY - 65)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 65)) | (1 << (ora2epasParser.DBTIMEZONE - 65)) | (1 << (ora2epasParser.DDL - 65)) | (1 << (ora2epasParser.DEBUG - 65)) | (1 << (ora2epasParser.DEC - 65)) | (1 << (ora2epasParser.DECIMAL - 65)) | (1 << (ora2epasParser.DECOMPOSE - 65)) | (1 << (ora2epasParser.DECREMENT - 65)) | (1 << (ora2epasParser.DEFAULT - 65)) | (1 << (ora2epasParser.DEFAULTS - 65)) | (1 << (ora2epasParser.DEFERRED - 65)) | (1 << (ora2epasParser.DEFINER - 65)) | (1 << (ora2epasParser.DETERMINISTIC - 65)) | (1 << (ora2epasParser.DIMENSION - 65)) | (1 << (ora2epasParser.DISABLE - 65)) | (1 << (ora2epasParser.DISASSOCIATE - 65)) | (1 << (ora2epasParser.DISTINCT - 65)) | (1 << (ora2epasParser.DOCUMENT - 65)) | (1 << (ora2epasParser.DOUBLE - 65)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 65)) | (1 << (ora2epasParser.EACH - 65)) | (1 << (ora2epasParser.ELEMENT - 65)) | (1 << (ora2epasParser.EMPTY - 65)) | (1 << (ora2epasParser.ENABLE - 65)) | (1 << (ora2epasParser.ENCODING - 65)) | (1 << (ora2epasParser.ENTITYESCAPING - 65)) | (1 << (ora2epasParser.ERR - 65)) | (1 << (ora2epasParser.ERRORS - 65)) | (1 << (ora2epasParser.ESCAPE - 65)) | (1 << (ora2epasParser.EVALNAME - 65)) | (1 << (ora2epasParser.EXCEPTION - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (ora2epasParser.EXCEPTION_INIT - 129)) | (1 << (ora2epasParser.EXCEPTIONS - 129)) | (1 << (ora2epasParser.EXCLUDE - 129)) | (1 << (ora2epasParser.EXECUTE - 129)) | (1 << (ora2epasParser.EXISTS - 129)) | (1 << (ora2epasParser.EXIT - 129)) | (1 << (ora2epasParser.EXPLAIN - 129)) | (1 << (ora2epasParser.EXTERNAL - 129)) | (1 << (ora2epasParser.EXTRACT - 129)) | (1 << (ora2epasParser.FAILURE - 129)) | (1 << (ora2epasParser.FALSE - 129)) | (1 << (ora2epasParser.FINAL - 129)) | (1 << (ora2epasParser.FIRST - 129)) | (1 << (ora2epasParser.FIRST_VALUE - 129)) | (1 << (ora2epasParser.FLOAT - 129)) | (1 << (ora2epasParser.FOLLOWING - 129)) | (1 << (ora2epasParser.FOLLOWS - 129)) | (1 << (ora2epasParser.FORALL - 129)) | (1 << (ora2epasParser.FORCE - 129)) | (1 << (ora2epasParser.FULL - 129)) | (1 << (ora2epasParser.FUNCTION - 129)) | (1 << (ora2epasParser.GROUPING - 129)) | (1 << (ora2epasParser.HASH - 129)) | (1 << (ora2epasParser.HIDE - 129)) | (1 << (ora2epasParser.HOUR - 129)) | (1 << (ora2epasParser.IGNORE - 129)) | (1 << (ora2epasParser.IMMEDIATE - 129)) | (1 << (ora2epasParser.INCLUDE - 129)) | (1 << (ora2epasParser.INCLUDING - 129)) | (1 << (ora2epasParser.INCREMENT - 129)) | (1 << (ora2epasParser.INDENT - 129)) | (1 << (ora2epasParser.INDEXED - 129)) | (1 << (ora2epasParser.INDICATOR - 129)) | (1 << (ora2epasParser.INDICES - 129)) | (1 << (ora2epasParser.INFINITE - 129)) | (1 << (ora2epasParser.INLINE - 129)) | (1 << (ora2epasParser.INNER - 129)) | (1 << (ora2epasParser.INOUT - 129)) | (1 << (ora2epasParser.INSTANTIABLE - 129)) | (1 << (ora2epasParser.INSTEAD - 129)) | (1 << (ora2epasParser.INT - 129)) | (1 << (ora2epasParser.INTEGER - 129)) | (1 << (ora2epasParser.INTERVAL - 129)) | (1 << (ora2epasParser.INVALIDATE - 129)) | (1 << (ora2epasParser.ISOLATION - 129)) | (1 << (ora2epasParser.ITERATE - 129)) | (1 << (ora2epasParser.JAVA - 129)) | (1 << (ora2epasParser.JOIN - 129)) | (1 << (ora2epasParser.KEEP - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (ora2epasParser.LANGUAGE - 193)) | (1 << (ora2epasParser.LAST - 193)) | (1 << (ora2epasParser.LAST_VALUE - 193)) | (1 << (ora2epasParser.LEADING - 193)) | (1 << (ora2epasParser.LEFT - 193)) | (1 << (ora2epasParser.LEVEL - 193)) | (1 << (ora2epasParser.LIBRARY - 193)) | (1 << (ora2epasParser.LIKE2 - 193)) | (1 << (ora2epasParser.LIKE4 - 193)) | (1 << (ora2epasParser.LIKEC - 193)) | (1 << (ora2epasParser.LIMIT - 193)) | (1 << (ora2epasParser.LOCAL - 193)) | (1 << (ora2epasParser.LOCKED - 193)) | (1 << (ora2epasParser.LOG - 193)) | (1 << (ora2epasParser.LOGOFF - 193)) | (1 << (ora2epasParser.LOGON - 193)) | (1 << (ora2epasParser.LONG - 193)) | (1 << (ora2epasParser.LOOP - 193)) | (1 << (ora2epasParser.MAIN - 193)) | (1 << (ora2epasParser.MAP - 193)) | (1 << (ora2epasParser.MATCHED - 193)) | (1 << (ora2epasParser.MAXVALUE - 193)) | (1 << (ora2epasParser.MEASURES - 193)) | (1 << (ora2epasParser.MEMBER - 193)) | (1 << (ora2epasParser.MERGE - 193)) | (1 << (ora2epasParser.MINUTE - 193)) | (1 << (ora2epasParser.MINVALUE - 193)) | (1 << (ora2epasParser.MLSLABEL - 193)) | (1 << (ora2epasParser.MODEL - 193)) | (1 << (ora2epasParser.MODIFY - 193)) | (1 << (ora2epasParser.MONTH - 193)) | (1 << (ora2epasParser.MULTISET - 193)) | (1 << (ora2epasParser.NAME - 193)) | (1 << (ora2epasParser.NAN - 193)) | (1 << (ora2epasParser.NATURAL - 193)) | (1 << (ora2epasParser.NATURALN - 193)) | (1 << (ora2epasParser.NAV - 193)) | (1 << (ora2epasParser.NCHAR - 193)) | (1 << (ora2epasParser.NCHAR_CS - 193)) | (1 << (ora2epasParser.NCLOB - 193)) | (1 << (ora2epasParser.NESTED - 193)) | (1 << (ora2epasParser.NEW - 193)) | (1 << (ora2epasParser.NO - 193)) | (1 << (ora2epasParser.NOAUDIT - 193)) | (1 << (ora2epasParser.NOCOPY - 193)) | (1 << (ora2epasParser.NOCYCLE - 193)) | (1 << (ora2epasParser.NOENTITYESCAPING - 193)) | (1 << (ora2epasParser.NONE - 193)) | (1 << (ora2epasParser.NOSCHEMACHECK - 193)) | (1 << (ora2epasParser.NOT - 193)) | (1 << (ora2epasParser.NULL - 193)) | (1 << (ora2epasParser.NULLS - 193)) | (1 << (ora2epasParser.NUMBER - 193)) | (1 << (ora2epasParser.NUMERIC - 193)) | (1 << (ora2epasParser.NVARCHAR2 - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (ora2epasParser.OBJECT - 257)) | (1 << (ora2epasParser.OFF - 257)) | (1 << (ora2epasParser.OID - 257)) | (1 << (ora2epasParser.OLD - 257)) | (1 << (ora2epasParser.ONLY - 257)) | (1 << (ora2epasParser.OPEN - 257)) | (1 << (ora2epasParser.ORADATA - 257)) | (1 << (ora2epasParser.ORDINALITY - 257)) | (1 << (ora2epasParser.OSERROR - 257)) | (1 << (ora2epasParser.OUT - 257)) | (1 << (ora2epasParser.OUTER - 257)) | (1 << (ora2epasParser.OVER - 257)) | (1 << (ora2epasParser.OVERRIDING - 257)) | (1 << (ora2epasParser.PACKAGE - 257)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 257)) | (1 << (ora2epasParser.PARAMETERS - 257)) | (1 << (ora2epasParser.PARENT - 257)) | (1 << (ora2epasParser.PARTITION - 257)) | (1 << (ora2epasParser.PASSING - 257)) | (1 << (ora2epasParser.PATH - 257)) | (1 << (ora2epasParser.PIPELINED - 257)) | (1 << (ora2epasParser.PLAN - 257)) | (1 << (ora2epasParser.PLS_INTEGER - 257)) | (1 << (ora2epasParser.POSITIVE - 257)) | (1 << (ora2epasParser.POSITIVEN - 257)) | (1 << (ora2epasParser.PRAGMA - 257)) | (1 << (ora2epasParser.PRECEDING - 257)) | (1 << (ora2epasParser.PRECISION - 257)) | (1 << (ora2epasParser.PRESENT - 257)) | (1 << (ora2epasParser.PRIOR - 257)) | (1 << (ora2epasParser.RAISE - 257)) | (1 << (ora2epasParser.RANGE - 257)) | (1 << (ora2epasParser.RAW - 257)) | (1 << (ora2epasParser.READ - 257)) | (1 << (ora2epasParser.REAL - 257)) | (1 << (ora2epasParser.RECORD - 257)) | (1 << (ora2epasParser.REF - 257)) | (1 << (ora2epasParser.REFERENCE - 257)) | (1 << (ora2epasParser.REFERENCING - 257)) | (1 << (ora2epasParser.REJECT - 257)) | (1 << (ora2epasParser.RENAME - 257)) | (1 << (ora2epasParser.REPLACE - 257)) | (1 << (ora2epasParser.RESPECT - 257)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 257)) | (1 << (ora2epasParser.RESULT - 257)) | (1 << (ora2epasParser.RETURN - 257)) | (1 << (ora2epasParser.RETURNING - 257)) | (1 << (ora2epasParser.REUSE - 257)) | (1 << (ora2epasParser.REVERSE - 257)))) != 0) or ((((_la - 321)) & ~0x3f) == 0 and ((1 << (_la - 321)) & ((1 << (ora2epasParser.RIGHT - 321)) | (1 << (ora2epasParser.ROLLBACK - 321)) | (1 << (ora2epasParser.ROLLUP - 321)) | (1 << (ora2epasParser.ROW - 321)) | (1 << (ora2epasParser.ROWID - 321)) | (1 << (ora2epasParser.ROWS - 321)) | (1 << (ora2epasParser.RULES - 321)) | (1 << (ora2epasParser.SAMPLE - 321)) | (1 << (ora2epasParser.SAVE - 321)) | (1 << (ora2epasParser.SAVEPOINT - 321)) | (1 << (ora2epasParser.SCHEMA - 321)) | (1 << (ora2epasParser.SCHEMACHECK - 321)) | (1 << (ora2epasParser.SCN - 321)) | (1 << (ora2epasParser.SECOND - 321)) | (1 << (ora2epasParser.SEED - 321)) | (1 << (ora2epasParser.SEGMENT - 321)) | (1 << (ora2epasParser.SELF - 321)) | (1 << (ora2epasParser.SEQUENTIAL - 321)) | (1 << (ora2epasParser.SERIALIZABLE - 321)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 321)) | (1 << (ora2epasParser.SERVERERROR - 321)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 321)) | (1 << (ora2epasParser.SET - 321)) | (1 << (ora2epasParser.SETS - 321)) | (1 << (ora2epasParser.SETTINGS - 321)) | (1 << (ora2epasParser.SHOW - 321)) | (1 << (ora2epasParser.SHUTDOWN - 321)) | (1 << (ora2epasParser.SIBLINGS - 321)) | (1 << (ora2epasParser.SIGNTYPE - 321)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 321)) | (1 << (ora2epasParser.SINGLE - 321)) | (1 << (ora2epasParser.SKIP_ - 321)) | (1 << (ora2epasParser.SMALLINT - 321)) | (1 << (ora2epasParser.SNAPSHOT - 321)) | (1 << (ora2epasParser.SOME - 321)) | (1 << (ora2epasParser.SPECIFICATION - 321)) | (1 << (ora2epasParser.SQLDATA - 321)) | (1 << (ora2epasParser.SQLERROR - 321)) | (1 << (ora2epasParser.STANDALONE - 321)) | (1 << (ora2epasParser.STARTUP - 321)) | (1 << (ora2epasParser.STATEMENT - 321)) | (1 << (ora2epasParser.STATEMENT_ID - 321)) | (1 << (ora2epasParser.STATIC - 321)) | (1 << (ora2epasParser.STATISTICS - 321)) | (1 << (ora2epasParser.STRING - 321)) | (1 << (ora2epasParser.SUBMULTISET - 321)) | (1 << (ora2epasParser.SUBPARTITION - 321)) | (1 << (ora2epasParser.SUBSTITUTABLE - 321)) | (1 << (ora2epasParser.SUBTYPE - 321)) | (1 << (ora2epasParser.SUCCESS - 321)) | (1 << (ora2epasParser.SUSPEND - 321)) | (1 << (ora2epasParser.TIME - 321)) | (1 << (ora2epasParser.TIMESTAMP - 321)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 321)))) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 385)) | (1 << (ora2epasParser.TIMEZONE_ABBR - 385)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 385)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 385)) | (1 << (ora2epasParser.TIMEZONE_REGION - 385)) | (1 << (ora2epasParser.TRAILING - 385)) | (1 << (ora2epasParser.TRANSACTION - 385)) | (1 << (ora2epasParser.TRANSLATE - 385)) | (1 << (ora2epasParser.TREAT - 385)) | (1 << (ora2epasParser.TRIGGER - 385)) | (1 << (ora2epasParser.TRUE - 385)) | (1 << (ora2epasParser.TRUNCATE - 385)) | (1 << (ora2epasParser.TYPE - 385)) | (1 << (ora2epasParser.UNBOUNDED - 385)) | (1 << (ora2epasParser.UNDER - 385)) | (1 << (ora2epasParser.UNLIMITED - 385)) | (1 << (ora2epasParser.UNTIL - 385)) | (1 << (ora2epasParser.UPDATED - 385)) | (1 << (ora2epasParser.UPSERT - 385)) | (1 << (ora2epasParser.UROWID - 385)) | (1 << (ora2epasParser.USE - 385)) | (1 << (ora2epasParser.VALIDATE - 385)) | (1 << (ora2epasParser.VALUE - 385)) | (1 << (ora2epasParser.VARIABLE - 385)) | (1 << (ora2epasParser.VARRAY - 385)) | (1 << (ora2epasParser.VARYING - 385)) | (1 << (ora2epasParser.VERSION - 385)) | (1 << (ora2epasParser.VERSIONS - 385)) | (1 << (ora2epasParser.WAIT - 385)) | (1 << (ora2epasParser.WARNING - 385)) | (1 << (ora2epasParser.WELLFORMED - 385)) | (1 << (ora2epasParser.WHENEVER - 385)) | (1 << (ora2epasParser.WHILE - 385)) | (1 << (ora2epasParser.WITHIN - 385)) | (1 << (ora2epasParser.WORK - 385)) | (1 << (ora2epasParser.WRITE - 385)) | (1 << (ora2epasParser.XML - 385)) | (1 << (ora2epasParser.XMLAGG - 385)) | (1 << (ora2epasParser.XMLATTRIBUTES - 385)) | (1 << (ora2epasParser.XMLCAST - 385)) | (1 << (ora2epasParser.XMLCOLATTVAL - 385)) | (1 << (ora2epasParser.XMLELEMENT - 385)) | (1 << (ora2epasParser.XMLEXISTS - 385)) | (1 << (ora2epasParser.XMLFOREST - 385)) | (1 << (ora2epasParser.XMLNAMESPACES - 385)) | (1 << (ora2epasParser.XMLPARSE - 385)) | (1 << (ora2epasParser.XMLPI - 385)) | (1 << (ora2epasParser.XMLQUERY - 385)) | (1 << (ora2epasParser.XMLROOT - 385)) | (1 << (ora2epasParser.XMLSERIALIZE - 385)) | (1 << (ora2epasParser.XMLTABLE - 385)))) != 0) or ((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (ora2epasParser.YEAR - 449)) | (1 << (ora2epasParser.YES - 449)) | (1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 449)) | (1 << (ora2epasParser.ZONE - 449)) | (1 << (ora2epasParser.PREDICTION - 449)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 449)) | (1 << (ora2epasParser.PREDICTION_COST - 449)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 449)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 449)) | (1 << (ora2epasParser.PREDICTION_SET - 449)) | (1 << (ora2epasParser.CUME_DIST - 449)) | (1 << (ora2epasParser.DENSE_RANK - 449)) | (1 << (ora2epasParser.LISTAGG - 449)) | (1 << (ora2epasParser.PERCENT_RANK - 449)) | (1 << (ora2epasParser.PERCENTILE_CONT - 449)) | (1 << (ora2epasParser.PERCENTILE_DISC - 449)) | (1 << (ora2epasParser.RANK - 449)) | (1 << (ora2epasParser.AVG - 449)) | (1 << (ora2epasParser.CORR - 449)) | (1 << (ora2epasParser.COVAR_ - 449)) | (1 << (ora2epasParser.DECODE - 449)) | (1 << (ora2epasParser.LAG - 449)) | (1 << (ora2epasParser.LEAD - 449)) | (1 << (ora2epasParser.MAX - 449)) | (1 << (ora2epasParser.MEDIAN - 449)) | (1 << (ora2epasParser.MIN - 449)) | (1 << (ora2epasParser.NTILE - 449)) | (1 << (ora2epasParser.NVL - 449)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 449)) | (1 << (ora2epasParser.REGR_ - 449)) | (1 << (ora2epasParser.ROUND - 449)) | (1 << (ora2epasParser.ROW_NUMBER - 449)) | (1 << (ora2epasParser.SUBSTR - 449)) | (1 << (ora2epasParser.TO_CHAR - 449)) | (1 << (ora2epasParser.TRIM - 449)) | (1 << (ora2epasParser.SUM - 449)) | (1 << (ora2epasParser.STDDEV - 449)) | (1 << (ora2epasParser.VAR_ - 449)) | (1 << (ora2epasParser.VARIANCE - 449)) | (1 << (ora2epasParser.DBMS_ALERT - 449)) | (1 << (ora2epasParser.DBMS_AQADM - 449)) | (1 << (ora2epasParser.DBMS_AQ - 449)) | (1 << (ora2epasParser.DBMS_CRYPTO - 449)) | (1 << (ora2epasParser.DBMS_JOB - 449)) | (1 << (ora2epasParser.DBMS_LOB - 449)) | (1 << (ora2epasParser.DBMS_LOCK - 449)) | (1 << (ora2epasParser.DBMS_MVIEW - 449)) | (1 << (ora2epasParser.DBMS_OUTPUT - 449)) | (1 << (ora2epasParser.DBMS_PIPE - 449)) | (1 << (ora2epasParser.DBMS_PROFILER - 449)) | (1 << (ora2epasParser.DBMS_RANDOM - 449)) | (1 << (ora2epasParser.DBMS_RLS - 449)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 449)) | (1 << (ora2epasParser.DBMS_SESSION - 449)) | (1 << (ora2epasParser.DBMS_SQL - 449)) | (1 << (ora2epasParser.DBMS_UTILITY - 449)) | (1 << (ora2epasParser.EMP_ADMIN - 449)) | (1 << (ora2epasParser.UTL_ENCODE - 449)) | (1 << (ora2epasParser.UTL_FILE - 449)) | (1 << (ora2epasParser.UTL_HTTP - 449)) | (1 << (ora2epasParser.UTL_MAIL - 449)) | (1 << (ora2epasParser.UTL_RAW - 449)) | (1 << (ora2epasParser.UTL_SMTP - 449)) | (1 << (ora2epasParser.UTL_TCP - 449)))) != 0) or ((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & ((1 << (ora2epasParser.UTL_URL - 513)) | (1 << (ora2epasParser.NATIONAL_CHAR_STRING_LIT - 513)) | (1 << (ora2epasParser.UNSIGNED_INTEGER - 513)) | (1 << (ora2epasParser.APPROXIMATE_NUM_LIT - 513)) | (1 << (ora2epasParser.CHAR_STRING - 513)) | (1 << (ora2epasParser.DELIMITED_ID - 513)) | (1 << (ora2epasParser.LEFT_PAREN - 513)) | (1 << (ora2epasParser.PLUS_SIGN - 513)) | (1 << (ora2epasParser.MINUS_SIGN - 513)) | (1 << (ora2epasParser.BINDVAR - 513)) | (1 << (ora2epasParser.COLON - 513)) | (1 << (ora2epasParser.INTRODUCER - 513)) | (1 << (ora2epasParser.REGULAR_ID - 513)))) != 0):
                self.state = 4974
                self.argument()
                self.state = 4976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.IGNORE or _la==ora2epasParser.RESPECT:
                    self.state = 4975
                    self.respect_or_ignore_nulls()




            self.state = 4987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.COMMA:
                self.state = 4980
                self.match(ora2epasParser.COMMA)
                self.state = 4981
                self.argument()
                self.state = 4983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.IGNORE or _la==ora2epasParser.RESPECT:
                    self.state = 4982
                    self.respect_or_ignore_nulls()


                self.state = 4989
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4990
            self.match(ora2epasParser.RIGHT_PAREN)
            self.state = 4992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,646,self._ctx)
            if la_ == 1:
                self.state = 4991
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_argument_modelingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(ora2epasParser.Column_nameContext,0)


        def USING(self):
            return self.getToken(ora2epasParser.USING, 0)

        def tableview_name(self):
            return self.getTypedRuleContext(ora2epasParser.Tableview_nameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ExpressionContext,i)


        def keep_clause(self):
            return self.getTypedRuleContext(ora2epasParser.Keep_clauseContext,0)


        def numeric(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.NumericContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.NumericContext,i)


        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.NULL)
            else:
                return self.getToken(ora2epasParser.NULL, i)

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Column_aliasContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_function_argument_modeling

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_argument_modeling" ):
                listener.enterFunction_argument_modeling(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_argument_modeling" ):
                listener.exitFunction_argument_modeling(self)




    def function_argument_modeling(self):

        localctx = ora2epasParser.Function_argument_modelingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_function_argument_modeling)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4994
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 4995
            self.column_name()
            self.state = 5008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.COMMA:
                self.state = 4996
                self.match(ora2epasParser.COMMA)
                self.state = 4999
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ora2epasParser.UNSIGNED_INTEGER, ora2epasParser.APPROXIMATE_NUM_LIT]:
                    self.state = 4997
                    self.numeric()
                    pass
                elif token in [ora2epasParser.NULL]:
                    self.state = 4998
                    self.match(ora2epasParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.COMMA:
                    self.state = 5001
                    self.match(ora2epasParser.COMMA)
                    self.state = 5004
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ora2epasParser.UNSIGNED_INTEGER, ora2epasParser.APPROXIMATE_NUM_LIT]:
                        self.state = 5002
                        self.numeric()
                        pass
                    elif token in [ora2epasParser.NULL]:
                        self.state = 5003
                        self.match(ora2epasParser.NULL)
                        pass
                    else:
                        raise NoViableAltException(self)





            self.state = 5010
            self.match(ora2epasParser.USING)
            self.state = 5030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,654,self._ctx)
            if la_ == 1:
                self.state = 5011
                self.tableview_name()
                self.state = 5012
                self.match(ora2epasParser.PERIOD)
                self.state = 5013
                self.match(ora2epasParser.ASTERISK)
                pass

            elif la_ == 2:
                self.state = 5015
                self.match(ora2epasParser.ASTERISK)
                pass

            elif la_ == 3:
                self.state = 5016
                self.expression()
                self.state = 5018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.AS) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)) | (1 << (ora2epasParser.NATIONAL_CHAR_STRING_LIT - 451)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (ora2epasParser.CHAR_STRING - 521)) | (1 << (ora2epasParser.DELIMITED_ID - 521)) | (1 << (ora2epasParser.INTRODUCER - 521)) | (1 << (ora2epasParser.REGULAR_ID - 521)))) != 0):
                    self.state = 5017
                    self.column_alias()


                self.state = 5027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ora2epasParser.COMMA:
                    self.state = 5020
                    self.match(ora2epasParser.COMMA)
                    self.state = 5021
                    self.expression()
                    self.state = 5023
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.AS) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)) | (1 << (ora2epasParser.NATIONAL_CHAR_STRING_LIT - 451)))) != 0) or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & ((1 << (ora2epasParser.CHAR_STRING - 521)) | (1 << (ora2epasParser.DELIMITED_ID - 521)) | (1 << (ora2epasParser.INTRODUCER - 521)) | (1 << (ora2epasParser.REGULAR_ID - 521)))) != 0):
                        self.state = 5022
                        self.column_alias()


                    self.state = 5029
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 5032
            self.match(ora2epasParser.RIGHT_PAREN)
            self.state = 5034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,655,self._ctx)
            if la_ == 1:
                self.state = 5033
                self.keep_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Respect_or_ignore_nullsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(ora2epasParser.NULLS, 0)

        def RESPECT(self):
            return self.getToken(ora2epasParser.RESPECT, 0)

        def IGNORE(self):
            return self.getToken(ora2epasParser.IGNORE, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_respect_or_ignore_nulls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRespect_or_ignore_nulls" ):
                listener.enterRespect_or_ignore_nulls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRespect_or_ignore_nulls" ):
                listener.exitRespect_or_ignore_nulls(self)




    def respect_or_ignore_nulls(self):

        localctx = ora2epasParser.Respect_or_ignore_nullsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_respect_or_ignore_nulls)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5036
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.IGNORE or _la==ora2epasParser.RESPECT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5037
            self.match(ora2epasParser.NULLS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ora2epasParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(ora2epasParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = ora2epasParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5043
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,656,self._ctx)
            if la_ == 1:
                self.state = 5039
                self.identifier()
                self.state = 5040
                self.match(ora2epasParser.EQUALS_OP)
                self.state = 5041
                self.match(ora2epasParser.GREATER_THAN_OP)


            self.state = 5045
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def datatype(self):
            return self.getTypedRuleContext(ora2epasParser.DatatypeContext,0)


        def type_name(self):
            return self.getTypedRuleContext(ora2epasParser.Type_nameContext,0)


        def REF(self):
            return self.getToken(ora2epasParser.REF, 0)

        def PERCENT_ROWTYPE(self):
            return self.getToken(ora2epasParser.PERCENT_ROWTYPE, 0)

        def PERCENT_TYPE(self):
            return self.getToken(ora2epasParser.PERCENT_TYPE, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_spec" ):
                listener.enterType_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_spec" ):
                listener.exitType_spec(self)




    def type_spec(self):

        localctx = ora2epasParser.Type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_type_spec)
        self._la = 0 # Token type
        try:
            self.state = 5055
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,659,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5047
                self.datatype()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5049
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,657,self._ctx)
                if la_ == 1:
                    self.state = 5048
                    self.match(ora2epasParser.REF)


                self.state = 5051
                self.type_name()
                self.state = 5053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.PERCENT_ROWTYPE or _la==ora2epasParser.PERCENT_TYPE:
                    self.state = 5052
                    _la = self._input.LA(1)
                    if not(_la==ora2epasParser.PERCENT_ROWTYPE or _la==ora2epasParser.PERCENT_TYPE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatatypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def native_datatype_element(self):
            return self.getTypedRuleContext(ora2epasParser.Native_datatype_elementContext,0)


        def precision_part(self):
            return self.getTypedRuleContext(ora2epasParser.Precision_partContext,0)


        def WITH(self):
            return self.getToken(ora2epasParser.WITH, 0)

        def TIME(self):
            return self.getToken(ora2epasParser.TIME, 0)

        def ZONE(self):
            return self.getToken(ora2epasParser.ZONE, 0)

        def CHARACTER(self):
            return self.getToken(ora2epasParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(ora2epasParser.SET, 0)

        def char_set_name(self):
            return self.getTypedRuleContext(ora2epasParser.Char_set_nameContext,0)


        def DEFAULT(self):
            return self.getToken(ora2epasParser.DEFAULT, 0)

        def LOCAL(self):
            return self.getToken(ora2epasParser.LOCAL, 0)

        def INTERVAL(self):
            return self.getToken(ora2epasParser.INTERVAL, 0)

        def TO(self):
            return self.getToken(ora2epasParser.TO, 0)

        def YEAR(self):
            return self.getToken(ora2epasParser.YEAR, 0)

        def DAY(self):
            return self.getToken(ora2epasParser.DAY, 0)

        def MONTH(self):
            return self.getToken(ora2epasParser.MONTH, 0)

        def SECOND(self):
            return self.getToken(ora2epasParser.SECOND, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.ExpressionContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_datatype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatatype" ):
                listener.enterDatatype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatatype" ):
                listener.exitDatatype(self)




    def datatype(self):

        localctx = ora2epasParser.DatatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_datatype)
        self._la = 0 # Token type
        try:
            self.state = 5090
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BOOLEAN, ora2epasParser.CHAR, ora2epasParser.CHARACTER, ora2epasParser.CLOB, ora2epasParser.DATE, ora2epasParser.DAY, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DOUBLE, ora2epasParser.FLOAT, ora2epasParser.HOUR, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.LONG, ora2epasParser.MINUTE, ora2epasParser.MONTH, ora2epasParser.NCHAR, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.PLS_INTEGER, ora2epasParser.RAW, ora2epasParser.REAL, ora2epasParser.ROWID, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SMALLINT, ora2epasParser.STRING, ora2epasParser.TIMESTAMP, ora2epasParser.VARCHAR, ora2epasParser.VARCHAR2, ora2epasParser.YEAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5057
                self.native_datatype_element()
                self.state = 5059
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,660,self._ctx)
                if la_ == 1:
                    self.state = 5058
                    self.precision_part()


                self.state = 5072
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,662,self._ctx)
                if la_ == 1:
                    self.state = 5061
                    self.match(ora2epasParser.WITH)
                    self.state = 5063
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ora2epasParser.LOCAL:
                        self.state = 5062
                        self.match(ora2epasParser.LOCAL)


                    self.state = 5065
                    self.match(ora2epasParser.TIME)
                    self.state = 5066
                    self.match(ora2epasParser.ZONE)

                elif la_ == 2:
                    self.state = 5067
                    self.match(ora2epasParser.CHARACTER)
                    self.state = 5068
                    self.match(ora2epasParser.SET)
                    self.state = 5069
                    self.char_set_name()

                elif la_ == 3:
                    self.state = 5070
                    self.match(ora2epasParser.DEFAULT)
                    self.state = 5071
                    self.match(ora2epasParser.COMMA)


                pass
            elif token in [ora2epasParser.INTERVAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5074
                self.match(ora2epasParser.INTERVAL)
                self.state = 5075
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.DAY or _la==ora2epasParser.YEAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.LEFT_PAREN:
                    self.state = 5076
                    self.match(ora2epasParser.LEFT_PAREN)
                    self.state = 5077
                    self.expression()
                    self.state = 5078
                    self.match(ora2epasParser.RIGHT_PAREN)


                self.state = 5082
                self.match(ora2epasParser.TO)
                self.state = 5083
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.MONTH or _la==ora2epasParser.SECOND):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5088
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,664,self._ctx)
                if la_ == 1:
                    self.state = 5084
                    self.match(ora2epasParser.LEFT_PAREN)
                    self.state = 5085
                    self.expression()
                    self.state = 5086
                    self.match(ora2epasParser.RIGHT_PAREN)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Precision_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.NumericContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.NumericContext,i)


        def CHAR(self):
            return self.getToken(ora2epasParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(ora2epasParser.BYTE, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_precision_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecision_part" ):
                listener.enterPrecision_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecision_part" ):
                listener.exitPrecision_part(self)




    def precision_part(self):

        localctx = ora2epasParser.Precision_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_precision_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5092
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 5093
            self.numeric()
            self.state = 5096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.COMMA:
                self.state = 5094
                self.match(ora2epasParser.COMMA)
                self.state = 5095
                self.numeric()


            self.state = 5099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.BYTE or _la==ora2epasParser.CHAR:
                self.state = 5098
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.BYTE or _la==ora2epasParser.CHAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5101
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Native_datatype_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY_INTEGER(self):
            return self.getToken(ora2epasParser.BINARY_INTEGER, 0)

        def PLS_INTEGER(self):
            return self.getToken(ora2epasParser.PLS_INTEGER, 0)

        def SIGNTYPE(self):
            return self.getToken(ora2epasParser.SIGNTYPE, 0)

        def SIMPLE_INTEGER(self):
            return self.getToken(ora2epasParser.SIMPLE_INTEGER, 0)

        def NVARCHAR2(self):
            return self.getToken(ora2epasParser.NVARCHAR2, 0)

        def DEC(self):
            return self.getToken(ora2epasParser.DEC, 0)

        def INTEGER(self):
            return self.getToken(ora2epasParser.INTEGER, 0)

        def INT(self):
            return self.getToken(ora2epasParser.INT, 0)

        def NUMERIC(self):
            return self.getToken(ora2epasParser.NUMERIC, 0)

        def SMALLINT(self):
            return self.getToken(ora2epasParser.SMALLINT, 0)

        def NUMBER(self):
            return self.getToken(ora2epasParser.NUMBER, 0)

        def DECIMAL(self):
            return self.getToken(ora2epasParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(ora2epasParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(ora2epasParser.PRECISION, 0)

        def FLOAT(self):
            return self.getToken(ora2epasParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(ora2epasParser.REAL, 0)

        def NCHAR(self):
            return self.getToken(ora2epasParser.NCHAR, 0)

        def LONG(self):
            return self.getToken(ora2epasParser.LONG, 0)

        def RAW(self):
            return self.getToken(ora2epasParser.RAW, 0)

        def CHAR(self):
            return self.getToken(ora2epasParser.CHAR, 0)

        def CHARACTER(self):
            return self.getToken(ora2epasParser.CHARACTER, 0)

        def VARCHAR2(self):
            return self.getToken(ora2epasParser.VARCHAR2, 0)

        def VARCHAR(self):
            return self.getToken(ora2epasParser.VARCHAR, 0)

        def STRING(self):
            return self.getToken(ora2epasParser.STRING, 0)

        def BOOLEAN(self):
            return self.getToken(ora2epasParser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(ora2epasParser.DATE, 0)

        def ROWID(self):
            return self.getToken(ora2epasParser.ROWID, 0)

        def YEAR(self):
            return self.getToken(ora2epasParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(ora2epasParser.MONTH, 0)

        def DAY(self):
            return self.getToken(ora2epasParser.DAY, 0)

        def HOUR(self):
            return self.getToken(ora2epasParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(ora2epasParser.MINUTE, 0)

        def TIMESTAMP(self):
            return self.getToken(ora2epasParser.TIMESTAMP, 0)

        def BLOB(self):
            return self.getToken(ora2epasParser.BLOB, 0)

        def CLOB(self):
            return self.getToken(ora2epasParser.CLOB, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_native_datatype_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNative_datatype_element" ):
                listener.enterNative_datatype_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNative_datatype_element" ):
                listener.exitNative_datatype_element(self)




    def native_datatype_element(self):

        localctx = ora2epasParser.Native_datatype_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_native_datatype_element)
        self._la = 0 # Token type
        try:
            self.state = 5143
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.BINARY_INTEGER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5103
                self.match(ora2epasParser.BINARY_INTEGER)
                pass
            elif token in [ora2epasParser.PLS_INTEGER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5104
                self.match(ora2epasParser.PLS_INTEGER)
                pass
            elif token in [ora2epasParser.SIGNTYPE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5105
                self.match(ora2epasParser.SIGNTYPE)
                pass
            elif token in [ora2epasParser.SIMPLE_INTEGER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5106
                self.match(ora2epasParser.SIMPLE_INTEGER)
                pass
            elif token in [ora2epasParser.NVARCHAR2]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5107
                self.match(ora2epasParser.NVARCHAR2)
                pass
            elif token in [ora2epasParser.DEC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5108
                self.match(ora2epasParser.DEC)
                pass
            elif token in [ora2epasParser.INTEGER]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5109
                self.match(ora2epasParser.INTEGER)
                pass
            elif token in [ora2epasParser.INT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5110
                self.match(ora2epasParser.INT)
                pass
            elif token in [ora2epasParser.NUMERIC]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5111
                self.match(ora2epasParser.NUMERIC)
                pass
            elif token in [ora2epasParser.SMALLINT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 5112
                self.match(ora2epasParser.SMALLINT)
                pass
            elif token in [ora2epasParser.NUMBER]:
                self.enterOuterAlt(localctx, 11)
                self.state = 5113
                self.match(ora2epasParser.NUMBER)
                pass
            elif token in [ora2epasParser.DECIMAL]:
                self.enterOuterAlt(localctx, 12)
                self.state = 5114
                self.match(ora2epasParser.DECIMAL)
                pass
            elif token in [ora2epasParser.DOUBLE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 5115
                self.match(ora2epasParser.DOUBLE)
                self.state = 5117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.PRECISION:
                    self.state = 5116
                    self.match(ora2epasParser.PRECISION)


                pass
            elif token in [ora2epasParser.FLOAT]:
                self.enterOuterAlt(localctx, 14)
                self.state = 5119
                self.match(ora2epasParser.FLOAT)
                pass
            elif token in [ora2epasParser.REAL]:
                self.enterOuterAlt(localctx, 15)
                self.state = 5120
                self.match(ora2epasParser.REAL)
                pass
            elif token in [ora2epasParser.NCHAR]:
                self.enterOuterAlt(localctx, 16)
                self.state = 5121
                self.match(ora2epasParser.NCHAR)
                pass
            elif token in [ora2epasParser.LONG]:
                self.enterOuterAlt(localctx, 17)
                self.state = 5122
                self.match(ora2epasParser.LONG)
                self.state = 5124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.RAW:
                    self.state = 5123
                    self.match(ora2epasParser.RAW)


                pass
            elif token in [ora2epasParser.CHAR]:
                self.enterOuterAlt(localctx, 18)
                self.state = 5126
                self.match(ora2epasParser.CHAR)
                pass
            elif token in [ora2epasParser.CHARACTER]:
                self.enterOuterAlt(localctx, 19)
                self.state = 5127
                self.match(ora2epasParser.CHARACTER)
                pass
            elif token in [ora2epasParser.VARCHAR2]:
                self.enterOuterAlt(localctx, 20)
                self.state = 5128
                self.match(ora2epasParser.VARCHAR2)
                pass
            elif token in [ora2epasParser.VARCHAR]:
                self.enterOuterAlt(localctx, 21)
                self.state = 5129
                self.match(ora2epasParser.VARCHAR)
                pass
            elif token in [ora2epasParser.STRING]:
                self.enterOuterAlt(localctx, 22)
                self.state = 5130
                self.match(ora2epasParser.STRING)
                pass
            elif token in [ora2epasParser.RAW]:
                self.enterOuterAlt(localctx, 23)
                self.state = 5131
                self.match(ora2epasParser.RAW)
                pass
            elif token in [ora2epasParser.BOOLEAN]:
                self.enterOuterAlt(localctx, 24)
                self.state = 5132
                self.match(ora2epasParser.BOOLEAN)
                pass
            elif token in [ora2epasParser.DATE]:
                self.enterOuterAlt(localctx, 25)
                self.state = 5133
                self.match(ora2epasParser.DATE)
                pass
            elif token in [ora2epasParser.ROWID]:
                self.enterOuterAlt(localctx, 26)
                self.state = 5134
                self.match(ora2epasParser.ROWID)
                pass
            elif token in [ora2epasParser.YEAR]:
                self.enterOuterAlt(localctx, 27)
                self.state = 5135
                self.match(ora2epasParser.YEAR)
                pass
            elif token in [ora2epasParser.MONTH]:
                self.enterOuterAlt(localctx, 28)
                self.state = 5136
                self.match(ora2epasParser.MONTH)
                pass
            elif token in [ora2epasParser.DAY]:
                self.enterOuterAlt(localctx, 29)
                self.state = 5137
                self.match(ora2epasParser.DAY)
                pass
            elif token in [ora2epasParser.HOUR]:
                self.enterOuterAlt(localctx, 30)
                self.state = 5138
                self.match(ora2epasParser.HOUR)
                pass
            elif token in [ora2epasParser.MINUTE]:
                self.enterOuterAlt(localctx, 31)
                self.state = 5139
                self.match(ora2epasParser.MINUTE)
                pass
            elif token in [ora2epasParser.TIMESTAMP]:
                self.enterOuterAlt(localctx, 32)
                self.state = 5140
                self.match(ora2epasParser.TIMESTAMP)
                pass
            elif token in [ora2epasParser.BLOB]:
                self.enterOuterAlt(localctx, 33)
                self.state = 5141
                self.match(ora2epasParser.BLOB)
                pass
            elif token in [ora2epasParser.CLOB]:
                self.enterOuterAlt(localctx, 34)
                self.state = 5142
                self.match(ora2epasParser.CLOB)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bind_variableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINDVAR(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.BINDVAR)
            else:
                return self.getToken(ora2epasParser.BINDVAR, i)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(ora2epasParser.UNSIGNED_INTEGER, i)

        def general_element_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.General_element_partContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.General_element_partContext,i)


        def INDICATOR(self):
            return self.getToken(ora2epasParser.INDICATOR, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_bind_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBind_variable" ):
                listener.enterBind_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBind_variable" ):
                listener.exitBind_variable(self)




    def bind_variable(self):

        localctx = ora2epasParser.Bind_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_bind_variable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5148
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.BINDVAR]:
                self.state = 5145
                self.match(ora2epasParser.BINDVAR)
                pass
            elif token in [ora2epasParser.COLON]:
                self.state = 5146
                self.match(ora2epasParser.COLON)
                self.state = 5147
                self.match(ora2epasParser.UNSIGNED_INTEGER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5158
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,674,self._ctx)
            if la_ == 1:
                self.state = 5151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ora2epasParser.INDICATOR:
                    self.state = 5150
                    self.match(ora2epasParser.INDICATOR)


                self.state = 5156
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ora2epasParser.BINDVAR]:
                    self.state = 5153
                    self.match(ora2epasParser.BINDVAR)
                    pass
                elif token in [ora2epasParser.COLON]:
                    self.state = 5154
                    self.match(ora2epasParser.COLON)
                    self.state = 5155
                    self.match(ora2epasParser.UNSIGNED_INTEGER)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 5164
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,675,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5160
                    self.match(ora2epasParser.PERIOD)
                    self.state = 5161
                    self.general_element_part() 
                self.state = 5166
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,675,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class General_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def general_element_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.General_element_partContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.General_element_partContext,i)


        def getRuleIndex(self):
            return ora2epasParser.RULE_general_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_element" ):
                listener.enterGeneral_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_element" ):
                listener.exitGeneral_element(self)




    def general_element(self):

        localctx = ora2epasParser.General_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_general_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5167
            self.general_element_part()
            self.state = 5172
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,676,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5168
                    self.match(ora2epasParser.PERIOD)
                    self.state = 5169
                    self.general_element_part() 
                self.state = 5174
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,676,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class General_element_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,i)


        def INTRODUCER(self):
            return self.getToken(ora2epasParser.INTRODUCER, 0)

        def char_set_name(self):
            return self.getTypedRuleContext(ora2epasParser.Char_set_nameContext,0)


        def function_argument(self):
            return self.getTypedRuleContext(ora2epasParser.Function_argumentContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_general_element_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_element_part" ):
                listener.enterGeneral_element_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_element_part" ):
                listener.exitGeneral_element_part(self)




    def general_element_part(self):

        localctx = ora2epasParser.General_element_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_general_element_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.INTRODUCER:
                self.state = 5175
                self.match(ora2epasParser.INTRODUCER)
                self.state = 5176
                self.char_set_name()


            self.state = 5179
            self.id_expression()
            self.state = 5184
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,678,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5180
                    self.match(ora2epasParser.PERIOD)
                    self.state = 5181
                    self.id_expression() 
                self.state = 5186
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,678,self._ctx)

            self.state = 5188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,679,self._ctx)
            if la_ == 1:
                self.state = 5187
                self.function_argument()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Id_expressionContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,i)


        def INTRODUCER(self):
            return self.getToken(ora2epasParser.INTRODUCER, 0)

        def char_set_name(self):
            return self.getTypedRuleContext(ora2epasParser.Char_set_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_table_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_element" ):
                listener.enterTable_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_element" ):
                listener.exitTable_element(self)




    def table_element(self):

        localctx = ora2epasParser.Table_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_table_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.INTRODUCER:
                self.state = 5190
                self.match(ora2epasParser.INTRODUCER)
                self.state = 5191
                self.char_set_name()


            self.state = 5194
            self.id_expression()
            self.state = 5199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ora2epasParser.PERIOD:
                self.state = 5195
                self.match(ora2epasParser.PERIOD)
                self.state = 5196
                self.id_expression()
                self.state = 5201
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP(self):
            return self.getToken(ora2epasParser.TIMESTAMP, 0)

        def quoted_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Quoted_stringContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Quoted_stringContext,i)


        def bind_variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ora2epasParser.Bind_variableContext)
            else:
                return self.getTypedRuleContext(ora2epasParser.Bind_variableContext,i)


        def AT(self):
            return self.getToken(ora2epasParser.AT, 0)

        def TIME(self):
            return self.getToken(ora2epasParser.TIME, 0)

        def ZONE(self):
            return self.getToken(ora2epasParser.ZONE, 0)

        def INTERVAL(self):
            return self.getToken(ora2epasParser.INTERVAL, 0)

        def DAY(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.DAY)
            else:
                return self.getToken(ora2epasParser.DAY, i)

        def HOUR(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.HOUR)
            else:
                return self.getToken(ora2epasParser.HOUR, i)

        def MINUTE(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.MINUTE)
            else:
                return self.getToken(ora2epasParser.MINUTE, i)

        def SECOND(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.SECOND)
            else:
                return self.getToken(ora2epasParser.SECOND, i)

        def general_element_part(self):
            return self.getTypedRuleContext(ora2epasParser.General_element_partContext,0)


        def TO(self):
            return self.getToken(ora2epasParser.TO, 0)

        def UNSIGNED_INTEGER(self, i:int=None):
            if i is None:
                return self.getTokens(ora2epasParser.UNSIGNED_INTEGER)
            else:
                return self.getToken(ora2epasParser.UNSIGNED_INTEGER, i)

        def numeric(self):
            return self.getTypedRuleContext(ora2epasParser.NumericContext,0)


        def DATE(self):
            return self.getToken(ora2epasParser.DATE, 0)

        def NULL(self):
            return self.getToken(ora2epasParser.NULL, 0)

        def TRUE(self):
            return self.getToken(ora2epasParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(ora2epasParser.FALSE, 0)

        def DBTIMEZONE(self):
            return self.getToken(ora2epasParser.DBTIMEZONE, 0)

        def SESSIONTIMEZONE(self):
            return self.getToken(ora2epasParser.SESSIONTIMEZONE, 0)

        def MINVALUE(self):
            return self.getToken(ora2epasParser.MINVALUE, 0)

        def MAXVALUE(self):
            return self.getToken(ora2epasParser.MAXVALUE, 0)

        def DEFAULT(self):
            return self.getToken(ora2epasParser.DEFAULT, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = ora2epasParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 5264
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.TIMESTAMP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5202
                self.match(ora2epasParser.TIMESTAMP)
                self.state = 5205
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ora2epasParser.NATIONAL_CHAR_STRING_LIT, ora2epasParser.CHAR_STRING]:
                    self.state = 5203
                    self.quoted_string()
                    pass
                elif token in [ora2epasParser.BINDVAR, ora2epasParser.COLON]:
                    self.state = 5204
                    self.bind_variable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5211
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,683,self._ctx)
                if la_ == 1:
                    self.state = 5207
                    self.match(ora2epasParser.AT)
                    self.state = 5208
                    self.match(ora2epasParser.TIME)
                    self.state = 5209
                    self.match(ora2epasParser.ZONE)
                    self.state = 5210
                    self.quoted_string()


                pass
            elif token in [ora2epasParser.INTERVAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5213
                self.match(ora2epasParser.INTERVAL)
                self.state = 5217
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ora2epasParser.NATIONAL_CHAR_STRING_LIT, ora2epasParser.CHAR_STRING]:
                    self.state = 5214
                    self.quoted_string()
                    pass
                elif token in [ora2epasParser.BINDVAR, ora2epasParser.COLON]:
                    self.state = 5215
                    self.bind_variable()
                    pass
                elif token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.DELIMITED_ID, ora2epasParser.INTRODUCER, ora2epasParser.REGULAR_ID]:
                    self.state = 5216
                    self.general_element_part()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5219
                _la = self._input.LA(1)
                if not(_la==ora2epasParser.DAY or _la==ora2epasParser.HOUR or _la==ora2epasParser.MINUTE or _la==ora2epasParser.SECOND):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5233
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,688,self._ctx)
                if la_ == 1:
                    self.state = 5220
                    self.match(ora2epasParser.LEFT_PAREN)
                    self.state = 5223
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ora2epasParser.UNSIGNED_INTEGER]:
                        self.state = 5221
                        self.match(ora2epasParser.UNSIGNED_INTEGER)
                        pass
                    elif token in [ora2epasParser.BINDVAR, ora2epasParser.COLON]:
                        self.state = 5222
                        self.bind_variable()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 5230
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==ora2epasParser.COMMA:
                        self.state = 5225
                        self.match(ora2epasParser.COMMA)
                        self.state = 5228
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [ora2epasParser.UNSIGNED_INTEGER]:
                            self.state = 5226
                            self.match(ora2epasParser.UNSIGNED_INTEGER)
                            pass
                        elif token in [ora2epasParser.BINDVAR, ora2epasParser.COLON]:
                            self.state = 5227
                            self.bind_variable()
                            pass
                        else:
                            raise NoViableAltException(self)



                    self.state = 5232
                    self.match(ora2epasParser.RIGHT_PAREN)


                self.state = 5250
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,692,self._ctx)
                if la_ == 1:
                    self.state = 5235
                    self.match(ora2epasParser.TO)
                    self.state = 5248
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ora2epasParser.DAY]:
                        self.state = 5236
                        self.match(ora2epasParser.DAY)
                        pass
                    elif token in [ora2epasParser.HOUR]:
                        self.state = 5237
                        self.match(ora2epasParser.HOUR)
                        pass
                    elif token in [ora2epasParser.MINUTE]:
                        self.state = 5238
                        self.match(ora2epasParser.MINUTE)
                        pass
                    elif token in [ora2epasParser.SECOND]:
                        self.state = 5239
                        self.match(ora2epasParser.SECOND)
                        self.state = 5246
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,690,self._ctx)
                        if la_ == 1:
                            self.state = 5240
                            self.match(ora2epasParser.LEFT_PAREN)
                            self.state = 5243
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [ora2epasParser.UNSIGNED_INTEGER]:
                                self.state = 5241
                                self.match(ora2epasParser.UNSIGNED_INTEGER)
                                pass
                            elif token in [ora2epasParser.BINDVAR, ora2epasParser.COLON]:
                                self.state = 5242
                                self.bind_variable()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 5245
                            self.match(ora2epasParser.RIGHT_PAREN)


                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [ora2epasParser.UNSIGNED_INTEGER, ora2epasParser.APPROXIMATE_NUM_LIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5252
                self.numeric()
                pass
            elif token in [ora2epasParser.DATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5253
                self.match(ora2epasParser.DATE)
                self.state = 5254
                self.quoted_string()
                pass
            elif token in [ora2epasParser.NATIONAL_CHAR_STRING_LIT, ora2epasParser.CHAR_STRING]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5255
                self.quoted_string()
                pass
            elif token in [ora2epasParser.NULL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5256
                self.match(ora2epasParser.NULL)
                pass
            elif token in [ora2epasParser.TRUE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5257
                self.match(ora2epasParser.TRUE)
                pass
            elif token in [ora2epasParser.FALSE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5258
                self.match(ora2epasParser.FALSE)
                pass
            elif token in [ora2epasParser.DBTIMEZONE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5259
                self.match(ora2epasParser.DBTIMEZONE)
                pass
            elif token in [ora2epasParser.SESSIONTIMEZONE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 5260
                self.match(ora2epasParser.SESSIONTIMEZONE)
                pass
            elif token in [ora2epasParser.MINVALUE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 5261
                self.match(ora2epasParser.MINVALUE)
                pass
            elif token in [ora2epasParser.MAXVALUE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 5262
                self.match(ora2epasParser.MAXVALUE)
                pass
            elif token in [ora2epasParser.DEFAULT]:
                self.enterOuterAlt(localctx, 13)
                self.state = 5263
                self.match(ora2epasParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(ora2epasParser.UNSIGNED_INTEGER, 0)

        def APPROXIMATE_NUM_LIT(self):
            return self.getToken(ora2epasParser.APPROXIMATE_NUM_LIT, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_numeric

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric" ):
                listener.enterNumeric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric" ):
                listener.exitNumeric(self)




    def numeric(self):

        localctx = ora2epasParser.NumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_numeric)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5266
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.UNSIGNED_INTEGER or _la==ora2epasParser.APPROXIMATE_NUM_LIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Numeric_negativeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SIGN(self):
            return self.getToken(ora2epasParser.MINUS_SIGN, 0)

        def numeric(self):
            return self.getTypedRuleContext(ora2epasParser.NumericContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_numeric_negative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_negative" ):
                listener.enterNumeric_negative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_negative" ):
                listener.exitNumeric_negative(self)




    def numeric_negative(self):

        localctx = ora2epasParser.Numeric_negativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_numeric_negative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5268
            self.match(ora2epasParser.MINUS_SIGN)
            self.state = 5269
            self.numeric()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Quoted_stringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_STRING(self):
            return self.getToken(ora2epasParser.CHAR_STRING, 0)

        def NATIONAL_CHAR_STRING_LIT(self):
            return self.getToken(ora2epasParser.NATIONAL_CHAR_STRING_LIT, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_quoted_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuoted_string" ):
                listener.enterQuoted_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuoted_string" ):
                listener.exitQuoted_string(self)




    def quoted_string(self):

        localctx = ora2epasParser.Quoted_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_quoted_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5271
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.NATIONAL_CHAR_STRING_LIT or _la==ora2epasParser.CHAR_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_expression(self):
            return self.getTypedRuleContext(ora2epasParser.Id_expressionContext,0)


        def INTRODUCER(self):
            return self.getToken(ora2epasParser.INTRODUCER, 0)

        def char_set_name(self):
            return self.getTypedRuleContext(ora2epasParser.Char_set_nameContext,0)


        def getRuleIndex(self):
            return ora2epasParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = ora2epasParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ora2epasParser.INTRODUCER:
                self.state = 5273
                self.match(ora2epasParser.INTRODUCER)
                self.state = 5274
                self.char_set_name()


            self.state = 5277
            self.id_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Id_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_id(self):
            return self.getTypedRuleContext(ora2epasParser.Regular_idContext,0)


        def DELIMITED_ID(self):
            return self.getToken(ora2epasParser.DELIMITED_ID, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_id_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_expression" ):
                listener.enterId_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_expression" ):
                listener.exitId_expression(self)




    def id_expression(self):

        localctx = ora2epasParser.Id_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_id_expression)
        try:
            self.state = 5281
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.A_LETTER, ora2epasParser.ADD, ora2epasParser.AFTER, ora2epasParser.AGENT, ora2epasParser.AGGREGATE, ora2epasParser.ANALYZE, ora2epasParser.ARRAY, ora2epasParser.ASSOCIATE, ora2epasParser.AT, ora2epasParser.ATTRIBUTE, ora2epasParser.AUDIT, ora2epasParser.AUTHID, ora2epasParser.AUTO, ora2epasParser.AUTOMATIC, ora2epasParser.AUTONOMOUS_TRANSACTION, ora2epasParser.BATCH, ora2epasParser.BEFORE, ora2epasParser.BINARY_INTEGER, ora2epasParser.BLOB, ora2epasParser.BLOCK, ora2epasParser.BODY, ora2epasParser.BOOLEAN, ora2epasParser.BOTH, ora2epasParser.BULK, ora2epasParser.BYTE, ora2epasParser.C_LETTER, ora2epasParser.CALL, ora2epasParser.CANONICAL, ora2epasParser.CASCADE, ora2epasParser.CAST, ora2epasParser.CHAR, ora2epasParser.CHAR_CS, ora2epasParser.CHARACTER, ora2epasParser.CHR, ora2epasParser.CLOB, ora2epasParser.CLOSE, ora2epasParser.CLUSTER, ora2epasParser.COLLECT, ora2epasParser.COLUMNS, ora2epasParser.COMMENT, ora2epasParser.COMMIT, ora2epasParser.COMMITTED, ora2epasParser.COMPATIBILITY, ora2epasParser.COMPILE, ora2epasParser.COMPOUND, ora2epasParser.CONSTANT, ora2epasParser.CONSTRAINT, ora2epasParser.CONSTRAINTS, ora2epasParser.CONSTRUCTOR, ora2epasParser.CONTENT, ora2epasParser.CONTEXT, ora2epasParser.CONTINUE, ora2epasParser.CONVERT, ora2epasParser.CORRUPT_XID, ora2epasParser.CORRUPT_XID_ALL, ora2epasParser.COST, ora2epasParser.COUNT, ora2epasParser.CROSS, ora2epasParser.CUBE, ora2epasParser.CURRENT_USER, ora2epasParser.CURSOR, ora2epasParser.CUSTOMDATUM, ora2epasParser.CYCLE, ora2epasParser.DATA, ora2epasParser.DATABASE, ora2epasParser.DAY, ora2epasParser.DB_ROLE_CHANGE, ora2epasParser.DBTIMEZONE, ora2epasParser.DDL, ora2epasParser.DEBUG, ora2epasParser.DEC, ora2epasParser.DECIMAL, ora2epasParser.DECOMPOSE, ora2epasParser.DECREMENT, ora2epasParser.DEFAULTS, ora2epasParser.DEFERRED, ora2epasParser.DEFINER, ora2epasParser.DETERMINISTIC, ora2epasParser.DIMENSION, ora2epasParser.DISABLE, ora2epasParser.DISASSOCIATE, ora2epasParser.DOCUMENT, ora2epasParser.DOUBLE, ora2epasParser.DSINTERVAL_UNCONSTRAINED, ora2epasParser.EACH, ora2epasParser.ELEMENT, ora2epasParser.EMPTY, ora2epasParser.ENABLE, ora2epasParser.ENCODING, ora2epasParser.ENTITYESCAPING, ora2epasParser.ERR, ora2epasParser.ERRORS, ora2epasParser.ESCAPE, ora2epasParser.EVALNAME, ora2epasParser.EXCEPTION, ora2epasParser.EXCEPTION_INIT, ora2epasParser.EXCEPTIONS, ora2epasParser.EXCLUDE, ora2epasParser.EXECUTE, ora2epasParser.EXIT, ora2epasParser.EXPLAIN, ora2epasParser.EXTERNAL, ora2epasParser.EXTRACT, ora2epasParser.FAILURE, ora2epasParser.FINAL, ora2epasParser.FIRST, ora2epasParser.FIRST_VALUE, ora2epasParser.FLOAT, ora2epasParser.FOLLOWING, ora2epasParser.FOLLOWS, ora2epasParser.FORALL, ora2epasParser.FORCE, ora2epasParser.FULL, ora2epasParser.FUNCTION, ora2epasParser.GROUPING, ora2epasParser.HASH, ora2epasParser.HIDE, ora2epasParser.HOUR, ora2epasParser.IGNORE, ora2epasParser.IMMEDIATE, ora2epasParser.INCLUDE, ora2epasParser.INCLUDING, ora2epasParser.INCREMENT, ora2epasParser.INDENT, ora2epasParser.INDEXED, ora2epasParser.INDICATOR, ora2epasParser.INDICES, ora2epasParser.INFINITE, ora2epasParser.INLINE, ora2epasParser.INNER, ora2epasParser.INOUT, ora2epasParser.INSTANTIABLE, ora2epasParser.INSTEAD, ora2epasParser.INT, ora2epasParser.INTEGER, ora2epasParser.INTERVAL, ora2epasParser.INVALIDATE, ora2epasParser.ISOLATION, ora2epasParser.ITERATE, ora2epasParser.JAVA, ora2epasParser.JOIN, ora2epasParser.KEEP, ora2epasParser.LANGUAGE, ora2epasParser.LAST, ora2epasParser.LAST_VALUE, ora2epasParser.LEADING, ora2epasParser.LEFT, ora2epasParser.LEVEL, ora2epasParser.LIBRARY, ora2epasParser.LIKE2, ora2epasParser.LIKE4, ora2epasParser.LIKEC, ora2epasParser.LIMIT, ora2epasParser.LOCAL, ora2epasParser.LOCKED, ora2epasParser.LOG, ora2epasParser.LOGOFF, ora2epasParser.LOGON, ora2epasParser.LONG, ora2epasParser.LOOP, ora2epasParser.MAIN, ora2epasParser.MAP, ora2epasParser.MATCHED, ora2epasParser.MAXVALUE, ora2epasParser.MEASURES, ora2epasParser.MEMBER, ora2epasParser.MERGE, ora2epasParser.MINUTE, ora2epasParser.MINVALUE, ora2epasParser.MLSLABEL, ora2epasParser.MODEL, ora2epasParser.MODIFY, ora2epasParser.MONTH, ora2epasParser.MULTISET, ora2epasParser.NAME, ora2epasParser.NAN, ora2epasParser.NATURAL, ora2epasParser.NATURALN, ora2epasParser.NAV, ora2epasParser.NCHAR, ora2epasParser.NCHAR_CS, ora2epasParser.NCLOB, ora2epasParser.NESTED, ora2epasParser.NEW, ora2epasParser.NO, ora2epasParser.NOAUDIT, ora2epasParser.NOCOPY, ora2epasParser.NOCYCLE, ora2epasParser.NOENTITYESCAPING, ora2epasParser.NONE, ora2epasParser.NOSCHEMACHECK, ora2epasParser.NULLS, ora2epasParser.NUMBER, ora2epasParser.NUMERIC, ora2epasParser.NVARCHAR2, ora2epasParser.OBJECT, ora2epasParser.OFF, ora2epasParser.OID, ora2epasParser.OLD, ora2epasParser.ONLY, ora2epasParser.OPEN, ora2epasParser.ORADATA, ora2epasParser.ORDINALITY, ora2epasParser.OSERROR, ora2epasParser.OUT, ora2epasParser.OUTER, ora2epasParser.OVER, ora2epasParser.OVERRIDING, ora2epasParser.PACKAGE, ora2epasParser.PARALLEL_ENABLE, ora2epasParser.PARAMETERS, ora2epasParser.PARENT, ora2epasParser.PARTITION, ora2epasParser.PASSING, ora2epasParser.PATH, ora2epasParser.PIPELINED, ora2epasParser.PLAN, ora2epasParser.PLS_INTEGER, ora2epasParser.POSITIVE, ora2epasParser.POSITIVEN, ora2epasParser.PRAGMA, ora2epasParser.PRECEDING, ora2epasParser.PRECISION, ora2epasParser.PRESENT, ora2epasParser.RAISE, ora2epasParser.RANGE, ora2epasParser.RAW, ora2epasParser.READ, ora2epasParser.REAL, ora2epasParser.RECORD, ora2epasParser.REF, ora2epasParser.REFERENCE, ora2epasParser.REFERENCING, ora2epasParser.REJECT, ora2epasParser.RENAME, ora2epasParser.REPLACE, ora2epasParser.RESPECT, ora2epasParser.RESTRICT_REFERENCES, ora2epasParser.RESULT, ora2epasParser.RETURN, ora2epasParser.RETURNING, ora2epasParser.REUSE, ora2epasParser.REVERSE, ora2epasParser.RIGHT, ora2epasParser.ROLLBACK, ora2epasParser.ROLLUP, ora2epasParser.ROW, ora2epasParser.ROWID, ora2epasParser.ROWS, ora2epasParser.RULES, ora2epasParser.SAMPLE, ora2epasParser.SAVE, ora2epasParser.SAVEPOINT, ora2epasParser.SCHEMA, ora2epasParser.SCHEMACHECK, ora2epasParser.SCN, ora2epasParser.SECOND, ora2epasParser.SEED, ora2epasParser.SEGMENT, ora2epasParser.SELF, ora2epasParser.SEQUENTIAL, ora2epasParser.SERIALIZABLE, ora2epasParser.SERIALLY_REUSABLE, ora2epasParser.SERVERERROR, ora2epasParser.SESSIONTIMEZONE, ora2epasParser.SET, ora2epasParser.SETS, ora2epasParser.SETTINGS, ora2epasParser.SHOW, ora2epasParser.SHUTDOWN, ora2epasParser.SIBLINGS, ora2epasParser.SIGNTYPE, ora2epasParser.SIMPLE_INTEGER, ora2epasParser.SINGLE, ora2epasParser.SKIP_, ora2epasParser.SMALLINT, ora2epasParser.SNAPSHOT, ora2epasParser.SOME, ora2epasParser.SPECIFICATION, ora2epasParser.SQLDATA, ora2epasParser.SQLERROR, ora2epasParser.STANDALONE, ora2epasParser.STARTUP, ora2epasParser.STATEMENT, ora2epasParser.STATEMENT_ID, ora2epasParser.STATIC, ora2epasParser.STATISTICS, ora2epasParser.STRING, ora2epasParser.SUBMULTISET, ora2epasParser.SUBPARTITION, ora2epasParser.SUBSTITUTABLE, ora2epasParser.SUBTYPE, ora2epasParser.SUCCESS, ora2epasParser.SUSPEND, ora2epasParser.TIME, ora2epasParser.TIMESTAMP, ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, ora2epasParser.TIMESTAMP_UNCONSTRAINED, ora2epasParser.TIMEZONE_ABBR, ora2epasParser.TIMEZONE_HOUR, ora2epasParser.TIMEZONE_MINUTE, ora2epasParser.TIMEZONE_REGION, ora2epasParser.TRAILING, ora2epasParser.TRANSACTION, ora2epasParser.TRANSLATE, ora2epasParser.TREAT, ora2epasParser.TRIGGER, ora2epasParser.TRUNCATE, ora2epasParser.TYPE, ora2epasParser.UNBOUNDED, ora2epasParser.UNDER, ora2epasParser.UNLIMITED, ora2epasParser.UNTIL, ora2epasParser.UPDATED, ora2epasParser.UPSERT, ora2epasParser.UROWID, ora2epasParser.USE, ora2epasParser.VALIDATE, ora2epasParser.VALUE, ora2epasParser.VARIABLE, ora2epasParser.VARRAY, ora2epasParser.VARYING, ora2epasParser.VERSION, ora2epasParser.VERSIONS, ora2epasParser.WAIT, ora2epasParser.WARNING, ora2epasParser.WELLFORMED, ora2epasParser.WHENEVER, ora2epasParser.WHILE, ora2epasParser.WITHIN, ora2epasParser.WORK, ora2epasParser.WRITE, ora2epasParser.XML, ora2epasParser.XMLAGG, ora2epasParser.XMLATTRIBUTES, ora2epasParser.XMLCAST, ora2epasParser.XMLCOLATTVAL, ora2epasParser.XMLELEMENT, ora2epasParser.XMLEXISTS, ora2epasParser.XMLFOREST, ora2epasParser.XMLNAMESPACES, ora2epasParser.XMLPARSE, ora2epasParser.XMLPI, ora2epasParser.XMLQUERY, ora2epasParser.XMLROOT, ora2epasParser.XMLSERIALIZE, ora2epasParser.XMLTABLE, ora2epasParser.YEAR, ora2epasParser.YES, ora2epasParser.YMINTERVAL_UNCONSTRAINED, ora2epasParser.ZONE, ora2epasParser.PREDICTION, ora2epasParser.PREDICTION_BOUNDS, ora2epasParser.PREDICTION_COST, ora2epasParser.PREDICTION_DETAILS, ora2epasParser.PREDICTION_PROBABILITY, ora2epasParser.PREDICTION_SET, ora2epasParser.CUME_DIST, ora2epasParser.DENSE_RANK, ora2epasParser.LISTAGG, ora2epasParser.PERCENT_RANK, ora2epasParser.PERCENTILE_CONT, ora2epasParser.PERCENTILE_DISC, ora2epasParser.RANK, ora2epasParser.AVG, ora2epasParser.CORR, ora2epasParser.COVAR_, ora2epasParser.LAG, ora2epasParser.LEAD, ora2epasParser.MAX, ora2epasParser.MEDIAN, ora2epasParser.MIN, ora2epasParser.NTILE, ora2epasParser.RATIO_TO_REPORT, ora2epasParser.REGR_, ora2epasParser.ROW_NUMBER, ora2epasParser.TRIM, ora2epasParser.SUM, ora2epasParser.STDDEV, ora2epasParser.VAR_, ora2epasParser.VARIANCE, ora2epasParser.DBMS_ALERT, ora2epasParser.DBMS_AQADM, ora2epasParser.DBMS_AQ, ora2epasParser.DBMS_CRYPTO, ora2epasParser.DBMS_JOB, ora2epasParser.DBMS_LOB, ora2epasParser.DBMS_LOCK, ora2epasParser.DBMS_MVIEW, ora2epasParser.DBMS_OUTPUT, ora2epasParser.DBMS_PIPE, ora2epasParser.DBMS_PROFILER, ora2epasParser.DBMS_RANDOM, ora2epasParser.DBMS_RLS, ora2epasParser.DBMS_SCHEDULER, ora2epasParser.DBMS_SESSION, ora2epasParser.DBMS_SQL, ora2epasParser.DBMS_UTILITY, ora2epasParser.EMP_ADMIN, ora2epasParser.UTL_ENCODE, ora2epasParser.UTL_FILE, ora2epasParser.UTL_HTTP, ora2epasParser.UTL_MAIL, ora2epasParser.UTL_RAW, ora2epasParser.UTL_SMTP, ora2epasParser.UTL_TCP, ora2epasParser.UTL_URL, ora2epasParser.REGULAR_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5279
                self.regular_id()
                pass
            elif token in [ora2epasParser.DELIMITED_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5280
                self.match(ora2epasParser.DELIMITED_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_equal_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_EQUAL_OP(self):
            return self.getToken(ora2epasParser.NOT_EQUAL_OP, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_not_equal_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_equal_op" ):
                listener.enterNot_equal_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_equal_op" ):
                listener.exitNot_equal_op(self)




    def not_equal_op(self):

        localctx = ora2epasParser.Not_equal_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_not_equal_op)
        try:
            self.state = 5290
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.NOT_EQUAL_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5283
                self.match(ora2epasParser.NOT_EQUAL_OP)
                pass
            elif token in [ora2epasParser.LESS_THAN_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5284
                self.match(ora2epasParser.LESS_THAN_OP)
                self.state = 5285
                self.match(ora2epasParser.GREATER_THAN_OP)
                pass
            elif token in [ora2epasParser.EXCLAMATION_OPERATOR_PART]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5286
                self.match(ora2epasParser.EXCLAMATION_OPERATOR_PART)
                self.state = 5287
                self.match(ora2epasParser.EQUALS_OP)
                pass
            elif token in [ora2epasParser.CARRET_OPERATOR_PART]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5288
                self.match(ora2epasParser.CARRET_OPERATOR_PART)
                self.state = 5289
                self.match(ora2epasParser.EQUALS_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Greater_than_or_equals_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ora2epasParser.RULE_greater_than_or_equals_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGreater_than_or_equals_op" ):
                listener.enterGreater_than_or_equals_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGreater_than_or_equals_op" ):
                listener.exitGreater_than_or_equals_op(self)




    def greater_than_or_equals_op(self):

        localctx = ora2epasParser.Greater_than_or_equals_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_greater_than_or_equals_op)
        try:
            self.state = 5295
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.GREATER_THAN_OR_EQUALS_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5292
                self.match(ora2epasParser.GREATER_THAN_OR_EQUALS_OP)
                pass
            elif token in [ora2epasParser.GREATER_THAN_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5293
                self.match(ora2epasParser.GREATER_THAN_OP)
                self.state = 5294
                self.match(ora2epasParser.EQUALS_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Less_than_or_equals_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ora2epasParser.RULE_less_than_or_equals_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLess_than_or_equals_op" ):
                listener.enterLess_than_or_equals_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLess_than_or_equals_op" ):
                listener.exitLess_than_or_equals_op(self)




    def less_than_or_equals_op(self):

        localctx = ora2epasParser.Less_than_or_equals_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_less_than_or_equals_op)
        try:
            self.state = 5300
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.LESS_THAN_OR_EQUALS_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5297
                self.match(ora2epasParser.LESS_THAN_OR_EQUALS_OP)
                pass
            elif token in [ora2epasParser.LESS_THAN_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5298
                self.match(ora2epasParser.LESS_THAN_OP)
                self.state = 5299
                self.match(ora2epasParser.EQUALS_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Concatenation_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ora2epasParser.RULE_concatenation_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation_op" ):
                listener.enterConcatenation_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation_op" ):
                listener.exitConcatenation_op(self)




    def concatenation_op(self):

        localctx = ora2epasParser.Concatenation_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_concatenation_op)
        try:
            self.state = 5305
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ora2epasParser.CONCATENATION_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5302
                self.match(ora2epasParser.CONCATENATION_OP)
                pass
            elif token in [ora2epasParser.VERTICAL_BAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5303
                self.match(ora2epasParser.VERTICAL_BAR)
                self.state = 5304
                self.match(ora2epasParser.VERTICAL_BAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Outer_join_signContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ora2epasParser.RULE_outer_join_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuter_join_sign" ):
                listener.enterOuter_join_sign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuter_join_sign" ):
                listener.exitOuter_join_sign(self)




    def outer_join_sign(self):

        localctx = ora2epasParser.Outer_join_signContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_outer_join_sign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5307
            self.match(ora2epasParser.LEFT_PAREN)
            self.state = 5308
            self.match(ora2epasParser.PLUS_SIGN)
            self.state = 5309
            self.match(ora2epasParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Regular_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REGULAR_ID(self):
            return self.getToken(ora2epasParser.REGULAR_ID, 0)

        def A_LETTER(self):
            return self.getToken(ora2epasParser.A_LETTER, 0)

        def ADD(self):
            return self.getToken(ora2epasParser.ADD, 0)

        def AFTER(self):
            return self.getToken(ora2epasParser.AFTER, 0)

        def AGENT(self):
            return self.getToken(ora2epasParser.AGENT, 0)

        def AGGREGATE(self):
            return self.getToken(ora2epasParser.AGGREGATE, 0)

        def ANALYZE(self):
            return self.getToken(ora2epasParser.ANALYZE, 0)

        def ARRAY(self):
            return self.getToken(ora2epasParser.ARRAY, 0)

        def ASSOCIATE(self):
            return self.getToken(ora2epasParser.ASSOCIATE, 0)

        def AT(self):
            return self.getToken(ora2epasParser.AT, 0)

        def ATTRIBUTE(self):
            return self.getToken(ora2epasParser.ATTRIBUTE, 0)

        def AUDIT(self):
            return self.getToken(ora2epasParser.AUDIT, 0)

        def AUTHID(self):
            return self.getToken(ora2epasParser.AUTHID, 0)

        def AUTO(self):
            return self.getToken(ora2epasParser.AUTO, 0)

        def AUTOMATIC(self):
            return self.getToken(ora2epasParser.AUTOMATIC, 0)

        def AUTONOMOUS_TRANSACTION(self):
            return self.getToken(ora2epasParser.AUTONOMOUS_TRANSACTION, 0)

        def BATCH(self):
            return self.getToken(ora2epasParser.BATCH, 0)

        def BEFORE(self):
            return self.getToken(ora2epasParser.BEFORE, 0)

        def BINARY_INTEGER(self):
            return self.getToken(ora2epasParser.BINARY_INTEGER, 0)

        def BLOB(self):
            return self.getToken(ora2epasParser.BLOB, 0)

        def BLOCK(self):
            return self.getToken(ora2epasParser.BLOCK, 0)

        def BODY(self):
            return self.getToken(ora2epasParser.BODY, 0)

        def BOOLEAN(self):
            return self.getToken(ora2epasParser.BOOLEAN, 0)

        def BOTH(self):
            return self.getToken(ora2epasParser.BOTH, 0)

        def BULK(self):
            return self.getToken(ora2epasParser.BULK, 0)

        def BYTE(self):
            return self.getToken(ora2epasParser.BYTE, 0)

        def C_LETTER(self):
            return self.getToken(ora2epasParser.C_LETTER, 0)

        def CALL(self):
            return self.getToken(ora2epasParser.CALL, 0)

        def CANONICAL(self):
            return self.getToken(ora2epasParser.CANONICAL, 0)

        def CASCADE(self):
            return self.getToken(ora2epasParser.CASCADE, 0)

        def CAST(self):
            return self.getToken(ora2epasParser.CAST, 0)

        def CHAR(self):
            return self.getToken(ora2epasParser.CHAR, 0)

        def CHAR_CS(self):
            return self.getToken(ora2epasParser.CHAR_CS, 0)

        def CHARACTER(self):
            return self.getToken(ora2epasParser.CHARACTER, 0)

        def CHR(self):
            return self.getToken(ora2epasParser.CHR, 0)

        def CLOB(self):
            return self.getToken(ora2epasParser.CLOB, 0)

        def CLOSE(self):
            return self.getToken(ora2epasParser.CLOSE, 0)

        def CLUSTER(self):
            return self.getToken(ora2epasParser.CLUSTER, 0)

        def COLLECT(self):
            return self.getToken(ora2epasParser.COLLECT, 0)

        def COLUMNS(self):
            return self.getToken(ora2epasParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(ora2epasParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(ora2epasParser.COMMIT, 0)

        def COMMITTED(self):
            return self.getToken(ora2epasParser.COMMITTED, 0)

        def COMPATIBILITY(self):
            return self.getToken(ora2epasParser.COMPATIBILITY, 0)

        def COMPILE(self):
            return self.getToken(ora2epasParser.COMPILE, 0)

        def COMPOUND(self):
            return self.getToken(ora2epasParser.COMPOUND, 0)

        def CONSTANT(self):
            return self.getToken(ora2epasParser.CONSTANT, 0)

        def CONSTRAINT(self):
            return self.getToken(ora2epasParser.CONSTRAINT, 0)

        def CONSTRAINTS(self):
            return self.getToken(ora2epasParser.CONSTRAINTS, 0)

        def CONSTRUCTOR(self):
            return self.getToken(ora2epasParser.CONSTRUCTOR, 0)

        def CONTENT(self):
            return self.getToken(ora2epasParser.CONTENT, 0)

        def CONTEXT(self):
            return self.getToken(ora2epasParser.CONTEXT, 0)

        def CONTINUE(self):
            return self.getToken(ora2epasParser.CONTINUE, 0)

        def CONVERT(self):
            return self.getToken(ora2epasParser.CONVERT, 0)

        def CORRUPT_XID(self):
            return self.getToken(ora2epasParser.CORRUPT_XID, 0)

        def CORRUPT_XID_ALL(self):
            return self.getToken(ora2epasParser.CORRUPT_XID_ALL, 0)

        def COST(self):
            return self.getToken(ora2epasParser.COST, 0)

        def COUNT(self):
            return self.getToken(ora2epasParser.COUNT, 0)

        def CROSS(self):
            return self.getToken(ora2epasParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(ora2epasParser.CUBE, 0)

        def CURRENT_USER(self):
            return self.getToken(ora2epasParser.CURRENT_USER, 0)

        def CURSOR(self):
            return self.getToken(ora2epasParser.CURSOR, 0)

        def CUSTOMDATUM(self):
            return self.getToken(ora2epasParser.CUSTOMDATUM, 0)

        def CYCLE(self):
            return self.getToken(ora2epasParser.CYCLE, 0)

        def DATA(self):
            return self.getToken(ora2epasParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(ora2epasParser.DATABASE, 0)

        def DAY(self):
            return self.getToken(ora2epasParser.DAY, 0)

        def DB_ROLE_CHANGE(self):
            return self.getToken(ora2epasParser.DB_ROLE_CHANGE, 0)

        def DBTIMEZONE(self):
            return self.getToken(ora2epasParser.DBTIMEZONE, 0)

        def DDL(self):
            return self.getToken(ora2epasParser.DDL, 0)

        def DEBUG(self):
            return self.getToken(ora2epasParser.DEBUG, 0)

        def DEC(self):
            return self.getToken(ora2epasParser.DEC, 0)

        def DECIMAL(self):
            return self.getToken(ora2epasParser.DECIMAL, 0)

        def DECOMPOSE(self):
            return self.getToken(ora2epasParser.DECOMPOSE, 0)

        def DECREMENT(self):
            return self.getToken(ora2epasParser.DECREMENT, 0)

        def DEFAULTS(self):
            return self.getToken(ora2epasParser.DEFAULTS, 0)

        def DEFERRED(self):
            return self.getToken(ora2epasParser.DEFERRED, 0)

        def DEFINER(self):
            return self.getToken(ora2epasParser.DEFINER, 0)

        def DETERMINISTIC(self):
            return self.getToken(ora2epasParser.DETERMINISTIC, 0)

        def DIMENSION(self):
            return self.getToken(ora2epasParser.DIMENSION, 0)

        def DISABLE(self):
            return self.getToken(ora2epasParser.DISABLE, 0)

        def DISASSOCIATE(self):
            return self.getToken(ora2epasParser.DISASSOCIATE, 0)

        def DOCUMENT(self):
            return self.getToken(ora2epasParser.DOCUMENT, 0)

        def DOUBLE(self):
            return self.getToken(ora2epasParser.DOUBLE, 0)

        def DSINTERVAL_UNCONSTRAINED(self):
            return self.getToken(ora2epasParser.DSINTERVAL_UNCONSTRAINED, 0)

        def EACH(self):
            return self.getToken(ora2epasParser.EACH, 0)

        def ELEMENT(self):
            return self.getToken(ora2epasParser.ELEMENT, 0)

        def EMPTY(self):
            return self.getToken(ora2epasParser.EMPTY, 0)

        def ENABLE(self):
            return self.getToken(ora2epasParser.ENABLE, 0)

        def ENCODING(self):
            return self.getToken(ora2epasParser.ENCODING, 0)

        def ENTITYESCAPING(self):
            return self.getToken(ora2epasParser.ENTITYESCAPING, 0)

        def ERR(self):
            return self.getToken(ora2epasParser.ERR, 0)

        def ERRORS(self):
            return self.getToken(ora2epasParser.ERRORS, 0)

        def ESCAPE(self):
            return self.getToken(ora2epasParser.ESCAPE, 0)

        def EVALNAME(self):
            return self.getToken(ora2epasParser.EVALNAME, 0)

        def EXCEPTION(self):
            return self.getToken(ora2epasParser.EXCEPTION, 0)

        def EXCEPTION_INIT(self):
            return self.getToken(ora2epasParser.EXCEPTION_INIT, 0)

        def EXCEPTIONS(self):
            return self.getToken(ora2epasParser.EXCEPTIONS, 0)

        def EXCLUDE(self):
            return self.getToken(ora2epasParser.EXCLUDE, 0)

        def EXECUTE(self):
            return self.getToken(ora2epasParser.EXECUTE, 0)

        def EXIT(self):
            return self.getToken(ora2epasParser.EXIT, 0)

        def EXPLAIN(self):
            return self.getToken(ora2epasParser.EXPLAIN, 0)

        def EXTERNAL(self):
            return self.getToken(ora2epasParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(ora2epasParser.EXTRACT, 0)

        def FAILURE(self):
            return self.getToken(ora2epasParser.FAILURE, 0)

        def FINAL(self):
            return self.getToken(ora2epasParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(ora2epasParser.FIRST, 0)

        def FIRST_VALUE(self):
            return self.getToken(ora2epasParser.FIRST_VALUE, 0)

        def FLOAT(self):
            return self.getToken(ora2epasParser.FLOAT, 0)

        def FOLLOWING(self):
            return self.getToken(ora2epasParser.FOLLOWING, 0)

        def FOLLOWS(self):
            return self.getToken(ora2epasParser.FOLLOWS, 0)

        def FORALL(self):
            return self.getToken(ora2epasParser.FORALL, 0)

        def FORCE(self):
            return self.getToken(ora2epasParser.FORCE, 0)

        def FULL(self):
            return self.getToken(ora2epasParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(ora2epasParser.FUNCTION, 0)

        def GROUPING(self):
            return self.getToken(ora2epasParser.GROUPING, 0)

        def HASH(self):
            return self.getToken(ora2epasParser.HASH, 0)

        def HIDE(self):
            return self.getToken(ora2epasParser.HIDE, 0)

        def HOUR(self):
            return self.getToken(ora2epasParser.HOUR, 0)

        def IGNORE(self):
            return self.getToken(ora2epasParser.IGNORE, 0)

        def IMMEDIATE(self):
            return self.getToken(ora2epasParser.IMMEDIATE, 0)

        def INCLUDE(self):
            return self.getToken(ora2epasParser.INCLUDE, 0)

        def INCLUDING(self):
            return self.getToken(ora2epasParser.INCLUDING, 0)

        def INCREMENT(self):
            return self.getToken(ora2epasParser.INCREMENT, 0)

        def INDENT(self):
            return self.getToken(ora2epasParser.INDENT, 0)

        def INDEXED(self):
            return self.getToken(ora2epasParser.INDEXED, 0)

        def INDICATOR(self):
            return self.getToken(ora2epasParser.INDICATOR, 0)

        def INDICES(self):
            return self.getToken(ora2epasParser.INDICES, 0)

        def INFINITE(self):
            return self.getToken(ora2epasParser.INFINITE, 0)

        def INLINE(self):
            return self.getToken(ora2epasParser.INLINE, 0)

        def INNER(self):
            return self.getToken(ora2epasParser.INNER, 0)

        def INOUT(self):
            return self.getToken(ora2epasParser.INOUT, 0)

        def INSTANTIABLE(self):
            return self.getToken(ora2epasParser.INSTANTIABLE, 0)

        def INSTEAD(self):
            return self.getToken(ora2epasParser.INSTEAD, 0)

        def INT(self):
            return self.getToken(ora2epasParser.INT, 0)

        def INTEGER(self):
            return self.getToken(ora2epasParser.INTEGER, 0)

        def INTERVAL(self):
            return self.getToken(ora2epasParser.INTERVAL, 0)

        def INVALIDATE(self):
            return self.getToken(ora2epasParser.INVALIDATE, 0)

        def ISOLATION(self):
            return self.getToken(ora2epasParser.ISOLATION, 0)

        def ITERATE(self):
            return self.getToken(ora2epasParser.ITERATE, 0)

        def JAVA(self):
            return self.getToken(ora2epasParser.JAVA, 0)

        def JOIN(self):
            return self.getToken(ora2epasParser.JOIN, 0)

        def KEEP(self):
            return self.getToken(ora2epasParser.KEEP, 0)

        def LANGUAGE(self):
            return self.getToken(ora2epasParser.LANGUAGE, 0)

        def LAST(self):
            return self.getToken(ora2epasParser.LAST, 0)

        def LAST_VALUE(self):
            return self.getToken(ora2epasParser.LAST_VALUE, 0)

        def LEADING(self):
            return self.getToken(ora2epasParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(ora2epasParser.LEFT, 0)

        def LEVEL(self):
            return self.getToken(ora2epasParser.LEVEL, 0)

        def LIBRARY(self):
            return self.getToken(ora2epasParser.LIBRARY, 0)

        def LIKE2(self):
            return self.getToken(ora2epasParser.LIKE2, 0)

        def LIKE4(self):
            return self.getToken(ora2epasParser.LIKE4, 0)

        def LIKEC(self):
            return self.getToken(ora2epasParser.LIKEC, 0)

        def LIMIT(self):
            return self.getToken(ora2epasParser.LIMIT, 0)

        def LOCAL(self):
            return self.getToken(ora2epasParser.LOCAL, 0)

        def LOCKED(self):
            return self.getToken(ora2epasParser.LOCKED, 0)

        def LOG(self):
            return self.getToken(ora2epasParser.LOG, 0)

        def LOGOFF(self):
            return self.getToken(ora2epasParser.LOGOFF, 0)

        def LOGON(self):
            return self.getToken(ora2epasParser.LOGON, 0)

        def LONG(self):
            return self.getToken(ora2epasParser.LONG, 0)

        def LOOP(self):
            return self.getToken(ora2epasParser.LOOP, 0)

        def MAIN(self):
            return self.getToken(ora2epasParser.MAIN, 0)

        def MAP(self):
            return self.getToken(ora2epasParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(ora2epasParser.MATCHED, 0)

        def MAXVALUE(self):
            return self.getToken(ora2epasParser.MAXVALUE, 0)

        def MEASURES(self):
            return self.getToken(ora2epasParser.MEASURES, 0)

        def MEMBER(self):
            return self.getToken(ora2epasParser.MEMBER, 0)

        def MERGE(self):
            return self.getToken(ora2epasParser.MERGE, 0)

        def MINUTE(self):
            return self.getToken(ora2epasParser.MINUTE, 0)

        def MINVALUE(self):
            return self.getToken(ora2epasParser.MINVALUE, 0)

        def MLSLABEL(self):
            return self.getToken(ora2epasParser.MLSLABEL, 0)

        def MODEL(self):
            return self.getToken(ora2epasParser.MODEL, 0)

        def MODIFY(self):
            return self.getToken(ora2epasParser.MODIFY, 0)

        def MONTH(self):
            return self.getToken(ora2epasParser.MONTH, 0)

        def MULTISET(self):
            return self.getToken(ora2epasParser.MULTISET, 0)

        def NAME(self):
            return self.getToken(ora2epasParser.NAME, 0)

        def NAN(self):
            return self.getToken(ora2epasParser.NAN, 0)

        def NATURAL(self):
            return self.getToken(ora2epasParser.NATURAL, 0)

        def NATURALN(self):
            return self.getToken(ora2epasParser.NATURALN, 0)

        def NAV(self):
            return self.getToken(ora2epasParser.NAV, 0)

        def NCHAR(self):
            return self.getToken(ora2epasParser.NCHAR, 0)

        def NCHAR_CS(self):
            return self.getToken(ora2epasParser.NCHAR_CS, 0)

        def NCLOB(self):
            return self.getToken(ora2epasParser.NCLOB, 0)

        def NESTED(self):
            return self.getToken(ora2epasParser.NESTED, 0)

        def NEW(self):
            return self.getToken(ora2epasParser.NEW, 0)

        def NO(self):
            return self.getToken(ora2epasParser.NO, 0)

        def NOAUDIT(self):
            return self.getToken(ora2epasParser.NOAUDIT, 0)

        def NOCOPY(self):
            return self.getToken(ora2epasParser.NOCOPY, 0)

        def NOCYCLE(self):
            return self.getToken(ora2epasParser.NOCYCLE, 0)

        def NOENTITYESCAPING(self):
            return self.getToken(ora2epasParser.NOENTITYESCAPING, 0)

        def NONE(self):
            return self.getToken(ora2epasParser.NONE, 0)

        def NOSCHEMACHECK(self):
            return self.getToken(ora2epasParser.NOSCHEMACHECK, 0)

        def NULLS(self):
            return self.getToken(ora2epasParser.NULLS, 0)

        def NUMBER(self):
            return self.getToken(ora2epasParser.NUMBER, 0)

        def NUMERIC(self):
            return self.getToken(ora2epasParser.NUMERIC, 0)

        def NVARCHAR2(self):
            return self.getToken(ora2epasParser.NVARCHAR2, 0)

        def OBJECT(self):
            return self.getToken(ora2epasParser.OBJECT, 0)

        def OFF(self):
            return self.getToken(ora2epasParser.OFF, 0)

        def OID(self):
            return self.getToken(ora2epasParser.OID, 0)

        def OLD(self):
            return self.getToken(ora2epasParser.OLD, 0)

        def ONLY(self):
            return self.getToken(ora2epasParser.ONLY, 0)

        def OPEN(self):
            return self.getToken(ora2epasParser.OPEN, 0)

        def ORADATA(self):
            return self.getToken(ora2epasParser.ORADATA, 0)

        def ORDINALITY(self):
            return self.getToken(ora2epasParser.ORDINALITY, 0)

        def OSERROR(self):
            return self.getToken(ora2epasParser.OSERROR, 0)

        def OUT(self):
            return self.getToken(ora2epasParser.OUT, 0)

        def OUTER(self):
            return self.getToken(ora2epasParser.OUTER, 0)

        def OVER(self):
            return self.getToken(ora2epasParser.OVER, 0)

        def OVERRIDING(self):
            return self.getToken(ora2epasParser.OVERRIDING, 0)

        def PACKAGE(self):
            return self.getToken(ora2epasParser.PACKAGE, 0)

        def PARALLEL_ENABLE(self):
            return self.getToken(ora2epasParser.PARALLEL_ENABLE, 0)

        def PARAMETERS(self):
            return self.getToken(ora2epasParser.PARAMETERS, 0)

        def PARENT(self):
            return self.getToken(ora2epasParser.PARENT, 0)

        def PARTITION(self):
            return self.getToken(ora2epasParser.PARTITION, 0)

        def PASSING(self):
            return self.getToken(ora2epasParser.PASSING, 0)

        def PATH(self):
            return self.getToken(ora2epasParser.PATH, 0)

        def PIPELINED(self):
            return self.getToken(ora2epasParser.PIPELINED, 0)

        def PLAN(self):
            return self.getToken(ora2epasParser.PLAN, 0)

        def PLS_INTEGER(self):
            return self.getToken(ora2epasParser.PLS_INTEGER, 0)

        def POSITIVE(self):
            return self.getToken(ora2epasParser.POSITIVE, 0)

        def POSITIVEN(self):
            return self.getToken(ora2epasParser.POSITIVEN, 0)

        def PRAGMA(self):
            return self.getToken(ora2epasParser.PRAGMA, 0)

        def PRECEDING(self):
            return self.getToken(ora2epasParser.PRECEDING, 0)

        def PRECISION(self):
            return self.getToken(ora2epasParser.PRECISION, 0)

        def PRESENT(self):
            return self.getToken(ora2epasParser.PRESENT, 0)

        def RAISE(self):
            return self.getToken(ora2epasParser.RAISE, 0)

        def RANGE(self):
            return self.getToken(ora2epasParser.RANGE, 0)

        def RAW(self):
            return self.getToken(ora2epasParser.RAW, 0)

        def READ(self):
            return self.getToken(ora2epasParser.READ, 0)

        def REAL(self):
            return self.getToken(ora2epasParser.REAL, 0)

        def RECORD(self):
            return self.getToken(ora2epasParser.RECORD, 0)

        def REF(self):
            return self.getToken(ora2epasParser.REF, 0)

        def REFERENCE(self):
            return self.getToken(ora2epasParser.REFERENCE, 0)

        def REFERENCING(self):
            return self.getToken(ora2epasParser.REFERENCING, 0)

        def REJECT(self):
            return self.getToken(ora2epasParser.REJECT, 0)

        def RENAME(self):
            return self.getToken(ora2epasParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(ora2epasParser.REPLACE, 0)

        def RESPECT(self):
            return self.getToken(ora2epasParser.RESPECT, 0)

        def RESTRICT_REFERENCES(self):
            return self.getToken(ora2epasParser.RESTRICT_REFERENCES, 0)

        def RESULT(self):
            return self.getToken(ora2epasParser.RESULT, 0)

        def RETURN(self):
            return self.getToken(ora2epasParser.RETURN, 0)

        def RETURNING(self):
            return self.getToken(ora2epasParser.RETURNING, 0)

        def REUSE(self):
            return self.getToken(ora2epasParser.REUSE, 0)

        def REVERSE(self):
            return self.getToken(ora2epasParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(ora2epasParser.RIGHT, 0)

        def ROLLBACK(self):
            return self.getToken(ora2epasParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(ora2epasParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(ora2epasParser.ROW, 0)

        def ROWID(self):
            return self.getToken(ora2epasParser.ROWID, 0)

        def ROWS(self):
            return self.getToken(ora2epasParser.ROWS, 0)

        def RULES(self):
            return self.getToken(ora2epasParser.RULES, 0)

        def SAMPLE(self):
            return self.getToken(ora2epasParser.SAMPLE, 0)

        def SAVE(self):
            return self.getToken(ora2epasParser.SAVE, 0)

        def SAVEPOINT(self):
            return self.getToken(ora2epasParser.SAVEPOINT, 0)

        def SCHEMA(self):
            return self.getToken(ora2epasParser.SCHEMA, 0)

        def SCHEMACHECK(self):
            return self.getToken(ora2epasParser.SCHEMACHECK, 0)

        def SCN(self):
            return self.getToken(ora2epasParser.SCN, 0)

        def SECOND(self):
            return self.getToken(ora2epasParser.SECOND, 0)

        def SEED(self):
            return self.getToken(ora2epasParser.SEED, 0)

        def SEGMENT(self):
            return self.getToken(ora2epasParser.SEGMENT, 0)

        def SELF(self):
            return self.getToken(ora2epasParser.SELF, 0)

        def SEQUENTIAL(self):
            return self.getToken(ora2epasParser.SEQUENTIAL, 0)

        def SERIALIZABLE(self):
            return self.getToken(ora2epasParser.SERIALIZABLE, 0)

        def SERIALLY_REUSABLE(self):
            return self.getToken(ora2epasParser.SERIALLY_REUSABLE, 0)

        def SERVERERROR(self):
            return self.getToken(ora2epasParser.SERVERERROR, 0)

        def SESSIONTIMEZONE(self):
            return self.getToken(ora2epasParser.SESSIONTIMEZONE, 0)

        def SET(self):
            return self.getToken(ora2epasParser.SET, 0)

        def SETS(self):
            return self.getToken(ora2epasParser.SETS, 0)

        def SETTINGS(self):
            return self.getToken(ora2epasParser.SETTINGS, 0)

        def SHOW(self):
            return self.getToken(ora2epasParser.SHOW, 0)

        def SHUTDOWN(self):
            return self.getToken(ora2epasParser.SHUTDOWN, 0)

        def SIBLINGS(self):
            return self.getToken(ora2epasParser.SIBLINGS, 0)

        def SIGNTYPE(self):
            return self.getToken(ora2epasParser.SIGNTYPE, 0)

        def SIMPLE_INTEGER(self):
            return self.getToken(ora2epasParser.SIMPLE_INTEGER, 0)

        def SINGLE(self):
            return self.getToken(ora2epasParser.SINGLE, 0)

        def SKIP_(self):
            return self.getToken(ora2epasParser.SKIP_, 0)

        def SMALLINT(self):
            return self.getToken(ora2epasParser.SMALLINT, 0)

        def SNAPSHOT(self):
            return self.getToken(ora2epasParser.SNAPSHOT, 0)

        def SOME(self):
            return self.getToken(ora2epasParser.SOME, 0)

        def SPECIFICATION(self):
            return self.getToken(ora2epasParser.SPECIFICATION, 0)

        def SQLDATA(self):
            return self.getToken(ora2epasParser.SQLDATA, 0)

        def SQLERROR(self):
            return self.getToken(ora2epasParser.SQLERROR, 0)

        def STANDALONE(self):
            return self.getToken(ora2epasParser.STANDALONE, 0)

        def STARTUP(self):
            return self.getToken(ora2epasParser.STARTUP, 0)

        def STATEMENT(self):
            return self.getToken(ora2epasParser.STATEMENT, 0)

        def STATEMENT_ID(self):
            return self.getToken(ora2epasParser.STATEMENT_ID, 0)

        def STATIC(self):
            return self.getToken(ora2epasParser.STATIC, 0)

        def STATISTICS(self):
            return self.getToken(ora2epasParser.STATISTICS, 0)

        def STRING(self):
            return self.getToken(ora2epasParser.STRING, 0)

        def SUBMULTISET(self):
            return self.getToken(ora2epasParser.SUBMULTISET, 0)

        def SUBPARTITION(self):
            return self.getToken(ora2epasParser.SUBPARTITION, 0)

        def SUBSTITUTABLE(self):
            return self.getToken(ora2epasParser.SUBSTITUTABLE, 0)

        def SUBTYPE(self):
            return self.getToken(ora2epasParser.SUBTYPE, 0)

        def SUCCESS(self):
            return self.getToken(ora2epasParser.SUCCESS, 0)

        def SUSPEND(self):
            return self.getToken(ora2epasParser.SUSPEND, 0)

        def TIME(self):
            return self.getToken(ora2epasParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(ora2epasParser.TIMESTAMP, 0)

        def TIMESTAMP_LTZ_UNCONSTRAINED(self):
            return self.getToken(ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0)

        def TIMESTAMP_TZ_UNCONSTRAINED(self):
            return self.getToken(ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED, 0)

        def TIMESTAMP_UNCONSTRAINED(self):
            return self.getToken(ora2epasParser.TIMESTAMP_UNCONSTRAINED, 0)

        def TIMEZONE_ABBR(self):
            return self.getToken(ora2epasParser.TIMEZONE_ABBR, 0)

        def TIMEZONE_HOUR(self):
            return self.getToken(ora2epasParser.TIMEZONE_HOUR, 0)

        def TIMEZONE_MINUTE(self):
            return self.getToken(ora2epasParser.TIMEZONE_MINUTE, 0)

        def TIMEZONE_REGION(self):
            return self.getToken(ora2epasParser.TIMEZONE_REGION, 0)

        def TRAILING(self):
            return self.getToken(ora2epasParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(ora2epasParser.TRANSACTION, 0)

        def TRANSLATE(self):
            return self.getToken(ora2epasParser.TRANSLATE, 0)

        def TREAT(self):
            return self.getToken(ora2epasParser.TREAT, 0)

        def TRIGGER(self):
            return self.getToken(ora2epasParser.TRIGGER, 0)

        def TRIM(self):
            return self.getToken(ora2epasParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(ora2epasParser.TRUNCATE, 0)

        def TYPE(self):
            return self.getToken(ora2epasParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(ora2epasParser.UNBOUNDED, 0)

        def UNDER(self):
            return self.getToken(ora2epasParser.UNDER, 0)

        def UNLIMITED(self):
            return self.getToken(ora2epasParser.UNLIMITED, 0)

        def UNTIL(self):
            return self.getToken(ora2epasParser.UNTIL, 0)

        def UPDATED(self):
            return self.getToken(ora2epasParser.UPDATED, 0)

        def UPSERT(self):
            return self.getToken(ora2epasParser.UPSERT, 0)

        def UROWID(self):
            return self.getToken(ora2epasParser.UROWID, 0)

        def USE(self):
            return self.getToken(ora2epasParser.USE, 0)

        def VALIDATE(self):
            return self.getToken(ora2epasParser.VALIDATE, 0)

        def VALUE(self):
            return self.getToken(ora2epasParser.VALUE, 0)

        def VARIABLE(self):
            return self.getToken(ora2epasParser.VARIABLE, 0)

        def VARRAY(self):
            return self.getToken(ora2epasParser.VARRAY, 0)

        def VARYING(self):
            return self.getToken(ora2epasParser.VARYING, 0)

        def VERSION(self):
            return self.getToken(ora2epasParser.VERSION, 0)

        def VERSIONS(self):
            return self.getToken(ora2epasParser.VERSIONS, 0)

        def WAIT(self):
            return self.getToken(ora2epasParser.WAIT, 0)

        def WARNING(self):
            return self.getToken(ora2epasParser.WARNING, 0)

        def WELLFORMED(self):
            return self.getToken(ora2epasParser.WELLFORMED, 0)

        def WHENEVER(self):
            return self.getToken(ora2epasParser.WHENEVER, 0)

        def WHILE(self):
            return self.getToken(ora2epasParser.WHILE, 0)

        def WITHIN(self):
            return self.getToken(ora2epasParser.WITHIN, 0)

        def WORK(self):
            return self.getToken(ora2epasParser.WORK, 0)

        def WRITE(self):
            return self.getToken(ora2epasParser.WRITE, 0)

        def XML(self):
            return self.getToken(ora2epasParser.XML, 0)

        def XMLAGG(self):
            return self.getToken(ora2epasParser.XMLAGG, 0)

        def XMLATTRIBUTES(self):
            return self.getToken(ora2epasParser.XMLATTRIBUTES, 0)

        def XMLCAST(self):
            return self.getToken(ora2epasParser.XMLCAST, 0)

        def XMLCOLATTVAL(self):
            return self.getToken(ora2epasParser.XMLCOLATTVAL, 0)

        def XMLELEMENT(self):
            return self.getToken(ora2epasParser.XMLELEMENT, 0)

        def XMLEXISTS(self):
            return self.getToken(ora2epasParser.XMLEXISTS, 0)

        def XMLFOREST(self):
            return self.getToken(ora2epasParser.XMLFOREST, 0)

        def XMLNAMESPACES(self):
            return self.getToken(ora2epasParser.XMLNAMESPACES, 0)

        def XMLPARSE(self):
            return self.getToken(ora2epasParser.XMLPARSE, 0)

        def XMLPI(self):
            return self.getToken(ora2epasParser.XMLPI, 0)

        def XMLQUERY(self):
            return self.getToken(ora2epasParser.XMLQUERY, 0)

        def XMLROOT(self):
            return self.getToken(ora2epasParser.XMLROOT, 0)

        def XMLSERIALIZE(self):
            return self.getToken(ora2epasParser.XMLSERIALIZE, 0)

        def XMLTABLE(self):
            return self.getToken(ora2epasParser.XMLTABLE, 0)

        def YEAR(self):
            return self.getToken(ora2epasParser.YEAR, 0)

        def YES(self):
            return self.getToken(ora2epasParser.YES, 0)

        def YMINTERVAL_UNCONSTRAINED(self):
            return self.getToken(ora2epasParser.YMINTERVAL_UNCONSTRAINED, 0)

        def ZONE(self):
            return self.getToken(ora2epasParser.ZONE, 0)

        def PREDICTION(self):
            return self.getToken(ora2epasParser.PREDICTION, 0)

        def PREDICTION_BOUNDS(self):
            return self.getToken(ora2epasParser.PREDICTION_BOUNDS, 0)

        def PREDICTION_COST(self):
            return self.getToken(ora2epasParser.PREDICTION_COST, 0)

        def PREDICTION_DETAILS(self):
            return self.getToken(ora2epasParser.PREDICTION_DETAILS, 0)

        def PREDICTION_PROBABILITY(self):
            return self.getToken(ora2epasParser.PREDICTION_PROBABILITY, 0)

        def PREDICTION_SET(self):
            return self.getToken(ora2epasParser.PREDICTION_SET, 0)

        def CUME_DIST(self):
            return self.getToken(ora2epasParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(ora2epasParser.DENSE_RANK, 0)

        def LISTAGG(self):
            return self.getToken(ora2epasParser.LISTAGG, 0)

        def PERCENT_RANK(self):
            return self.getToken(ora2epasParser.PERCENT_RANK, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(ora2epasParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(ora2epasParser.PERCENTILE_DISC, 0)

        def RANK(self):
            return self.getToken(ora2epasParser.RANK, 0)

        def AVG(self):
            return self.getToken(ora2epasParser.AVG, 0)

        def CORR(self):
            return self.getToken(ora2epasParser.CORR, 0)

        def LAG(self):
            return self.getToken(ora2epasParser.LAG, 0)

        def LEAD(self):
            return self.getToken(ora2epasParser.LEAD, 0)

        def MAX(self):
            return self.getToken(ora2epasParser.MAX, 0)

        def MEDIAN(self):
            return self.getToken(ora2epasParser.MEDIAN, 0)

        def MIN(self):
            return self.getToken(ora2epasParser.MIN, 0)

        def NTILE(self):
            return self.getToken(ora2epasParser.NTILE, 0)

        def RATIO_TO_REPORT(self):
            return self.getToken(ora2epasParser.RATIO_TO_REPORT, 0)

        def ROW_NUMBER(self):
            return self.getToken(ora2epasParser.ROW_NUMBER, 0)

        def SUM(self):
            return self.getToken(ora2epasParser.SUM, 0)

        def VARIANCE(self):
            return self.getToken(ora2epasParser.VARIANCE, 0)

        def REGR_(self):
            return self.getToken(ora2epasParser.REGR_, 0)

        def STDDEV(self):
            return self.getToken(ora2epasParser.STDDEV, 0)

        def VAR_(self):
            return self.getToken(ora2epasParser.VAR_, 0)

        def COVAR_(self):
            return self.getToken(ora2epasParser.COVAR_, 0)

        def DBMS_ALERT(self):
            return self.getToken(ora2epasParser.DBMS_ALERT, 0)

        def DBMS_AQ(self):
            return self.getToken(ora2epasParser.DBMS_AQ, 0)

        def DBMS_AQADM(self):
            return self.getToken(ora2epasParser.DBMS_AQADM, 0)

        def DBMS_CRYPTO(self):
            return self.getToken(ora2epasParser.DBMS_CRYPTO, 0)

        def DBMS_JOB(self):
            return self.getToken(ora2epasParser.DBMS_JOB, 0)

        def DBMS_LOB(self):
            return self.getToken(ora2epasParser.DBMS_LOB, 0)

        def DBMS_LOCK(self):
            return self.getToken(ora2epasParser.DBMS_LOCK, 0)

        def DBMS_MVIEW(self):
            return self.getToken(ora2epasParser.DBMS_MVIEW, 0)

        def DBMS_OUTPUT(self):
            return self.getToken(ora2epasParser.DBMS_OUTPUT, 0)

        def DBMS_PIPE(self):
            return self.getToken(ora2epasParser.DBMS_PIPE, 0)

        def DBMS_PROFILER(self):
            return self.getToken(ora2epasParser.DBMS_PROFILER, 0)

        def DBMS_RANDOM(self):
            return self.getToken(ora2epasParser.DBMS_RANDOM, 0)

        def DBMS_RLS(self):
            return self.getToken(ora2epasParser.DBMS_RLS, 0)

        def DBMS_SCHEDULER(self):
            return self.getToken(ora2epasParser.DBMS_SCHEDULER, 0)

        def DBMS_SESSION(self):
            return self.getToken(ora2epasParser.DBMS_SESSION, 0)

        def DBMS_SQL(self):
            return self.getToken(ora2epasParser.DBMS_SQL, 0)

        def DBMS_UTILITY(self):
            return self.getToken(ora2epasParser.DBMS_UTILITY, 0)

        def EMP_ADMIN(self):
            return self.getToken(ora2epasParser.EMP_ADMIN, 0)

        def UTL_ENCODE(self):
            return self.getToken(ora2epasParser.UTL_ENCODE, 0)

        def UTL_FILE(self):
            return self.getToken(ora2epasParser.UTL_FILE, 0)

        def UTL_HTTP(self):
            return self.getToken(ora2epasParser.UTL_HTTP, 0)

        def UTL_MAIL(self):
            return self.getToken(ora2epasParser.UTL_MAIL, 0)

        def UTL_RAW(self):
            return self.getToken(ora2epasParser.UTL_RAW, 0)

        def UTL_SMTP(self):
            return self.getToken(ora2epasParser.UTL_SMTP, 0)

        def UTL_TCP(self):
            return self.getToken(ora2epasParser.UTL_TCP, 0)

        def UTL_URL(self):
            return self.getToken(ora2epasParser.UTL_URL, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_regular_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegular_id" ):
                listener.enterRegular_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegular_id" ):
                listener.exitRegular_id(self)




    def regular_id(self):

        localctx = ora2epasParser.Regular_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_regular_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5311
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ora2epasParser.A_LETTER) | (1 << ora2epasParser.ADD) | (1 << ora2epasParser.AFTER) | (1 << ora2epasParser.AGENT) | (1 << ora2epasParser.AGGREGATE) | (1 << ora2epasParser.ANALYZE) | (1 << ora2epasParser.ARRAY) | (1 << ora2epasParser.ASSOCIATE) | (1 << ora2epasParser.AT) | (1 << ora2epasParser.ATTRIBUTE) | (1 << ora2epasParser.AUDIT) | (1 << ora2epasParser.AUTHID) | (1 << ora2epasParser.AUTO) | (1 << ora2epasParser.AUTOMATIC) | (1 << ora2epasParser.AUTONOMOUS_TRANSACTION) | (1 << ora2epasParser.BATCH) | (1 << ora2epasParser.BEFORE) | (1 << ora2epasParser.BINARY_INTEGER) | (1 << ora2epasParser.BLOB) | (1 << ora2epasParser.BLOCK) | (1 << ora2epasParser.BODY) | (1 << ora2epasParser.BOOLEAN) | (1 << ora2epasParser.BOTH) | (1 << ora2epasParser.BULK) | (1 << ora2epasParser.BYTE) | (1 << ora2epasParser.C_LETTER) | (1 << ora2epasParser.CALL) | (1 << ora2epasParser.CANONICAL) | (1 << ora2epasParser.CASCADE) | (1 << ora2epasParser.CAST) | (1 << ora2epasParser.CHAR) | (1 << ora2epasParser.CHAR_CS) | (1 << ora2epasParser.CHARACTER) | (1 << ora2epasParser.CHR) | (1 << ora2epasParser.CLOB) | (1 << ora2epasParser.CLOSE) | (1 << ora2epasParser.CLUSTER) | (1 << ora2epasParser.COLLECT) | (1 << ora2epasParser.COLUMNS) | (1 << ora2epasParser.COMMENT) | (1 << ora2epasParser.COMMIT) | (1 << ora2epasParser.COMMITTED) | (1 << ora2epasParser.COMPATIBILITY) | (1 << ora2epasParser.COMPILE) | (1 << ora2epasParser.COMPOUND))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (ora2epasParser.CONSTANT - 66)) | (1 << (ora2epasParser.CONSTRAINT - 66)) | (1 << (ora2epasParser.CONSTRAINTS - 66)) | (1 << (ora2epasParser.CONSTRUCTOR - 66)) | (1 << (ora2epasParser.CONTENT - 66)) | (1 << (ora2epasParser.CONTEXT - 66)) | (1 << (ora2epasParser.CONTINUE - 66)) | (1 << (ora2epasParser.CONVERT - 66)) | (1 << (ora2epasParser.CORRUPT_XID - 66)) | (1 << (ora2epasParser.CORRUPT_XID_ALL - 66)) | (1 << (ora2epasParser.COST - 66)) | (1 << (ora2epasParser.COUNT - 66)) | (1 << (ora2epasParser.CROSS - 66)) | (1 << (ora2epasParser.CUBE - 66)) | (1 << (ora2epasParser.CURRENT_USER - 66)) | (1 << (ora2epasParser.CURSOR - 66)) | (1 << (ora2epasParser.CUSTOMDATUM - 66)) | (1 << (ora2epasParser.CYCLE - 66)) | (1 << (ora2epasParser.DATA - 66)) | (1 << (ora2epasParser.DATABASE - 66)) | (1 << (ora2epasParser.DAY - 66)) | (1 << (ora2epasParser.DB_ROLE_CHANGE - 66)) | (1 << (ora2epasParser.DBTIMEZONE - 66)) | (1 << (ora2epasParser.DDL - 66)) | (1 << (ora2epasParser.DEBUG - 66)) | (1 << (ora2epasParser.DEC - 66)) | (1 << (ora2epasParser.DECIMAL - 66)) | (1 << (ora2epasParser.DECOMPOSE - 66)) | (1 << (ora2epasParser.DECREMENT - 66)) | (1 << (ora2epasParser.DEFAULTS - 66)) | (1 << (ora2epasParser.DEFERRED - 66)) | (1 << (ora2epasParser.DEFINER - 66)) | (1 << (ora2epasParser.DETERMINISTIC - 66)) | (1 << (ora2epasParser.DIMENSION - 66)) | (1 << (ora2epasParser.DISABLE - 66)) | (1 << (ora2epasParser.DISASSOCIATE - 66)) | (1 << (ora2epasParser.DOCUMENT - 66)) | (1 << (ora2epasParser.DOUBLE - 66)) | (1 << (ora2epasParser.DSINTERVAL_UNCONSTRAINED - 66)) | (1 << (ora2epasParser.EACH - 66)) | (1 << (ora2epasParser.ELEMENT - 66)) | (1 << (ora2epasParser.EMPTY - 66)) | (1 << (ora2epasParser.ENABLE - 66)) | (1 << (ora2epasParser.ENCODING - 66)) | (1 << (ora2epasParser.ENTITYESCAPING - 66)) | (1 << (ora2epasParser.ERR - 66)) | (1 << (ora2epasParser.ERRORS - 66)) | (1 << (ora2epasParser.ESCAPE - 66)) | (1 << (ora2epasParser.EVALNAME - 66)) | (1 << (ora2epasParser.EXCEPTION - 66)) | (1 << (ora2epasParser.EXCEPTION_INIT - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (ora2epasParser.EXCEPTIONS - 130)) | (1 << (ora2epasParser.EXCLUDE - 130)) | (1 << (ora2epasParser.EXECUTE - 130)) | (1 << (ora2epasParser.EXIT - 130)) | (1 << (ora2epasParser.EXPLAIN - 130)) | (1 << (ora2epasParser.EXTERNAL - 130)) | (1 << (ora2epasParser.EXTRACT - 130)) | (1 << (ora2epasParser.FAILURE - 130)) | (1 << (ora2epasParser.FINAL - 130)) | (1 << (ora2epasParser.FIRST - 130)) | (1 << (ora2epasParser.FIRST_VALUE - 130)) | (1 << (ora2epasParser.FLOAT - 130)) | (1 << (ora2epasParser.FOLLOWING - 130)) | (1 << (ora2epasParser.FOLLOWS - 130)) | (1 << (ora2epasParser.FORALL - 130)) | (1 << (ora2epasParser.FORCE - 130)) | (1 << (ora2epasParser.FULL - 130)) | (1 << (ora2epasParser.FUNCTION - 130)) | (1 << (ora2epasParser.GROUPING - 130)) | (1 << (ora2epasParser.HASH - 130)) | (1 << (ora2epasParser.HIDE - 130)) | (1 << (ora2epasParser.HOUR - 130)) | (1 << (ora2epasParser.IGNORE - 130)) | (1 << (ora2epasParser.IMMEDIATE - 130)) | (1 << (ora2epasParser.INCLUDE - 130)) | (1 << (ora2epasParser.INCLUDING - 130)) | (1 << (ora2epasParser.INCREMENT - 130)) | (1 << (ora2epasParser.INDENT - 130)) | (1 << (ora2epasParser.INDEXED - 130)) | (1 << (ora2epasParser.INDICATOR - 130)) | (1 << (ora2epasParser.INDICES - 130)) | (1 << (ora2epasParser.INFINITE - 130)) | (1 << (ora2epasParser.INLINE - 130)) | (1 << (ora2epasParser.INNER - 130)) | (1 << (ora2epasParser.INOUT - 130)) | (1 << (ora2epasParser.INSTANTIABLE - 130)) | (1 << (ora2epasParser.INSTEAD - 130)) | (1 << (ora2epasParser.INT - 130)) | (1 << (ora2epasParser.INTEGER - 130)) | (1 << (ora2epasParser.INTERVAL - 130)) | (1 << (ora2epasParser.INVALIDATE - 130)) | (1 << (ora2epasParser.ISOLATION - 130)) | (1 << (ora2epasParser.ITERATE - 130)) | (1 << (ora2epasParser.JAVA - 130)) | (1 << (ora2epasParser.JOIN - 130)) | (1 << (ora2epasParser.KEEP - 130)) | (1 << (ora2epasParser.LANGUAGE - 130)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (ora2epasParser.LAST - 194)) | (1 << (ora2epasParser.LAST_VALUE - 194)) | (1 << (ora2epasParser.LEADING - 194)) | (1 << (ora2epasParser.LEFT - 194)) | (1 << (ora2epasParser.LEVEL - 194)) | (1 << (ora2epasParser.LIBRARY - 194)) | (1 << (ora2epasParser.LIKE2 - 194)) | (1 << (ora2epasParser.LIKE4 - 194)) | (1 << (ora2epasParser.LIKEC - 194)) | (1 << (ora2epasParser.LIMIT - 194)) | (1 << (ora2epasParser.LOCAL - 194)) | (1 << (ora2epasParser.LOCKED - 194)) | (1 << (ora2epasParser.LOG - 194)) | (1 << (ora2epasParser.LOGOFF - 194)) | (1 << (ora2epasParser.LOGON - 194)) | (1 << (ora2epasParser.LONG - 194)) | (1 << (ora2epasParser.LOOP - 194)) | (1 << (ora2epasParser.MAIN - 194)) | (1 << (ora2epasParser.MAP - 194)) | (1 << (ora2epasParser.MATCHED - 194)) | (1 << (ora2epasParser.MAXVALUE - 194)) | (1 << (ora2epasParser.MEASURES - 194)) | (1 << (ora2epasParser.MEMBER - 194)) | (1 << (ora2epasParser.MERGE - 194)) | (1 << (ora2epasParser.MINUTE - 194)) | (1 << (ora2epasParser.MINVALUE - 194)) | (1 << (ora2epasParser.MLSLABEL - 194)) | (1 << (ora2epasParser.MODEL - 194)) | (1 << (ora2epasParser.MODIFY - 194)) | (1 << (ora2epasParser.MONTH - 194)) | (1 << (ora2epasParser.MULTISET - 194)) | (1 << (ora2epasParser.NAME - 194)) | (1 << (ora2epasParser.NAN - 194)) | (1 << (ora2epasParser.NATURAL - 194)) | (1 << (ora2epasParser.NATURALN - 194)) | (1 << (ora2epasParser.NAV - 194)) | (1 << (ora2epasParser.NCHAR - 194)) | (1 << (ora2epasParser.NCHAR_CS - 194)) | (1 << (ora2epasParser.NCLOB - 194)) | (1 << (ora2epasParser.NESTED - 194)) | (1 << (ora2epasParser.NEW - 194)) | (1 << (ora2epasParser.NO - 194)) | (1 << (ora2epasParser.NOAUDIT - 194)) | (1 << (ora2epasParser.NOCOPY - 194)) | (1 << (ora2epasParser.NOCYCLE - 194)) | (1 << (ora2epasParser.NOENTITYESCAPING - 194)) | (1 << (ora2epasParser.NONE - 194)) | (1 << (ora2epasParser.NOSCHEMACHECK - 194)) | (1 << (ora2epasParser.NULLS - 194)) | (1 << (ora2epasParser.NUMBER - 194)) | (1 << (ora2epasParser.NUMERIC - 194)) | (1 << (ora2epasParser.NVARCHAR2 - 194)) | (1 << (ora2epasParser.OBJECT - 194)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (ora2epasParser.OFF - 259)) | (1 << (ora2epasParser.OID - 259)) | (1 << (ora2epasParser.OLD - 259)) | (1 << (ora2epasParser.ONLY - 259)) | (1 << (ora2epasParser.OPEN - 259)) | (1 << (ora2epasParser.ORADATA - 259)) | (1 << (ora2epasParser.ORDINALITY - 259)) | (1 << (ora2epasParser.OSERROR - 259)) | (1 << (ora2epasParser.OUT - 259)) | (1 << (ora2epasParser.OUTER - 259)) | (1 << (ora2epasParser.OVER - 259)) | (1 << (ora2epasParser.OVERRIDING - 259)) | (1 << (ora2epasParser.PACKAGE - 259)) | (1 << (ora2epasParser.PARALLEL_ENABLE - 259)) | (1 << (ora2epasParser.PARAMETERS - 259)) | (1 << (ora2epasParser.PARENT - 259)) | (1 << (ora2epasParser.PARTITION - 259)) | (1 << (ora2epasParser.PASSING - 259)) | (1 << (ora2epasParser.PATH - 259)) | (1 << (ora2epasParser.PIPELINED - 259)) | (1 << (ora2epasParser.PLAN - 259)) | (1 << (ora2epasParser.PLS_INTEGER - 259)) | (1 << (ora2epasParser.POSITIVE - 259)) | (1 << (ora2epasParser.POSITIVEN - 259)) | (1 << (ora2epasParser.PRAGMA - 259)) | (1 << (ora2epasParser.PRECEDING - 259)) | (1 << (ora2epasParser.PRECISION - 259)) | (1 << (ora2epasParser.PRESENT - 259)) | (1 << (ora2epasParser.RAISE - 259)) | (1 << (ora2epasParser.RANGE - 259)) | (1 << (ora2epasParser.RAW - 259)) | (1 << (ora2epasParser.READ - 259)) | (1 << (ora2epasParser.REAL - 259)) | (1 << (ora2epasParser.RECORD - 259)) | (1 << (ora2epasParser.REF - 259)) | (1 << (ora2epasParser.REFERENCE - 259)) | (1 << (ora2epasParser.REFERENCING - 259)) | (1 << (ora2epasParser.REJECT - 259)) | (1 << (ora2epasParser.RENAME - 259)) | (1 << (ora2epasParser.REPLACE - 259)) | (1 << (ora2epasParser.RESPECT - 259)) | (1 << (ora2epasParser.RESTRICT_REFERENCES - 259)) | (1 << (ora2epasParser.RESULT - 259)) | (1 << (ora2epasParser.RETURN - 259)) | (1 << (ora2epasParser.RETURNING - 259)) | (1 << (ora2epasParser.REUSE - 259)) | (1 << (ora2epasParser.REVERSE - 259)) | (1 << (ora2epasParser.RIGHT - 259)) | (1 << (ora2epasParser.ROLLBACK - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (ora2epasParser.ROLLUP - 323)) | (1 << (ora2epasParser.ROW - 323)) | (1 << (ora2epasParser.ROWID - 323)) | (1 << (ora2epasParser.ROWS - 323)) | (1 << (ora2epasParser.RULES - 323)) | (1 << (ora2epasParser.SAMPLE - 323)) | (1 << (ora2epasParser.SAVE - 323)) | (1 << (ora2epasParser.SAVEPOINT - 323)) | (1 << (ora2epasParser.SCHEMA - 323)) | (1 << (ora2epasParser.SCHEMACHECK - 323)) | (1 << (ora2epasParser.SCN - 323)) | (1 << (ora2epasParser.SECOND - 323)) | (1 << (ora2epasParser.SEED - 323)) | (1 << (ora2epasParser.SEGMENT - 323)) | (1 << (ora2epasParser.SELF - 323)) | (1 << (ora2epasParser.SEQUENTIAL - 323)) | (1 << (ora2epasParser.SERIALIZABLE - 323)) | (1 << (ora2epasParser.SERIALLY_REUSABLE - 323)) | (1 << (ora2epasParser.SERVERERROR - 323)) | (1 << (ora2epasParser.SESSIONTIMEZONE - 323)) | (1 << (ora2epasParser.SET - 323)) | (1 << (ora2epasParser.SETS - 323)) | (1 << (ora2epasParser.SETTINGS - 323)) | (1 << (ora2epasParser.SHOW - 323)) | (1 << (ora2epasParser.SHUTDOWN - 323)) | (1 << (ora2epasParser.SIBLINGS - 323)) | (1 << (ora2epasParser.SIGNTYPE - 323)) | (1 << (ora2epasParser.SIMPLE_INTEGER - 323)) | (1 << (ora2epasParser.SINGLE - 323)) | (1 << (ora2epasParser.SKIP_ - 323)) | (1 << (ora2epasParser.SMALLINT - 323)) | (1 << (ora2epasParser.SNAPSHOT - 323)) | (1 << (ora2epasParser.SOME - 323)) | (1 << (ora2epasParser.SPECIFICATION - 323)) | (1 << (ora2epasParser.SQLDATA - 323)) | (1 << (ora2epasParser.SQLERROR - 323)) | (1 << (ora2epasParser.STANDALONE - 323)) | (1 << (ora2epasParser.STARTUP - 323)) | (1 << (ora2epasParser.STATEMENT - 323)) | (1 << (ora2epasParser.STATEMENT_ID - 323)) | (1 << (ora2epasParser.STATIC - 323)) | (1 << (ora2epasParser.STATISTICS - 323)) | (1 << (ora2epasParser.STRING - 323)) | (1 << (ora2epasParser.SUBMULTISET - 323)) | (1 << (ora2epasParser.SUBPARTITION - 323)) | (1 << (ora2epasParser.SUBSTITUTABLE - 323)) | (1 << (ora2epasParser.SUBTYPE - 323)) | (1 << (ora2epasParser.SUCCESS - 323)) | (1 << (ora2epasParser.SUSPEND - 323)) | (1 << (ora2epasParser.TIME - 323)) | (1 << (ora2epasParser.TIMESTAMP - 323)) | (1 << (ora2epasParser.TIMESTAMP_LTZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_TZ_UNCONSTRAINED - 323)) | (1 << (ora2epasParser.TIMESTAMP_UNCONSTRAINED - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (ora2epasParser.TIMEZONE_ABBR - 387)) | (1 << (ora2epasParser.TIMEZONE_HOUR - 387)) | (1 << (ora2epasParser.TIMEZONE_MINUTE - 387)) | (1 << (ora2epasParser.TIMEZONE_REGION - 387)) | (1 << (ora2epasParser.TRAILING - 387)) | (1 << (ora2epasParser.TRANSACTION - 387)) | (1 << (ora2epasParser.TRANSLATE - 387)) | (1 << (ora2epasParser.TREAT - 387)) | (1 << (ora2epasParser.TRIGGER - 387)) | (1 << (ora2epasParser.TRUNCATE - 387)) | (1 << (ora2epasParser.TYPE - 387)) | (1 << (ora2epasParser.UNBOUNDED - 387)) | (1 << (ora2epasParser.UNDER - 387)) | (1 << (ora2epasParser.UNLIMITED - 387)) | (1 << (ora2epasParser.UNTIL - 387)) | (1 << (ora2epasParser.UPDATED - 387)) | (1 << (ora2epasParser.UPSERT - 387)) | (1 << (ora2epasParser.UROWID - 387)) | (1 << (ora2epasParser.USE - 387)) | (1 << (ora2epasParser.VALIDATE - 387)) | (1 << (ora2epasParser.VALUE - 387)) | (1 << (ora2epasParser.VARIABLE - 387)) | (1 << (ora2epasParser.VARRAY - 387)) | (1 << (ora2epasParser.VARYING - 387)) | (1 << (ora2epasParser.VERSION - 387)) | (1 << (ora2epasParser.VERSIONS - 387)) | (1 << (ora2epasParser.WAIT - 387)) | (1 << (ora2epasParser.WARNING - 387)) | (1 << (ora2epasParser.WELLFORMED - 387)) | (1 << (ora2epasParser.WHENEVER - 387)) | (1 << (ora2epasParser.WHILE - 387)) | (1 << (ora2epasParser.WITHIN - 387)) | (1 << (ora2epasParser.WORK - 387)) | (1 << (ora2epasParser.WRITE - 387)) | (1 << (ora2epasParser.XML - 387)) | (1 << (ora2epasParser.XMLAGG - 387)) | (1 << (ora2epasParser.XMLATTRIBUTES - 387)) | (1 << (ora2epasParser.XMLCAST - 387)) | (1 << (ora2epasParser.XMLCOLATTVAL - 387)) | (1 << (ora2epasParser.XMLELEMENT - 387)) | (1 << (ora2epasParser.XMLEXISTS - 387)) | (1 << (ora2epasParser.XMLFOREST - 387)) | (1 << (ora2epasParser.XMLNAMESPACES - 387)) | (1 << (ora2epasParser.XMLPARSE - 387)) | (1 << (ora2epasParser.XMLPI - 387)) | (1 << (ora2epasParser.XMLQUERY - 387)) | (1 << (ora2epasParser.XMLROOT - 387)) | (1 << (ora2epasParser.XMLSERIALIZE - 387)) | (1 << (ora2epasParser.XMLTABLE - 387)) | (1 << (ora2epasParser.YEAR - 387)) | (1 << (ora2epasParser.YES - 387)))) != 0) or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (ora2epasParser.YMINTERVAL_UNCONSTRAINED - 451)) | (1 << (ora2epasParser.ZONE - 451)) | (1 << (ora2epasParser.PREDICTION - 451)) | (1 << (ora2epasParser.PREDICTION_BOUNDS - 451)) | (1 << (ora2epasParser.PREDICTION_COST - 451)) | (1 << (ora2epasParser.PREDICTION_DETAILS - 451)) | (1 << (ora2epasParser.PREDICTION_PROBABILITY - 451)) | (1 << (ora2epasParser.PREDICTION_SET - 451)) | (1 << (ora2epasParser.CUME_DIST - 451)) | (1 << (ora2epasParser.DENSE_RANK - 451)) | (1 << (ora2epasParser.LISTAGG - 451)) | (1 << (ora2epasParser.PERCENT_RANK - 451)) | (1 << (ora2epasParser.PERCENTILE_CONT - 451)) | (1 << (ora2epasParser.PERCENTILE_DISC - 451)) | (1 << (ora2epasParser.RANK - 451)) | (1 << (ora2epasParser.AVG - 451)) | (1 << (ora2epasParser.CORR - 451)) | (1 << (ora2epasParser.COVAR_ - 451)) | (1 << (ora2epasParser.LAG - 451)) | (1 << (ora2epasParser.LEAD - 451)) | (1 << (ora2epasParser.MAX - 451)) | (1 << (ora2epasParser.MEDIAN - 451)) | (1 << (ora2epasParser.MIN - 451)) | (1 << (ora2epasParser.NTILE - 451)) | (1 << (ora2epasParser.RATIO_TO_REPORT - 451)) | (1 << (ora2epasParser.REGR_ - 451)) | (1 << (ora2epasParser.ROW_NUMBER - 451)) | (1 << (ora2epasParser.TRIM - 451)) | (1 << (ora2epasParser.SUM - 451)) | (1 << (ora2epasParser.STDDEV - 451)) | (1 << (ora2epasParser.VAR_ - 451)) | (1 << (ora2epasParser.VARIANCE - 451)) | (1 << (ora2epasParser.DBMS_ALERT - 451)) | (1 << (ora2epasParser.DBMS_AQADM - 451)) | (1 << (ora2epasParser.DBMS_AQ - 451)) | (1 << (ora2epasParser.DBMS_CRYPTO - 451)) | (1 << (ora2epasParser.DBMS_JOB - 451)) | (1 << (ora2epasParser.DBMS_LOB - 451)) | (1 << (ora2epasParser.DBMS_LOCK - 451)) | (1 << (ora2epasParser.DBMS_MVIEW - 451)) | (1 << (ora2epasParser.DBMS_OUTPUT - 451)) | (1 << (ora2epasParser.DBMS_PIPE - 451)) | (1 << (ora2epasParser.DBMS_PROFILER - 451)) | (1 << (ora2epasParser.DBMS_RANDOM - 451)) | (1 << (ora2epasParser.DBMS_RLS - 451)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 451)) | (1 << (ora2epasParser.DBMS_SESSION - 451)) | (1 << (ora2epasParser.DBMS_SQL - 451)) | (1 << (ora2epasParser.DBMS_UTILITY - 451)) | (1 << (ora2epasParser.EMP_ADMIN - 451)) | (1 << (ora2epasParser.UTL_ENCODE - 451)) | (1 << (ora2epasParser.UTL_FILE - 451)) | (1 << (ora2epasParser.UTL_HTTP - 451)) | (1 << (ora2epasParser.UTL_MAIL - 451)) | (1 << (ora2epasParser.UTL_RAW - 451)) | (1 << (ora2epasParser.UTL_SMTP - 451)) | (1 << (ora2epasParser.UTL_TCP - 451)) | (1 << (ora2epasParser.UTL_URL - 451)))) != 0) or _la==ora2epasParser.REGULAR_ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHR(self):
            return self.getToken(ora2epasParser.CHR, 0)

        def DECODE(self):
            return self.getToken(ora2epasParser.DECODE, 0)

        def SUBSTR(self):
            return self.getToken(ora2epasParser.SUBSTR, 0)

        def TO_CHAR(self):
            return self.getToken(ora2epasParser.TO_CHAR, 0)

        def TRIM(self):
            return self.getToken(ora2epasParser.TRIM, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_string_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_function_name" ):
                listener.enterString_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_function_name" ):
                listener.exitString_function_name(self)




    def string_function_name(self):

        localctx = ora2epasParser.String_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_string_function_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5313
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.CHR or ((((_la - 469)) & ~0x3f) == 0 and ((1 << (_la - 469)) & ((1 << (ora2epasParser.DECODE - 469)) | (1 << (ora2epasParser.SUBSTR - 469)) | (1 << (ora2epasParser.TO_CHAR - 469)) | (1 << (ora2epasParser.TRIM - 469)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Numeric_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(ora2epasParser.AVG, 0)

        def COUNT(self):
            return self.getToken(ora2epasParser.COUNT, 0)

        def NVL(self):
            return self.getToken(ora2epasParser.NVL, 0)

        def ROUND(self):
            return self.getToken(ora2epasParser.ROUND, 0)

        def SUM(self):
            return self.getToken(ora2epasParser.SUM, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_numeric_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_function_name" ):
                listener.enterNumeric_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_function_name" ):
                listener.exitNumeric_function_name(self)




    def numeric_function_name(self):

        localctx = ora2epasParser.Numeric_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_numeric_function_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5315
            _la = self._input.LA(1)
            if not(_la==ora2epasParser.COUNT or ((((_la - 466)) & ~0x3f) == 0 and ((1 << (_la - 466)) & ((1 << (ora2epasParser.AVG - 466)) | (1 << (ora2epasParser.NVL - 466)) | (1 << (ora2epasParser.ROUND - 466)) | (1 << (ora2epasParser.SUM - 466)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Supported_packagesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DBMS_ALERT(self):
            return self.getToken(ora2epasParser.DBMS_ALERT, 0)

        def DBMS_AQ(self):
            return self.getToken(ora2epasParser.DBMS_AQ, 0)

        def DBMS_AQADM(self):
            return self.getToken(ora2epasParser.DBMS_AQADM, 0)

        def DBMS_CRYPTO(self):
            return self.getToken(ora2epasParser.DBMS_CRYPTO, 0)

        def DBMS_JOB(self):
            return self.getToken(ora2epasParser.DBMS_JOB, 0)

        def DBMS_LOB(self):
            return self.getToken(ora2epasParser.DBMS_LOB, 0)

        def DBMS_LOCK(self):
            return self.getToken(ora2epasParser.DBMS_LOCK, 0)

        def DBMS_MVIEW(self):
            return self.getToken(ora2epasParser.DBMS_MVIEW, 0)

        def DBMS_OUTPUT(self):
            return self.getToken(ora2epasParser.DBMS_OUTPUT, 0)

        def DBMS_PIPE(self):
            return self.getToken(ora2epasParser.DBMS_PIPE, 0)

        def DBMS_PROFILER(self):
            return self.getToken(ora2epasParser.DBMS_PROFILER, 0)

        def DBMS_RANDOM(self):
            return self.getToken(ora2epasParser.DBMS_RANDOM, 0)

        def DBMS_RLS(self):
            return self.getToken(ora2epasParser.DBMS_RLS, 0)

        def DBMS_SCHEDULER(self):
            return self.getToken(ora2epasParser.DBMS_SCHEDULER, 0)

        def DBMS_SESSION(self):
            return self.getToken(ora2epasParser.DBMS_SESSION, 0)

        def DBMS_SQL(self):
            return self.getToken(ora2epasParser.DBMS_SQL, 0)

        def DBMS_UTILITY(self):
            return self.getToken(ora2epasParser.DBMS_UTILITY, 0)

        def EMP_ADMIN(self):
            return self.getToken(ora2epasParser.EMP_ADMIN, 0)

        def UTL_ENCODE(self):
            return self.getToken(ora2epasParser.UTL_ENCODE, 0)

        def UTL_FILE(self):
            return self.getToken(ora2epasParser.UTL_FILE, 0)

        def UTL_HTTP(self):
            return self.getToken(ora2epasParser.UTL_HTTP, 0)

        def UTL_MAIL(self):
            return self.getToken(ora2epasParser.UTL_MAIL, 0)

        def UTL_RAW(self):
            return self.getToken(ora2epasParser.UTL_RAW, 0)

        def UTL_SMTP(self):
            return self.getToken(ora2epasParser.UTL_SMTP, 0)

        def UTL_TCP(self):
            return self.getToken(ora2epasParser.UTL_TCP, 0)

        def UTL_URL(self):
            return self.getToken(ora2epasParser.UTL_URL, 0)

        def getRuleIndex(self):
            return ora2epasParser.RULE_supported_packages

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupported_packages" ):
                listener.enterSupported_packages(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupported_packages" ):
                listener.exitSupported_packages(self)




    def supported_packages(self):

        localctx = ora2epasParser.Supported_packagesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_supported_packages)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5317
            _la = self._input.LA(1)
            if not(((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & ((1 << (ora2epasParser.DBMS_ALERT - 488)) | (1 << (ora2epasParser.DBMS_AQADM - 488)) | (1 << (ora2epasParser.DBMS_AQ - 488)) | (1 << (ora2epasParser.DBMS_CRYPTO - 488)) | (1 << (ora2epasParser.DBMS_JOB - 488)) | (1 << (ora2epasParser.DBMS_LOB - 488)) | (1 << (ora2epasParser.DBMS_LOCK - 488)) | (1 << (ora2epasParser.DBMS_MVIEW - 488)) | (1 << (ora2epasParser.DBMS_OUTPUT - 488)) | (1 << (ora2epasParser.DBMS_PIPE - 488)) | (1 << (ora2epasParser.DBMS_PROFILER - 488)) | (1 << (ora2epasParser.DBMS_RANDOM - 488)) | (1 << (ora2epasParser.DBMS_RLS - 488)) | (1 << (ora2epasParser.DBMS_SCHEDULER - 488)) | (1 << (ora2epasParser.DBMS_SESSION - 488)) | (1 << (ora2epasParser.DBMS_SQL - 488)) | (1 << (ora2epasParser.DBMS_UTILITY - 488)) | (1 << (ora2epasParser.EMP_ADMIN - 488)) | (1 << (ora2epasParser.UTL_ENCODE - 488)) | (1 << (ora2epasParser.UTL_FILE - 488)) | (1 << (ora2epasParser.UTL_HTTP - 488)) | (1 << (ora2epasParser.UTL_MAIL - 488)) | (1 << (ora2epasParser.UTL_RAW - 488)) | (1 << (ora2epasParser.UTL_SMTP - 488)) | (1 << (ora2epasParser.UTL_TCP - 488)) | (1 << (ora2epasParser.UTL_URL - 488)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[235] = self.logical_or_expression_sempred
        self._predicates[236] = self.logical_and_expression_sempred
        self._predicates[241] = self.relational_expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def logical_or_expression_sempred(self, localctx:Logical_or_expressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def logical_and_expression_sempred(self, localctx:Logical_and_expressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def relational_expression_sempred(self, localctx:Relational_expressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         




